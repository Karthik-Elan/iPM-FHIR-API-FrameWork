<?xml version="1.0"?>
<doc>
    <assembly>
        <name>iSOFT.ANZ.PatientManagerService.Data.SqlClient</name>
    </assembly>
    <members>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHiedischargesummariesProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Hiedischargesummaries"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHiedischargesummariesProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHiedischargesummariesProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHiedischargesummariesProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Hiedischargesummaries"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHiedischargesummariesProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHiedischargesummariesProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHiedischargesummariesProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHiedischargesummariesProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHiedischargesummariesProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHiedischargesummariesProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHiedischargesummariesProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHiedischargesummariesProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_hiedsRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHiedischargesummariesProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Hiedischargesummaries objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHiedischargesummariesProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Hiedischargesummaries objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHiedischargesummariesProviderBase.GetByDocumentidHpio(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_HIEDS_DocId_HPIO index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_documentid"></param>
            <param name="_hpio"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHiedischargesummariesProviderBase.GetByDocumentid(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_HIEDS_DocumentId index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_documentid"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHiedischargesummariesProviderBase.GetByHpio(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_HIEDS_HPIO index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_hpio"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHiedischargesummariesProviderBase.GetByPatntRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_HIEDS_PATNT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_patntRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHiedischargesummariesProviderBase.GetByHiedsRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_HIEDischargeSummaries index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_hiedsRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Hiedischargesummaries"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHiedischargesummariesProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.Hiedischargesummaries})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.Hiedischargesummaries object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHiedischargesummariesProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.Hiedischargesummaries)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.Hiedischargesummaries object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.Hiedischargesummaries object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.Hiedischargesummaries object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHiedischargesummariesProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.Hiedischargesummaries)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.Hiedischargesummaries object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.Hiedischargesummaries object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferenceValuesProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ReferenceValues"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferenceValuesProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferenceValuesProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferenceValuesProvider.GetByRfvdmCodeRfvliCode(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All current Emergency Attendances rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.AeAttendances objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferenceValuesProvider.GetByRfvdmByRitypAltId(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            This method wraps the 'ReferenceValueView' stored procedure. 
            </summary>	
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object.</param>
            <remark></remark>
            <returns>A <see cref="T:System.Data.IDataReader"/> instance.</returns>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferenceValuesProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ReferenceValues"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferenceValuesProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferenceValuesProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferenceValuesProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferenceValuesProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferenceValuesProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferenceValuesProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferenceValuesProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferenceValuesProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_rfvalRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferenceValuesProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ReferenceValues objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferenceValuesProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ReferenceValues objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferenceValuesProviderBase.GetByMainCodeRfvdmCode(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_REFERENCE_VALUES index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_mainCode"></param>
            <param name="_rfvdmCode"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferenceValuesProviderBase.GetByMainCode(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_RFVAL_MAIN_CODE index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_mainCode"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferenceValuesProviderBase.GetByParntRefnoRfvdmCode(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_RFVAL_PARNT_RFVDM index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_parntRefno"></param>
            <param name="_rfvdmCode"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferenceValuesProviderBase.GetBySortOrderDescription(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_RFVAL_SORT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_sortOrder"></param>
            <param name="_description"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferenceValuesProviderBase.GetByRfvalRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_REFERENCE_VALUES index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_rfvalRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ReferenceValues"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferenceValuesProviderBase.GetByParntRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_RFVAL_PARNT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_parntRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferenceValuesProviderBase.GetByRfvdmCodeSelectValue(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_RFVAL_RFVDM index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_rfvdmCode"></param>
            <param name="_selectValue"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferenceValuesProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.ReferenceValues})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.ReferenceValues object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferenceValuesProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.ReferenceValues)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.ReferenceValues object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.ReferenceValues object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.ReferenceValues object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferenceValuesProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.ReferenceValues)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.ReferenceValues object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.ReferenceValues object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlBedsProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Beds"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlBedsProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlBedsProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlBedsProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Beds"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlBedsProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlBedsProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlBedsProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlBedsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlBedsProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlBedsProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlBedsProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlBedsProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_bedssRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlBedsProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Beds objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlBedsProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Beds objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlBedsProviderBase.GetByCode(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_BEDSS_CODE index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_code"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlBedsProviderBase.GetByBedssRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_BEDS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_bedssRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Beds"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlBedsProviderBase.GetBySpectRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_BEDSS_SPECT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_spectRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlBedsProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.Beds})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.Beds object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlBedsProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.Beds)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.Beds object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.Beds object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.Beds object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlBedsProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.Beds)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.Beds object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.Beds object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarersProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ProfCarers"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarersProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarersProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarersProvider.GetByRoleIdentifierType(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource with the Carer Role Reference Value Dependancies linked to Reference Value with RITYP code.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_mainIdent"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarersProvider.GetBySpectRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource with the by the Specialty Refno linked via Prof_Carer_Specialties
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_spectRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarersProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ProfCarers"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarersProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarersProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarersProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarersProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarersProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarersProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarersProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarersProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_procaRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarersProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProfCarers objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarersProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProfCarers objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarersProviderBase.GetByCartpRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PROCA_CARTP key.
            	CNA_PROCA_CARTP Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_cartpRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProfCarers objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarersProviderBase.GetByGradeRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PROCA_GRADE key.
            	CNA_PROCA_GRADE Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_gradeRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProfCarers objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarersProviderBase.GetBySexxxRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PROCA_SEXXX key.
            	CNA_PROCA_SEXXX Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_sexxxRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProfCarers objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarersProviderBase.GetByTitleRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PROCA_TITLE key.
            	CNA_PROCA_TITLE Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_titleRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProfCarers objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarersProviderBase.GetByLocalFlag(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_PROCA_LOCAL index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_localFlag"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarersProviderBase.GetBySurnameForenamePrtypRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_PROF_CARERS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_surname"></param>
            <param name="_forename"></param>
            <param name="_prtypRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarersProviderBase.GetBySndexSurnameSndexForename(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_PROF_CARERS_SNDEX index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_sndexSurname"></param>
            <param name="_sndexForename"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarersProviderBase.GetByUpperSurnameUpperForename(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_PROF_CARERS_UPPER index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_upperSurname"></param>
            <param name="_upperForename"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarersProviderBase.GetByUpperSurnameLocalFlag(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CLU_PROCA_UPP_SURNAME_LOCAL index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_upperSurname"></param>
            <param name="_localFlag"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarersProviderBase.GetByProcaRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_PROF_CARERS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_procaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ProfCarers"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarersProviderBase.GetByMainIdent(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the NZ_PROCA_MAIN index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_mainIdent"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarersProviderBase.GetByPrtypRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the SAH_PROCA_PRTYP index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_prtypRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarersProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.ProfCarers})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.ProfCarers object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarersProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.ProfCarers)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.ProfCarers object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.ProfCarers object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.ProfCarers object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarersProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.ProfCarers)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.ProfCarers object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.ProfCarers object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHealthOrganisationsProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.HealthOrganisations"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHealthOrganisationsProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHealthOrganisationsProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHealthOrganisationsProvider.GetByParntHitypCodeHotypCodeFiltered(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_HEORG_PARNT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_parntRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHealthOrganisationsProvider.GetBySearch(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_HEORG_DESCRIPTION index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_description"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHealthOrganisationsProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.HealthOrganisations"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHealthOrganisationsProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHealthOrganisationsProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHealthOrganisationsProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHealthOrganisationsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHealthOrganisationsProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHealthOrganisationsProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHealthOrganisationsProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHealthOrganisationsProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_heorgRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHealthOrganisationsProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.HealthOrganisations objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHealthOrganisationsProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.HealthOrganisations objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHealthOrganisationsProviderBase.GetByCasltRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_HEORG_CASLT key.
            	CNA_HEORG_CASLT Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_casltRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.HealthOrganisations objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHealthOrganisationsProviderBase.GetByHotypRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_HEORG_HOTYP key.
            	CNA_HEORG_HOTYP Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_hotypRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.HealthOrganisations objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHealthOrganisationsProviderBase.GetByDescription(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_HEORG_DESCRIPTION index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_description"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHealthOrganisationsProviderBase.GetByHotypRefnoLocalFlag(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_HEORG_HOTYP_LOCAL index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_hotypRefno"></param>
            <param name="_localFlag"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHealthOrganisationsProviderBase.GetByMainIdent(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_HEORG_MAIN_IDENT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_mainIdent"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHealthOrganisationsProviderBase.GetByHeorgRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_HEALTH_ORGANISATIONS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_heorgRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.HealthOrganisations"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHealthOrganisationsProviderBase.GetByParntRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_HEORG_PARNT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_parntRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHealthOrganisationsProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.HealthOrganisations})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.HealthOrganisations object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHealthOrganisationsProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.HealthOrganisations)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.HealthOrganisations object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.HealthOrganisations object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.HealthOrganisations object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHealthOrganisationsProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.HealthOrganisations)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.HealthOrganisations object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.HealthOrganisations object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSpecialtiesProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Specialties"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSpecialtiesProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSpecialtiesProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSpecialtiesProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Specialties"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSpecialtiesProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSpecialtiesProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSpecialtiesProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSpecialtiesProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSpecialtiesProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSpecialtiesProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSpecialtiesProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSpecialtiesProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_spectRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSpecialtiesProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Specialties objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSpecialtiesProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Specialties objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSpecialtiesProviderBase.GetByMainIdent(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_SPECT_MAIN_IDENT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_mainIdent"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSpecialtiesProviderBase.GetBySpectRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_SPECIALTIES index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_spectRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Specialties"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSpecialtiesProviderBase.GetByDivsnRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SPECT_DIVSN index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_divsnRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSpecialtiesProviderBase.GetByParntRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SPECT_PARNT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_parntRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSpecialtiesProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.Specialties})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.Specialties object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSpecialtiesProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.Specialties)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.Specialties object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.Specialties object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.Specialties object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSpecialtiesProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.Specialties)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.Specialties object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.Specialties object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointsProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ServicePoints"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointsProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointsProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointsProvider.GetByHeorgRefnoSptypRefnoHitypCode(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the SERVICE_POINTS_INDEX1 index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_heorgRefno"></param>
            <param name="_sptypRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointsProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ServicePoints"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointsProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointsProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointsProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointsProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointsProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointsProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointsProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_spontRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointsProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ServicePoints objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointsProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ServicePoints objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointsProviderBase.GetByPurpsRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_SPONT_PURPS key.
            	CNA_SPONT_PURPS Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_purpsRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ServicePoints objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointsProviderBase.GetByCodeSptypRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_SPONT_CODE index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_code"></param>
            <param name="_sptypRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointsProviderBase.GetByName(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_SPONT_NAME index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_name"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointsProviderBase.GetBySpontRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_SERVICE_POINTS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_spontRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ServicePoints"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointsProviderBase.GetByHeorgRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SPONT_HEORG index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_heorgRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointsProviderBase.GetByProcaRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SPONT_PROCA index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_procaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointsProviderBase.GetBySpectRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SPONT_SPECT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_spectRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointsProviderBase.GetBySptypRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SPONT_SPTYP index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_sptypRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointsProviderBase.GetBySteamRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SPONT_STEAM index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_steamRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointsProviderBase.GetBySptypRefnoHeorgRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the SERVICE_POINTS_INDEX1 index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_sptypRefno"></param>
            <param name="_heorgRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointsProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.ServicePoints})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.ServicePoints object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointsProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.ServicePoints)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.ServicePoints object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.ServicePoints object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.ServicePoints object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointsProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.ServicePoints)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.ServicePoints object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.ServicePoints object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointSessionsProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ServicePointSessions"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointSessionsProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointSessionsProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointSessionsProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ServicePointSessions"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointSessionsProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointSessionsProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointSessionsProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointSessionsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointSessionsProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointSessionsProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointSessionsProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointSessionsProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_spssnRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointSessionsProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ServicePointSessions objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointSessionsProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ServicePointSessions objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointSessionsProviderBase.GetByDayowRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_SPSSN_DAYOW key.
            	CNA_SPSSN_DAYOW Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_dayowRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ServicePointSessions objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointSessionsProviderBase.GetByFreofRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_SPSSN_FREOF key.
            	CNA_SPSSN_FREOF Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_freofRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ServicePointSessions objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointSessionsProviderBase.GetByFreof2Refno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_SPSSN_FREOF2 key.
            	CNA_SPSSN_FREOF2 Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_freof2Refno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ServicePointSessions objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointSessionsProviderBase.GetByFreof3Refno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_SPSSN_FREOF3 key.
            	CNA_SPSSN_FREOF3 Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_freof3Refno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ServicePointSessions objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointSessionsProviderBase.GetByFreof4Refno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_SPSSN_FREOF4 key.
            	CNA_SPSSN_FREOF4 Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_freof4Refno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ServicePointSessions objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointSessionsProviderBase.GetByFreqnRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_SPSSN_FREQN key.
            	CNA_SPSSN_FREQN Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_freqnRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ServicePointSessions objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointSessionsProviderBase.GetByPurpsRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_SPSSN_PURPS key.
            	CNA_SPSSN_PURPS Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_purpsRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ServicePointSessions objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointSessionsProviderBase.GetBySschrRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_SPSSN_SSCHR key.
            	CNA_SPSSN_SSCHR Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_sschrRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ServicePointSessions objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointSessionsProviderBase.GetBySsensRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_SPSSN_SSENS key.
            	CNA_SPSSN_SSENS Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_ssensRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ServicePointSessions objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointSessionsProviderBase.GetBySsersRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_SPSSN_SSERS key.
            	CNA_SPSSN_SSERS Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_ssersRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ServicePointSessions objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointSessionsProviderBase.GetBySssrsRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_SPSSN_SSSRS key.
            	CNA_SPSSN_SSSRS Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_sssrsRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ServicePointSessions objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointSessionsProviderBase.GetBySsstsRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_SPSSN_SSSTS key.
            	CNA_SPSSN_SSSTS Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_ssstsRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ServicePointSessions objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointSessionsProviderBase.GetBySstatRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_SPSSN_SSTAT key.
            	CNA_SPSSN_SSTAT Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_sstatRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ServicePointSessions objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointSessionsProviderBase.GetByStcrbRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_SPSSN_STCRB key.
            	CNA_SPSSN_STCRB Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_stcrbRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ServicePointSessions objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointSessionsProviderBase.GetByArchvFlag(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_SPSSN_ARCH index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_archvFlag"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointSessionsProviderBase.GetByCode(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_SPSSN_CODE index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_code"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointSessionsProviderBase.GetBySpssnRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_SERVICE_POINT_SESSIONS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_spssnRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ServicePointSessions"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointSessionsProviderBase.GetByActualProcaRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SPSSN_ACTUAL_PROCA index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_actualProcaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointSessionsProviderBase.GetByHeorgRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SPSSN_HEORG index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_heorgRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointSessionsProviderBase.GetByProcaRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SPSSN_PROCA index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_procaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointSessionsProviderBase.GetBySpectRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SPSSN_SPECT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_spectRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointSessionsProviderBase.GetBySpontRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SPSSN_SPONT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_spontRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointSessionsProviderBase.GetBySteamRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SPSSN_STEAM index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_steamRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointSessionsProviderBase.GetByTmpltRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SPSSN_TMPLT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_tmpltRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointSessionsProviderBase.GetByTmpltRefnoSpssnRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SPSSN_TMPLT_SPSSN index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_tmpltRefno"></param>
            <param name="_spssnRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointSessionsProviderBase.GetByTemplateFlagDirtyFlag(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the SAH_SPSSN_TMPLT_DIRTY index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_templateFlag"></param>
            <param name="_dirtyFlag"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointSessionsProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.ServicePointSessions})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.ServicePointSessions object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointSessionsProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.ServicePointSessions)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.ServicePointSessions object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.ServicePointSessions object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.ServicePointSessions object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointSessionsProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.ServicePointSessions)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.ServicePointSessions object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.ServicePointSessions object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferralsProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Referrals"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferralsProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferralsProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferralsProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Referrals"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferralsProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferralsProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferralsProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferralsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferralsProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferralsProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferralsProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferralsProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_refrlRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferralsProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Referrals objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferralsProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Referrals objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferralsProviderBase.GetByAustsRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_REFRL_AUSTS key.
            	CNA_REFRL_AUSTS Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_austsRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Referrals objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferralsProviderBase.GetByCanrsRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_REFRL_CANRS key.
            	CNA_REFRL_CANRS Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_canrsRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Referrals objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferralsProviderBase.GetByCstatRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_REFRL_CSTAT key.
            	CNA_REFRL_CSTAT Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_cstatRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Referrals objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferralsProviderBase.GetByPrityRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_REFRL_PRITY key.
            	CNA_REFRL_PRITY Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_prityRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Referrals objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferralsProviderBase.GetByReasnRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_REFRL_REASN key.
            	CNA_REFRL_REASN Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_reasnRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Referrals objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferralsProviderBase.GetByRfocmRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_REFRL_RFOCM key.
            	CNA_REFRL_RFOCM Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_rfocmRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Referrals objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferralsProviderBase.GetByRjectRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_REFRL_RJECT key.
            	CNA_REFRL_RJECT Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_rjectRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Referrals objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferralsProviderBase.GetByRqurgRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_REFRL_RQURG key.
            	CNA_REFRL_RQURG Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_rqurgRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Referrals objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferralsProviderBase.GetByRstatRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_REFRL_RSTAT key.
            	CNA_REFRL_RSTAT Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_rstatRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Referrals objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferralsProviderBase.GetBySorrfRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_REFRL_SORRF key.
            	CNA_REFRL_SORRF Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_sorrfRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Referrals objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferralsProviderBase.GetBySusrsRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_REFRL_SUSRS key.
            	CNA_REFRL_SUSRS Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_susrsRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Referrals objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferralsProviderBase.GetByUrgncRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_REFRL_URGNC key.
            	CNA_REFRL_URGNC Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_urgncRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Referrals objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferralsProviderBase.GetByRefrlRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_REFERRALS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_refrlRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Referrals"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferralsProviderBase.GetByAuthrRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_REFRL_AUTHR index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_authrRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferralsProviderBase.GetByAuthrHeorgRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_REFRL_AUTHR_HEORG index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_authrHeorgRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferralsProviderBase.GetByAuthrProcaRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_REFRL_AUTHR_PROCA index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_authrProcaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferralsProviderBase.GetByAuthrSpectRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_REFRL_AUTHR_SPECT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_authrSpectRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferralsProviderBase.GetByAuthrSteamRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_REFRL_AUTHR_STEAM index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_authrSteamRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferralsProviderBase.GetByContrRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_REFRL_CONTR index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_contrRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferralsProviderBase.GetByCtrsvRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_REFRL_CTRSV index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_ctrsvRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferralsProviderBase.GetByMhcepRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_REFRL_MHCEP index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_mhcepRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferralsProviderBase.GetByParntRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_REFRL_PARNT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_parntRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferralsProviderBase.GetByPatntRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_REFRL_PATNT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_patntRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferralsProviderBase.GetByPocarRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_REFRL_POCAR index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_pocarRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferralsProviderBase.GetByPriorRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_REFRL_PRIOR index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_priorRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferralsProviderBase.GetByProvdRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_REFRL_PROVD index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_provdRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferralsProviderBase.GetByPurchRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_REFRL_PURCH index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_purchRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferralsProviderBase.GetByRefbyHeorgRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_REFRL_REFBY_HEORG index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_refbyHeorgRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferralsProviderBase.GetByRefbyProcaRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_REFRL_REFBY_PROCA index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_refbyProcaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferralsProviderBase.GetByRefbySpectRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_REFRL_REFBY_SPECT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_refbySpectRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferralsProviderBase.GetByRefbySteamRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_REFRL_REFBY_STEAM index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_refbySteamRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferralsProviderBase.GetByReftoClinicSpontRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_REFRL_REFTO_CLINIC_SPONT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_reftoClinicSpontRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferralsProviderBase.GetByReftoHeorgRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_REFRL_REFTO_HEORG index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_reftoHeorgRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferralsProviderBase.GetByReftoProcaRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_REFRL_REFTO_PROCA index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_reftoProcaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferralsProviderBase.GetByReftoSpectRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_REFRL_REFTO_SPECT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_reftoSpectRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferralsProviderBase.GetByReftoSteamRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_REFRL_REFTO_STEAM index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_reftoSteamRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferralsProviderBase.GetByReftoWardSpontRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_REFRL_REFTO_WARD_SPONT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_reftoWardSpontRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferralsProviderBase.GetByRespHeorgRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_REFRL_RESP_HEORG index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_respHeorgRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferralsProviderBase.GetByRespProcaRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_REFRL_RESP_PROCA index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_respProcaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferralsProviderBase.GetByRespSpectRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_REFRL_RESP_SPECT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_respSpectRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferralsProviderBase.GetByRespSteamRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_REFRL_RESP_STEAM index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_respSteamRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferralsProviderBase.GetByRetypRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the REFERRALS_RETYP index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_retypRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferralsProviderBase.GetByAccrlRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the SAH_ACCRL_REFERRAL index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_accrlRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferralsProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.Referrals})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.Referrals object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferralsProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.Referrals)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.Referrals object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.Referrals object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.Referrals object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferralsProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.Referrals)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.Referrals object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.Referrals object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlBedStaysProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.BedStays"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlBedStaysProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlBedStaysProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlBedStaysProvider.GetBySpontRefnoOnDttm(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.DateTime,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the HSS_BEDST_START index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_startDttm"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlBedStaysProvider.GetBySpbedRefnoAfterDttm(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.DateTime,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_startDttm"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlBedStaysProvider.GetBedHistory(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Decimal,System.Int32,System.Int32)">
            <summary>
            This method wraps the 'GetBedHistory' stored procedure. 
            </summary>	
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object.</param>
            <remark></remark>
            <returns>A <see cref="T:System.Data.IDataReader"/> instance.</returns>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlBedStaysProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.BedStays"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlBedStaysProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlBedStaysProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlBedStaysProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlBedStaysProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlBedStaysProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlBedStaysProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlBedStaysProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlBedStaysProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_bedstRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlBedStaysProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.BedStays objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlBedStaysProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.BedStays objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlBedStaysProviderBase.GetByPriorPointer(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_PRIOR_POINTER index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_priorPointer"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlBedStaysProviderBase.GetByBedstRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_BED_STAYS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_bedstRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.BedStays"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlBedStaysProviderBase.GetByPatntRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_BEDST_PATNT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_patntRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlBedStaysProviderBase.GetByPercaRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_BEDST_PERCA index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_percaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlBedStaysProviderBase.GetBySpbedRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_BEDST_SPBED index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_spbedRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlBedStaysProviderBase.GetBySstayRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_BEDST_SSTAY index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_sstayRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlBedStaysProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.BedStays})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.BedStays object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlBedStaysProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.BedStays)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.BedStays object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.BedStays object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.BedStays object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlBedStaysProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.BedStays)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.BedStays object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.BedStays object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlRulesProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Rules"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlRulesProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlRulesProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlRulesProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Rules"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlRulesProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlRulesProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlRulesProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlRulesProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlRulesProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlRulesProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlRulesProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlRulesProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_rulesRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlRulesProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Rules objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlRulesProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Rules objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlRulesProviderBase.GetByCode(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_RULES_CODE index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_code"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlRulesProviderBase.GetByRltypCode(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CLU_RULES_RLTYP index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_rltypCode"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlRulesProviderBase.GetByRulesRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_RULES index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_rulesRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Rules"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlRulesProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.Rules})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.Rules object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlRulesProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.Rules)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.Rules object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.Rules object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.Rules object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlRulesProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.Rules)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.Rules object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.Rules object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferenceValueDependanciesProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueDependancies"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferenceValueDependanciesProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferenceValueDependanciesProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferenceValueDependanciesProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueDependancies"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferenceValueDependanciesProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferenceValueDependanciesProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferenceValueDependanciesProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferenceValueDependanciesProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferenceValueDependanciesProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferenceValueDependanciesProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferenceValueDependanciesProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferenceValueDependanciesProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_rfvldRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferenceValueDependanciesProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueDependancies objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferenceValueDependanciesProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueDependancies objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferenceValueDependanciesProviderBase.GetBySorceRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_RFVLD_SORCE_REFNO index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_sorceRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferenceValueDependanciesProviderBase.GetByRfvldRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_RFVLD index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_rfvldRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueDependancies"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferenceValueDependanciesProviderBase.GetByRfvalRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_RFVLD_RFVAL index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_rfvalRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferenceValueDependanciesProviderBase.GetBySorceCodeRfvalRefnoSorceRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Decimal,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the SAH_SRCE_CODE index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_sorceCode"></param>
            <param name="_rfvalRefno"></param>
            <param name="_sorceRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferenceValueDependanciesProviderBase.GetBySorceCodeSorceRefnoRfvalRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Nullable{System.Decimal},System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the SAH_SRCE_CODE2 index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_sorceCode"></param>
            <param name="_sorceRefno"></param>
            <param name="_rfvalRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferenceValueDependanciesProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueDependancies})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueDependancies object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferenceValueDependanciesProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueDependancies)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueDependancies object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueDependancies object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueDependancies object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferenceValueDependanciesProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueDependancies)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueDependancies object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueDependancies object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferenceValueLinksProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueLinks"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferenceValueLinksProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferenceValueLinksProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferenceValueLinksProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueLinks"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferenceValueLinksProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferenceValueLinksProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferenceValueLinksProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferenceValueLinksProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferenceValueLinksProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferenceValueLinksProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferenceValueLinksProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferenceValueLinksProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_refliRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferenceValueLinksProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueLinks objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferenceValueLinksProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueLinks objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferenceValueLinksProviderBase.GetByFromRfvalRefnoToRfvalRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_REFLI_RFVAL_FROM_TO index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_fromRfvalRefno"></param>
            <param name="_toRfvalRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferenceValueLinksProviderBase.GetByRefliRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_REFERENCE_VALUE_LINKS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_refliRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueLinks"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferenceValueLinksProviderBase.GetByFromRfvalRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_REFLI_FROM_RFVAL index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_fromRfvalRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferenceValueLinksProviderBase.GetByToRfvalRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_REFLI_TO_RFVAL index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_toRfvalRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferenceValueLinksProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueLinks})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueLinks object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferenceValueLinksProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueLinks)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueLinks object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueLinks object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueLinks object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferenceValueLinksProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueLinks)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueLinks object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueLinks object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientsProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Patients"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientsProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientsProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientsProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Patients"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientsProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientsProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientsProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientsProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientsProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientsProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientsProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_patntRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientsProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Patients objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientsProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Patients objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientsProviderBase.GetByApdthRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PATNT_APDTH key.
            	CNA_PATNT_APDTH Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_apdthRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Patients objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientsProviderBase.GetByBloodRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PATNT_BLOOD key.
            	CNA_PATNT_BLOOD Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_bloodRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Patients objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientsProviderBase.GetByCasltRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PATNT_CASLT key.
            	CNA_PATNT_CASLT Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_casltRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Patients objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientsProviderBase.GetByCntstRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PATNT_CNTST key.
            	CNA_PATNT_CNTST Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_cntstRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Patients objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientsProviderBase.GetByEthgrRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PATNT_ETHGR key.
            	CNA_PATNT_ETHGR Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_ethgrRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Patients objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientsProviderBase.GetByMarryRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PATNT_MARRY key.
            	CNA_PATNT_MARRY Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_marryRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Patients objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientsProviderBase.GetByMultbRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PATNT_MULTB key.
            	CNA_PATNT_MULTB Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_multbRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Patients objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientsProviderBase.GetByOccupRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PATNT_OCCUP key.
            	CNA_PATNT_OCCUP Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_occupRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Patients objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientsProviderBase.GetByRebesRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PATNT_REBES key.
            	CNA_PATNT_REBES Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_rebesRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Patients objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientsProviderBase.GetByReligRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PATNT_RELIG key.
            	CNA_PATNT_RELIG Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_religRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Patients objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientsProviderBase.GetBySexxxRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PATNT_SEXXX key.
            	CNA_PATNT_SEXXX Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_sexxxRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Patients objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientsProviderBase.GetBySpoklRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PATNT_SPOKL key.
            	CNA_PATNT_SPOKL Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_spoklRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Patients objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientsProviderBase.GetByTitleRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PATNT_TITLE key.
            	CNA_PATNT_TITLE Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_titleRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Patients objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientsProviderBase.GetByDecsdFlag(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_PATNT_DECSD index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_decsdFlag"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientsProviderBase.GetByUpperSurnameUpperPrefrdForename(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_PATNT_PREFRD index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_upperSurname"></param>
            <param name="_upperPrefrdForename"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientsProviderBase.GetBySndexSurnameSndexPrefrdForename(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_PATNT_PREFRD_SOUNDEX index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_sndexSurname"></param>
            <param name="_sndexPrefrdForename"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientsProviderBase.GetBySearchSurname(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_PATNT_SEARCH_SURNAME index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_searchSurname"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientsProviderBase.GetByUpperSurnameUpperSecondForename(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_PATNT_SECOND index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_upperSurname"></param>
            <param name="_upperSecondForename"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientsProviderBase.GetBySndexSurnameSndexSecondForename(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_PATNT_SECOND_SNDEX index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_sndexSurname"></param>
            <param name="_sndexSecondForename"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientsProviderBase.GetBySndexForenameSndexSurname(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_PATNT_SNDEX index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_sndexForename"></param>
            <param name="_sndexSurname"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientsProviderBase.GetByUpperSurnameUpperThirdForename(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_PATNT_THIRD index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_upperSurname"></param>
            <param name="_upperThirdForename"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientsProviderBase.GetBySndexSurnameSndexThirdForename(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_PATNT_THIRD_SNDEX index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_sndexSurname"></param>
            <param name="_sndexThirdForename"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientsProviderBase.GetByUpperSurnameUpperForename(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_PATNT_UPPER index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_upperSurname"></param>
            <param name="_upperForename"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientsProviderBase.GetByPatntRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_PATIENTS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_patntRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Patients"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientsProviderBase.GetByCntryRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PATNT_CNTRY index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_cntryRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientsProviderBase.GetByPasid(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the UK_PATNT_PASID index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_pasid"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientsProviderBase.GetByPrivateIdentifier(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the UK_PATNT_PRIVATE_ID index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_privateIdentifier"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientsProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.Patients})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.Patients object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientsProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.Patients)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.Patients object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.Patients object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.Patients object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientsProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.Patients)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.Patients object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.Patients object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlActiveInpatientsProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ActiveInpatients"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlActiveInpatientsProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlActiveInpatientsProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlActiveInpatientsProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ActiveInpatients"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlActiveInpatientsProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlActiveInpatientsProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlActiveInpatientsProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlActiveInpatientsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlActiveInpatientsProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlActiveInpatientsProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlActiveInpatientsProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlActiveInpatientsProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_ainptRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlActiveInpatientsProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ActiveInpatients objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlActiveInpatientsProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ActiveInpatients objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlActiveInpatientsProviderBase.GetByPatntRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_PATNT_REFNO index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_patntRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlActiveInpatientsProviderBase.GetBySpontRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_SPONT_REFNO index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_spontRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlActiveInpatientsProviderBase.GetByAinptRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_ACTIVE_INPATIENTS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_ainptRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ActiveInpatients"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlActiveInpatientsProviderBase.GetByPrvspRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the SAH_AINPT_PRVSP index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_prvspRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlActiveInpatientsProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.ActiveInpatients})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.ActiveInpatients object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlActiveInpatientsProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.ActiveInpatients)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.ActiveInpatients object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.ActiveInpatients object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.ActiveInpatients object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlActiveInpatientsProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.ActiveInpatients)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.ActiveInpatients object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.ActiveInpatients object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPersonalCarersProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.PersonalCarers"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPersonalCarersProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPersonalCarersProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPersonalCarersProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.PersonalCarers"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPersonalCarersProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPersonalCarersProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPersonalCarersProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPersonalCarersProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPersonalCarersProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPersonalCarersProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPersonalCarersProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPersonalCarersProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_percaRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPersonalCarersProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.PersonalCarers objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPersonalCarersProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.PersonalCarers objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPersonalCarersProviderBase.GetBySexxxRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PERCA_SEXXX key.
            	CNA_PERCA_SEXXX Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_sexxxRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.PersonalCarers objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPersonalCarersProviderBase.GetBySpoklRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PERCA_SPOKL key.
            	CNA_PERCA_SPOKL Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_spoklRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.PersonalCarers objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPersonalCarersProviderBase.GetByUpperSurnameUpperPrefrdForename(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_PERCA_PREFRD index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_upperSurname"></param>
            <param name="_upperPrefrdForename"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPersonalCarersProviderBase.GetBySndexSurnameSndexPrefrdForename(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_PERCA_PREFRD_SOUNDEX index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_sndexSurname"></param>
            <param name="_sndexPrefrdForename"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPersonalCarersProviderBase.GetByUpperSurnameUpperSecondForename(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_PERCA_SECOND index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_upperSurname"></param>
            <param name="_upperSecondForename"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPersonalCarersProviderBase.GetBySndexSurnameSndexSecondForename(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_PERCA_SECOND_SNDEX index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_sndexSurname"></param>
            <param name="_sndexSecondForename"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPersonalCarersProviderBase.GetByUpperSurnameUpperThirdForename(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_PERCA_THIRD index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_upperSurname"></param>
            <param name="_upperThirdForename"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPersonalCarersProviderBase.GetBySndexSurnameSndexThirdForename(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_PERCA_THIRD_SNDEX index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_sndexSurname"></param>
            <param name="_sndexThirdForename"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPersonalCarersProviderBase.GetBySurnameForename(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_PERSONAL_CARERS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_surname"></param>
            <param name="_forename"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPersonalCarersProviderBase.GetByPercaRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_PERSONAL_CARERS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_percaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.PersonalCarers"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPersonalCarersProviderBase.GetByPatntRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PERCA_PATNT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_patntRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPersonalCarersProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.PersonalCarers})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.PersonalCarers object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPersonalCarersProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.PersonalCarers)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.PersonalCarers object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.PersonalCarers object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.PersonalCarers object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPersonalCarersProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.PersonalCarers)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.PersonalCarers object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.PersonalCarers object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlStaffTeamsProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.StaffTeams"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlStaffTeamsProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlStaffTeamsProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlStaffTeamsProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.StaffTeams"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlStaffTeamsProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlStaffTeamsProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlStaffTeamsProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlStaffTeamsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlStaffTeamsProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlStaffTeamsProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlStaffTeamsProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlStaffTeamsProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_steamRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlStaffTeamsProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.StaffTeams objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlStaffTeamsProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.StaffTeams objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlStaffTeamsProviderBase.GetBySteamRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_STAFF_TEAMS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_steamRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.StaffTeams"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlStaffTeamsProviderBase.GetByHeorgRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_STEAM_HEORG index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_heorgRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlStaffTeamsProviderBase.GetByLeadrProcaRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_STEAM_LEADR_PROCA index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_leadrProcaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlStaffTeamsProviderBase.GetBySpectRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_STEAM_SPECT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_spectRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlStaffTeamsProviderBase.GetByCode(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the KH_Code index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_code"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlStaffTeamsProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.StaffTeams})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.StaffTeams object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlStaffTeamsProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.StaffTeams)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.StaffTeams object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.StaffTeams object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.StaffTeams object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlStaffTeamsProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.StaffTeams)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.StaffTeams object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.StaffTeams object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointBedsProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ServicePointBeds"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointBedsProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointBedsProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointBedsProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ServicePointBeds"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointBedsProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointBedsProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointBedsProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointBedsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointBedsProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointBedsProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointBedsProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointBedsProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_spbedRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointBedsProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ServicePointBeds objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointBedsProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ServicePointBeds objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointBedsProviderBase.GetBySpbedRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_SERVICE_POINT_BEDS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_spbedRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ServicePointBeds"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointBedsProviderBase.GetByBedssRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SPBED_BEDSS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_bedssRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointBedsProviderBase.GetBySpontRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SPBED_SPONT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_spontRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointBedsProviderBase.GetByWdproRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SPBED_WDPRO index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_wdproRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointBedsProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.ServicePointBeds})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.ServicePointBeds object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointBedsProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.ServicePointBeds)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.ServicePointBeds object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.ServicePointBeds object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.ServicePointBeds object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointBedsProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.ServicePointBeds)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.ServicePointBeds object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.ServicePointBeds object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferenceValueIdsProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueIds"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferenceValueIdsProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferenceValueIdsProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferenceValueIdsProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueIds"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferenceValueIdsProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferenceValueIdsProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferenceValueIdsProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferenceValueIdsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferenceValueIdsProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferenceValueIdsProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferenceValueIdsProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferenceValueIdsProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_rfvliRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferenceValueIdsProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueIds objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferenceValueIdsProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueIds objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferenceValueIdsProviderBase.GetByIdentifierRfvalRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_REFERENCE_VALUE_IDS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_identifier"></param>
            <param name="_rfvalRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferenceValueIdsProviderBase.GetByRfvliRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_REFERENCE_VALUE_IDS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_rfvliRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueIds"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferenceValueIdsProviderBase.GetByRfvalRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_RFVLI_RFVAL index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_rfvalRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferenceValueIdsProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueIds})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueIds object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferenceValueIdsProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueIds)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueIds object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueIds object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueIds object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlReferenceValueIdsProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueIds)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueIds object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueIds object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlWaitingListEntriesProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.WaitingListEntries"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlWaitingListEntriesProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlWaitingListEntriesProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlWaitingListEntriesProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.WaitingListEntries"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlWaitingListEntriesProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlWaitingListEntriesProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlWaitingListEntriesProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlWaitingListEntriesProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlWaitingListEntriesProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlWaitingListEntriesProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlWaitingListEntriesProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlWaitingListEntriesProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_wlistRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlWaitingListEntriesProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.WaitingListEntries objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlWaitingListEntriesProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.WaitingListEntries objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlWaitingListEntriesProviderBase.GetByAdcatRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_WLIST_ADCAT key.
            	CNA_WLIST_ADCAT Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_adcatRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.WaitingListEntries objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlWaitingListEntriesProviderBase.GetByClptyRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_WLIST_CLPTY key.
            	CNA_WLIST_CLPTY Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_clptyRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.WaitingListEntries objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlWaitingListEntriesProviderBase.GetByCstatRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_WLIST_CSTAT key.
            	CNA_WLIST_CSTAT Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_cstatRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.WaitingListEntries objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlWaitingListEntriesProviderBase.GetByDayowRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_WLIST_DAYOW key.
            	CNA_WLIST_DAYOW Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_dayowRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.WaitingListEntries objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlWaitingListEntriesProviderBase.GetByInmgtRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_WLIST_INMGT key.
            	CNA_WLIST_INMGT Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_inmgtRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.WaitingListEntries objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlWaitingListEntriesProviderBase.GetByPrityRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_WLIST_PRITY key.
            	CNA_WLIST_PRITY Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_prityRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.WaitingListEntries objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlWaitingListEntriesProviderBase.GetByRemvlRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_WLIST_REMVL key.
            	CNA_WLIST_REMVL Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_remvlRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.WaitingListEntries objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlWaitingListEntriesProviderBase.GetBySvtypRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_WLIST_SVTYP key.
            	CNA_WLIST_SVTYP Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_svtypRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.WaitingListEntries objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlWaitingListEntriesProviderBase.GetByTransRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_WLIST_TRANS key.
            	CNA_WLIST_TRANS Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_transRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.WaitingListEntries objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlWaitingListEntriesProviderBase.GetByUrgncRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_WLIST_URGNC key.
            	CNA_WLIST_URGNC Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_urgncRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.WaitingListEntries objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlWaitingListEntriesProviderBase.GetByWhocoRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_WLIST_WHOCO key.
            	CNA_WLIST_WHOCO Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_whocoRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.WaitingListEntries objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlWaitingListEntriesProviderBase.GetByProcaRefnoSpectRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_WAITING_LIST_ENTRIES index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_procaRefno"></param>
            <param name="_spectRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlWaitingListEntriesProviderBase.GetByPrityRefnoWlistRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_WLIST_PRITY_WLIST index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_prityRefno"></param>
            <param name="_wlistRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlWaitingListEntriesProviderBase.GetByWlistRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_WAITING_LIST_ENTRIES index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_wlistRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.WaitingListEntries"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlWaitingListEntriesProviderBase.GetByAdmdcRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_WLIST_ADMDC index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_admdcRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlWaitingListEntriesProviderBase.GetByContrRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_WLIST_CONTR index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_contrRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlWaitingListEntriesProviderBase.GetByHeorgRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_WLIST_HEORG index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_heorgRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlWaitingListEntriesProviderBase.GetByLocalWlrulRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_WLIST_LOCAL_WLRUL index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_localWlrulRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlWaitingListEntriesProviderBase.GetByPatntRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_WLIST_PATNT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_patntRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlWaitingListEntriesProviderBase.GetByPriorRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_WLIST_PRIOR index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_priorRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlWaitingListEntriesProviderBase.GetByProcaRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_WLIST_PROCA index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_procaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlWaitingListEntriesProviderBase.GetByProvdRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_WLIST_PROVD index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_provdRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlWaitingListEntriesProviderBase.GetByPurchRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_WLIST_PURCH index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_purchRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlWaitingListEntriesProviderBase.GetByRefrlRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_WLIST_REFRL index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_refrlRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlWaitingListEntriesProviderBase.GetBySpectRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_WLIST_SPECT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_spectRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlWaitingListEntriesProviderBase.GetBySpontRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_WLIST_SPONT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_spontRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlWaitingListEntriesProviderBase.GetByWlrulRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_WLIST_WLRUL index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_wlrulRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlWaitingListEntriesProviderBase.GetByXferSpontRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_WLIST_XFER_SPONT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_xferSpontRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlWaitingListEntriesProviderBase.GetByBktypRefnoStageRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the SAH_WLE_BKTYP_STAGE index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_bktypRefno"></param>
            <param name="_stageRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlWaitingListEntriesProviderBase.GetByLocalWlrulRefnoPrityRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the SAH_WLE_LCAT_PRITY index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_localWlrulRefno"></param>
            <param name="_prityRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlWaitingListEntriesProviderBase.GetByProcaRefnoSpectRefnoPrityRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the SAH_WLIST_PROCA_SPECT_PRITY index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_procaRefno"></param>
            <param name="_spectRefno"></param>
            <param name="_prityRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlWaitingListEntriesProviderBase.GetBySpectRefnoPrityRefnoSvtypRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the SAH_WLIST_SPECT_PRITY index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_spectRefno"></param>
            <param name="_prityRefno"></param>
            <param name="_svtypRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlWaitingListEntriesProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.WaitingListEntries})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.WaitingListEntries object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlWaitingListEntriesProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.WaitingListEntries)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.WaitingListEntries object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.WaitingListEntries object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.WaitingListEntries object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlWaitingListEntriesProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.WaitingListEntries)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.WaitingListEntries object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.WaitingListEntries object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAdmissionOffersProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.AdmissionOffers"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAdmissionOffersProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAdmissionOffersProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAdmissionOffersProvider.GetTciBetween(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.DateTime,System.DateTime,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource with TCI with TCI date between a given Date Range.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_tciDttm"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAdmissionOffersProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.AdmissionOffers"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAdmissionOffersProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAdmissionOffersProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAdmissionOffersProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAdmissionOffersProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAdmissionOffersProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAdmissionOffersProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAdmissionOffersProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAdmissionOffersProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_admofRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAdmissionOffersProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.AdmissionOffers objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAdmissionOffersProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.AdmissionOffers objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAdmissionOffersProviderBase.GetByConfmRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_ADMOF_CONFM key.
            	CNA_ADMOF_CONFM Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_confmRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.AdmissionOffers objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAdmissionOffersProviderBase.GetByDeferRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_ADMOF_DEFER key.
            	CNA_ADMOF_DEFER Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_deferRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.AdmissionOffers objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAdmissionOffersProviderBase.GetByOfocmRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_ADMOF_OFOCM index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_ofocmRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAdmissionOffersProviderBase.GetByAdmofRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_ADMISSION_OFFERS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_admofRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.AdmissionOffers"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAdmissionOffersProviderBase.GetBySpbedRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ADMOF_SPBED index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_spbedRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAdmissionOffersProviderBase.GetBySpontRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ADMOF_SPONT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_spontRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAdmissionOffersProviderBase.GetByWlistRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ADMOF_WLIST index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_wlistRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAdmissionOffersProviderBase.GetByXferSpontRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ADMOF_XFER_SPONT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_xferSpontRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAdmissionOffersProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.AdmissionOffers})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.AdmissionOffers object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAdmissionOffersProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.AdmissionOffers)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.AdmissionOffers object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.AdmissionOffers object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.AdmissionOffers object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAdmissionOffersProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.AdmissionOffers)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.AdmissionOffers object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.AdmissionOffers object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSchedulesProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Schedules"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSchedulesProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSchedulesProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSchedulesProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Schedules"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSchedulesProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSchedulesProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSchedulesProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSchedulesProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSchedulesProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSchedulesProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSchedulesProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSchedulesProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_schdlRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSchedulesProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Schedules objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSchedulesProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Schedules objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSchedulesProviderBase.GetByAdcatRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_SCHDL_ADCAT key.
            	CNA_SCHDL_ADCAT Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_adcatRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Schedules objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSchedulesProviderBase.GetByCccccRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_SCHDL_CCCCC key.
            	CNA_SCHDL_CCCCC Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_cccccRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Schedules objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSchedulesProviderBase.GetByContpRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_SCHDL_CONTP key.
            	CNA_SCHDL_CONTP Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_contpRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Schedules objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSchedulesProviderBase.GetByContyRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_SCHDL_CONTY key.
            	CNA_SCHDL_CONTY Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_contyRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Schedules objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSchedulesProviderBase.GetByCstatRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_SCHDL_CSTAT key.
            	CNA_SCHDL_CSTAT Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_cstatRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Schedules objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSchedulesProviderBase.GetByDnarsRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_SCHDL_DNARS key.
            	CNA_SCHDL_DNARS Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_dnarsRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Schedules objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSchedulesProviderBase.GetByLotypRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_SCHDL_LOTYP key.
            	CNA_SCHDL_LOTYP Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_lotypRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Schedules objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSchedulesProviderBase.GetByMovrnRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_SCHDL_MOVRN key.
            	CNA_SCHDL_MOVRN Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_movrnRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Schedules objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSchedulesProviderBase.GetByMurqbRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_SCHDL_MURQB key.
            	CNA_SCHDL_MURQB Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_murqbRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Schedules objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSchedulesProviderBase.GetByPrityRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_SCHDL_PRITY key.
            	CNA_SCHDL_PRITY Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_prityRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Schedules objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSchedulesProviderBase.GetByReasnRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_SCHDL_REASN key.
            	CNA_SCHDL_REASN Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_reasnRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Schedules objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSchedulesProviderBase.GetByResutRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_SCHDL_RESUT key.
            	CNA_SCHDL_RESUT Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_resutRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Schedules objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSchedulesProviderBase.GetBySatypRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_SCHDL_SATYP key.
            	CNA_SCHDL_SATYP Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_satypRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Schedules objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSchedulesProviderBase.GetByScocmRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_SCHDL_SCOCM key.
            	CNA_SCHDL_SCOCM Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_scocmRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Schedules objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSchedulesProviderBase.GetByScsdaRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_SCHDL_SCSDA key.
            	CNA_SCHDL_SCSDA Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_scsdaRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Schedules objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSchedulesProviderBase.GetBySctypRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_SCHDL_SCTYP key.
            	CNA_SCHDL_SCTYP Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_sctypRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Schedules objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSchedulesProviderBase.GetByTransRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_SCHDL_TRANS key.
            	CNA_SCHDL_TRANS Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_transRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Schedules objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSchedulesProviderBase.GetByUrgncRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_SCHDL_URGNC key.
            	CNA_SCHDL_URGNC Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_urgncRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Schedules objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSchedulesProviderBase.GetByVisitRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_SCHDL_VISIT key.
            	CNA_SCHDL_VISIT Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_visitRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Schedules objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSchedulesProviderBase.GetByAttndRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_SCHDL_ATTND index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_attndRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSchedulesProviderBase.GetByIdentifier(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_SCHDL_IDENTIFIER index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_identifier"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSchedulesProviderBase.GetByPatntRefnoSctypRefnoSpontRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_SCHDL_PATNT_SCTYP_SPONT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_patntRefno"></param>
            <param name="_sctypRefno"></param>
            <param name="_spontRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSchedulesProviderBase.GetBySctypRefnoArchvFlag(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_SCHDL_SCTYP index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_sctypRefno"></param>
            <param name="_archvFlag"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSchedulesProviderBase.GetBySchdlRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_SCHEDULES index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_schdlRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Schedules"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSchedulesProviderBase.GetByAdmofRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SCHDL_ADMOF index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_admofRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSchedulesProviderBase.GetByAeattRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SCHDL_AEATT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_aeattRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSchedulesProviderBase.GetByAnaesProcaRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SCHDL_ANAES_PROCA index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_anaesProcaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSchedulesProviderBase.GetByBedstRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SCHDL_BEDST index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_bedstRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSchedulesProviderBase.GetByContrRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SCHDL_CONTR index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_contrRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSchedulesProviderBase.GetByCtrsvRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SCHDL_CTRSV index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_ctrsvRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSchedulesProviderBase.GetByDnaSchdlRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SCHDL_DNA_SCHDL index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_dnaSchdlRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSchedulesProviderBase.GetByLinkRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SCHDL_LINK index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_linkRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSchedulesProviderBase.GetByLotypHeorgRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SCHDL_LOTYP_HEORG index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_lotypHeorgRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSchedulesProviderBase.GetByPaassRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SCHDL_PAASS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_paassRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSchedulesProviderBase.GetByPacacRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SCHDL_PACAC index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_pacacRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSchedulesProviderBase.GetByParntRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SCHDL_PARNT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_parntRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSchedulesProviderBase.GetByPatntRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SCHDL_PATNT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_patntRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSchedulesProviderBase.GetByPconfRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SCHDL_PCONF index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_pconfRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSchedulesProviderBase.GetByPrcaeRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SCHDL_PRCAE index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_prcaeRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSchedulesProviderBase.GetByPriorRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SCHDL_PRIOR index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_priorRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSchedulesProviderBase.GetByProcaRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SCHDL_PROCA index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_procaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSchedulesProviderBase.GetByProvdRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SCHDL_PROVD index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_provdRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSchedulesProviderBase.GetByPurchRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SCHDL_PURCH index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_purchRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSchedulesProviderBase.GetByRefrlRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SCHDL_REFRL index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_refrlRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSchedulesProviderBase.GetByScrcrRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SCHDL_SCRCR index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_scrcrRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSchedulesProviderBase.GetBySeenbyProcaRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SCHDL_SEENBY_PROCA index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_seenbyProcaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSchedulesProviderBase.GetBySpectRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SCHDL_SPECT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_spectRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSchedulesProviderBase.GetBySpontRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SCHDL_SPONT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_spontRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSchedulesProviderBase.GetBySpssnRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SCHDL_SPSSN index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_spssnRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSchedulesProviderBase.GetBySorceRefnoSorceCode(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SCHDL_SREFNO_SCODE index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_sorceRefno"></param>
            <param name="_sorceCode"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSchedulesProviderBase.GetBySstayRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SCHDL_SSTAY index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_sstayRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSchedulesProviderBase.GetBySstaySpontRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SCHDL_SSTAY_SPONT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_sstaySpontRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSchedulesProviderBase.GetBySteamRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SCHDL_STEAM index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_steamRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSchedulesProviderBase.GetByWlistRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SCHDL_WLIST index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_wlistRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSchedulesProviderBase.GetByProcaRefnoSctypRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PROCA_SCHDL index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_procaRefno"></param>
            <param name="_sctypRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSchedulesProviderBase.GetBySpontRefnoScsdaRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the SAH_SCHD_SPONT_SCSDA index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_spontRefno"></param>
            <param name="_scsdaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSchedulesProviderBase.GetByScocmRefnoSpectRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the SAH_SCHDL_SCOCMSPECT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_scocmRefno"></param>
            <param name="_spectRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSchedulesProviderBase.GetBySpontRefnoSctypRefnoSpectRefnoPatntRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the SAH_SCHEDULES_SPONTSPEC index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_spontRefno"></param>
            <param name="_sctypRefno"></param>
            <param name="_spectRefno"></param>
            <param name="_patntRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSchedulesProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.Schedules})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.Schedules object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSchedulesProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.Schedules)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.Schedules object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.Schedules object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.Schedules object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSchedulesProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.Schedules)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.Schedules object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.Schedules object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointProfilesProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ServicePointProfiles"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointProfilesProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointProfilesProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointProfilesProvider.GetBySpbedRefnoAfterDttm(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.DateTime,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_startDttm"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointProfilesProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ServicePointProfiles"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointProfilesProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointProfilesProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointProfilesProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointProfilesProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointProfilesProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointProfilesProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointProfilesProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointProfilesProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_spproRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointProfilesProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ServicePointProfiles objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointProfilesProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ServicePointProfiles objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointProfilesProviderBase.GetBySpproRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_SERVICE_POINT_PROFILES index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_spproRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ServicePointProfiles"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointProfilesProviderBase.GetByBedssRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SPPRO_BEDSS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_bedssRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointProfilesProviderBase.GetByProcaRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SPPRO_PROCA index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_procaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointProfilesProviderBase.GetByRfvalRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SPPRO_RFVAL index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_rfvalRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointProfilesProviderBase.GetByRulesRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SPPRO_RULES index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_rulesRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointProfilesProviderBase.GetBySpbayRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SPPRO_SPBAY index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_spbayRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointProfilesProviderBase.GetBySpbedRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SPPRO_SPBED index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_spbedRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointProfilesProviderBase.GetBySpectRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SPPRO_SPECT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_spectRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointProfilesProviderBase.GetBySpontRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SPPRO_SPONT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_spontRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointProfilesProviderBase.GetByWdproRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SPPRO_WDPRO index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_wdproRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointProfilesProviderBase.GetByArchvFlag(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the SAH_SPONT_PROFILES_ARCHV index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_archvFlag"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointProfilesProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.ServicePointProfiles})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.ServicePointProfiles object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointProfilesProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.ServicePointProfiles)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.ServicePointProfiles object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.ServicePointProfiles object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.ServicePointProfiles object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointProfilesProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.ServicePointProfiles)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.ServicePointProfiles object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.ServicePointProfiles object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointStaysProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ServicePointStays"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointStaysProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointStaysProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointStaysProvider.GetTransferEventsInTimePeriod(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.DateTime,System.DateTime,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_startDttm"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointStaysProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ServicePointStays"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointStaysProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointStaysProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointStaysProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointStaysProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointStaysProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointStaysProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointStaysProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointStaysProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_sstayRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointStaysProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ServicePointStays objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointStaysProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ServicePointStays objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointStaysProviderBase.GetByBdcatRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_SSTAY_BDCAT key.
            	CNA_SSTAY_BDCAT Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_bdcatRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ServicePointStays objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointStaysProviderBase.GetByHpstpRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_SSTAY_HPSTP key.
            	CNA_SSTAY_HPSTP Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_hpstpRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ServicePointStays objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointStaysProviderBase.GetByRehscRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_SSTAY_REHSC key.
            	CNA_SSTAY_REHSC Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_rehscRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ServicePointStays objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointStaysProviderBase.GetBySstypRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_SSTAY_SSTYP key.
            	CNA_SSTAY_SSTYP Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_sstypRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ServicePointStays objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointStaysProviderBase.GetByActiveIndicator(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_SSTAY_ACTIND index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_activeIndicator"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointStaysProviderBase.GetByPrvsnFlag(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_SSTAY_PRVSN index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_prvsnFlag"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointStaysProviderBase.GetByPrvsnFlagSpontRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_SSTAY_PRVSN_SPONT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_prvsnFlag"></param>
            <param name="_spontRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointStaysProviderBase.GetBySpontRefnoPrvsnFlag(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_SSTAY_SPONT_PRVSN index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_spontRefno"></param>
            <param name="_prvsnFlag"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointStaysProviderBase.GetBySstayRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_SERVICE_POINT_STAYS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_sstayRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ServicePointStays"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointStaysProviderBase.GetByPatntRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SSTAY_PATNT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_patntRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointStaysProviderBase.GetByPercaRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SSTAY_PERCA index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_percaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointStaysProviderBase.GetByProcaRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SSTAY_PROCA index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_procaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointStaysProviderBase.GetByPrvspRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SSTAY_PRVSP index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_prvspRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointStaysProviderBase.GetBySpontRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SSTAY_SPONT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_spontRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointStaysProviderBase.GetByPriorPointer(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the HAH_SSTAY_PRIOR index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_priorPointer"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointStaysProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.ServicePointStays})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.ServicePointStays object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointStaysProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.ServicePointStays)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.ServicePointStays object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.ServicePointStays object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.ServicePointStays object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointStaysProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.ServicePointStays)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.ServicePointStays object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.ServicePointStays object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlUserWorkStationsProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.UserWorkStations"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlUserWorkStationsProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlUserWorkStationsProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlUserWorkStationsProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.UserWorkStations"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlUserWorkStationsProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlUserWorkStationsProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlUserWorkStationsProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlUserWorkStationsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlUserWorkStationsProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlUserWorkStationsProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlUserWorkStationsProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlUserWorkStationsProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_uswrkRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlUserWorkStationsProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.UserWorkStations objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlUserWorkStationsProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.UserWorkStations objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlUserWorkStationsProviderBase.GetByUsersRefnoWkstnRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_USWRK_FULL index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_usersRefno"></param>
            <param name="_wkstnRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlUserWorkStationsProviderBase.GetByUswrkRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_USER_WORK_STATIONS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_uswrkRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.UserWorkStations"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlUserWorkStationsProviderBase.GetByUsersRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_USWRK_USERS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_usersRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlUserWorkStationsProviderBase.GetByWkstnRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_USWRK_WKSTN index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_wkstnRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlUserWorkStationsProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.UserWorkStations})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.UserWorkStations object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlUserWorkStationsProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.UserWorkStations)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.UserWorkStations object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.UserWorkStations object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.UserWorkStations object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlUserWorkStationsProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.UserWorkStations)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.UserWorkStations object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.UserWorkStations object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerEpisodesProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ProfCarerEpisodes"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerEpisodesProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerEpisodesProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerEpisodesProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ProfCarerEpisodes"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerEpisodesProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerEpisodesProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerEpisodesProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerEpisodesProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerEpisodesProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerEpisodesProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerEpisodesProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerEpisodesProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_prcaeRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerEpisodesProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProfCarerEpisodes objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerEpisodesProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProfCarerEpisodes objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerEpisodesProviderBase.GetByAdcatRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PRCAE_ADCAT key.
            	CNA_PRCAE_ADCAT Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_adcatRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProfCarerEpisodes objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerEpisodesProviderBase.GetByAdmetRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PRCAE_ADMET key.
            	CNA_PRCAE_ADMET Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_admetRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProfCarerEpisodes objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerEpisodesProviderBase.GetByAgebdRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PRCAE_AGEBD key.
            	CNA_PRCAE_AGEBD Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_agebdRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProfCarerEpisodes objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerEpisodesProviderBase.GetByAttndRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PRCAE_ATTND key.
            	CNA_PRCAE_ATTND Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_attndRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProfCarerEpisodes objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerEpisodesProviderBase.GetByCeocmRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PRCAE_CEOCM key.
            	CNA_PRCAE_CEOCM Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_ceocmRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProfCarerEpisodes objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerEpisodesProviderBase.GetByDnarsRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PRCAE_DNARS key.
            	CNA_PRCAE_DNARS Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_dnarsRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProfCarerEpisodes objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerEpisodesProviderBase.GetByEpisoRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PRCAE_EPISO key.
            	CNA_PRCAE_EPISO Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_episoRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProfCarerEpisodes objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerEpisodesProviderBase.GetByEptypRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PRCAE_EPTYP key.
            	CNA_PRCAE_EPTYP Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_eptypRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProfCarerEpisodes objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerEpisodesProviderBase.GetByInlocRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PRCAE_INLOC key.
            	CNA_PRCAE_INLOC Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_inlocRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProfCarerEpisodes objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerEpisodesProviderBase.GetByInmgtRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PRCAE_INMGT key.
            	CNA_PRCAE_INMGT Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_inmgtRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProfCarerEpisodes objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerEpisodesProviderBase.GetByLegscRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PRCAE_LEGSC key.
            	CNA_PRCAE_LEGSC Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_legscRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProfCarerEpisodes objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerEpisodesProviderBase.GetByMenctRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PRCAE_MENCT key.
            	CNA_PRCAE_MENCT Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_menctRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProfCarerEpisodes objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerEpisodesProviderBase.GetByPagrpRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PRCAE_PAGRP key.
            	CNA_PRCAE_PAGRP Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_pagrpRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProfCarerEpisodes objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerEpisodesProviderBase.GetByPatclRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PRCAE_PATCL key.
            	CNA_PRCAE_PATCL Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_patclRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProfCarerEpisodes objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerEpisodesProviderBase.GetByPaymtRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PRCAE_PAYMT key.
            	CNA_PRCAE_PAYMT Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_paymtRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProfCarerEpisodes objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerEpisodesProviderBase.GetByRectrRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PRCAE_RECTR key.
            	CNA_PRCAE_RECTR Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_rectrRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProfCarerEpisodes objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerEpisodesProviderBase.GetBySorrfRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PRCAE_SORRF key.
            	CNA_PRCAE_SORRF Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_sorrfRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProfCarerEpisodes objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerEpisodesProviderBase.GetBySpxrlRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PRCAE_SPXRL key.
            	CNA_PRCAE_SPXRL Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_spxrlRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProfCarerEpisodes objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerEpisodesProviderBase.GetByVisitRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PRCAE_VISIT key.
            	CNA_PRCAE_VISIT Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_visitRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProfCarerEpisodes objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerEpisodesProviderBase.GetByCstatRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_CSTAT_REFNO index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_cstatRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerEpisodesProviderBase.GetByAdmofRefnoArchvFlag(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_PRCAE_ADMOF_ARCHV index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_admofRefno"></param>
            <param name="_archvFlag"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerEpisodesProviderBase.GetByIdentifier(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_PRCAE_IDENTIFIER index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_identifier"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerEpisodesProviderBase.GetByPrvsnFlag(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_PRCAE_PRVSN index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_prvsnFlag"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerEpisodesProviderBase.GetByPrcaeRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_PROF_CARER_EPISODES index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_prcaeRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ProfCarerEpisodes"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerEpisodesProviderBase.GetByAdmofRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PRCAE_ADMOF index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_admofRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerEpisodesProviderBase.GetByCccccRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PRCAE_CCCCC index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_cccccRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerEpisodesProviderBase.GetByContrRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PRCAE_CONTR index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_contrRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerEpisodesProviderBase.GetByCtrsvRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PRCAE_CTRSV index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_ctrsvRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerEpisodesProviderBase.GetByMhcepRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PRCAE_MHCEP index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_mhcepRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerEpisodesProviderBase.GetByPatntRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PRCAE_PATNT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_patntRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerEpisodesProviderBase.GetByPriorRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PRCAE_PRIOR index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_priorRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerEpisodesProviderBase.GetByPriorPointer(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PRCAE_PRIOR_POINTER index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_priorPointer"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerEpisodesProviderBase.GetByProcaRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PRCAE_PROCA index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_procaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerEpisodesProviderBase.GetByProvdRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PRCAE_PROVD index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_provdRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerEpisodesProviderBase.GetByPrvspRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PRCAE_PRVSP index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_prvspRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerEpisodesProviderBase.GetByPurchRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PRCAE_PURCH index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_purchRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerEpisodesProviderBase.GetByRefrlRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PRCAE_REFRL index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_refrlRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerEpisodesProviderBase.GetBySpectRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PRCAE_SPECT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_spectRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerEpisodesProviderBase.GetBySpontRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PRCAE_SPONT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_spontRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerEpisodesProviderBase.GetBySstayRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PRCAE_SSTAY index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_sstayRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerEpisodesProviderBase.GetBySstaySpontRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PRCAE_SSTAY_SPONT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_sstaySpontRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerEpisodesProviderBase.GetByWlistRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PRCAE_WLIST index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_wlistRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerEpisodesProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.ProfCarerEpisodes})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.ProfCarerEpisodes object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerEpisodesProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.ProfCarerEpisodes)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.ProfCarerEpisodes object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.ProfCarerEpisodes object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.ProfCarerEpisodes object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerEpisodesProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.ProfCarerEpisodes)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.ProfCarerEpisodes object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.ProfCarerEpisodes object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlUserRolesProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.UserRoles"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlUserRolesProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlUserRolesProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlUserRolesProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.UserRoles"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlUserRolesProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlUserRolesProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlUserRolesProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlUserRolesProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlUserRolesProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlUserRolesProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlUserRolesProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlUserRolesProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_usrolRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlUserRolesProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.UserRoles objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlUserRolesProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.UserRoles objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlUserRolesProviderBase.GetByUsrolRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_USER_ROLES index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_usrolRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.UserRoles"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlUserRolesProviderBase.GetByAprolRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_USROL_APROL index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_aprolRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlUserRolesProviderBase.GetByUsersRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_USROL_USERS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_usersRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlUserRolesProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.UserRoles})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.UserRoles object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlUserRolesProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.UserRoles)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.UserRoles object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.UserRoles object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.UserRoles object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlUserRolesProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.UserRoles)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.UserRoles object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.UserRoles object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProviderSpellsProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ProviderSpells"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProviderSpellsProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProviderSpellsProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProviderSpellsProvider.GetProvisionalBetween(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.DateTime,System.DateTime,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Prvsn_Start_flag and Admit_dttm.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_modifDttm"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProviderSpellsProvider.GetProvisionalDischargesBeforeDttm(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.DateTime,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Prvsn_end_flag and Disch_dttm.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_modifDttm"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProviderSpellsProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ProviderSpells"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProviderSpellsProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProviderSpellsProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProviderSpellsProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProviderSpellsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProviderSpellsProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProviderSpellsProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProviderSpellsProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProviderSpellsProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_prvspRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProviderSpellsProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProviderSpells objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProviderSpellsProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProviderSpells objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProviderSpellsProviderBase.GetByAdcatRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PRVSP_ADCAT key.
            	CNA_PRVSP_ADCAT Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_adcatRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProviderSpells objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProviderSpellsProviderBase.GetByAdmitLegscRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PRVSP_ADMIT_LEGSC key.
            	CNA_PRVSP_ADMIT_LEGSC Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_admitLegscRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProviderSpells objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProviderSpellsProviderBase.GetByAdmitMenctRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PRVSP_ADMIT_MENCT key.
            	CNA_PRVSP_ADMIT_MENCT Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_admitMenctRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProviderSpells objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProviderSpellsProviderBase.GetByAdsorRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PRVSP_ADSOR key.
            	CNA_PRVSP_ADSOR Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_adsorRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProviderSpells objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProviderSpellsProviderBase.GetByAgebdRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PRVSP_AGEBD key.
            	CNA_PRVSP_AGEBD Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_agebdRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProviderSpells objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProviderSpellsProviderBase.GetByArrivTransRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PRVSP_ARRIV_TRANS key.
            	CNA_PRVSP_ARRIV_TRANS Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_arrivTransRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProviderSpells objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProviderSpellsProviderBase.GetByClevlRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PRVSP_CLEVL key.
            	CNA_PRVSP_CLEVL Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_clevlRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProviderSpells objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProviderSpellsProviderBase.GetByDeprtTransRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PRVSP_DEPRT_TRANS key.
            	CNA_PRVSP_DEPRT_TRANS Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_deprtTransRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProviderSpells objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProviderSpellsProviderBase.GetByDischRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PRVSP_DISCH key.
            	CNA_PRVSP_DISCH Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_dischRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProviderSpells objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProviderSpellsProviderBase.GetByDischLegscRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PRVSP_DISCH_LEGSC key.
            	CNA_PRVSP_DISCH_LEGSC Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_dischLegscRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProviderSpells objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProviderSpellsProviderBase.GetByDischMenctRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PRVSP_DISCH_MENCT key.
            	CNA_PRVSP_DISCH_MENCT Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_dischMenctRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProviderSpells objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProviderSpellsProviderBase.GetByDisdeRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PRVSP_DISDE key.
            	CNA_PRVSP_DISDE Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_disdeRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProviderSpells objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProviderSpellsProviderBase.GetByDismtRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PRVSP_DISMT key.
            	CNA_PRVSP_DISMT Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_dismtRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProviderSpells objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProviderSpellsProviderBase.GetByFolupRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PRVSP_FOLUP key.
            	CNA_PRVSP_FOLUP Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_folupRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProviderSpells objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProviderSpellsProviderBase.GetByInmgtRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PRVSP_INMGT key.
            	CNA_PRVSP_INMGT Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_inmgtRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProviderSpells objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProviderSpellsProviderBase.GetByNotadRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PRVSP_NOTAD key.
            	CNA_PRVSP_NOTAD Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_notadRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProviderSpells objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProviderSpellsProviderBase.GetByPatclRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PRVSP_PATCL key.
            	CNA_PRVSP_PATCL Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_patclRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProviderSpells objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProviderSpellsProviderBase.GetByReadmRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PRVSP_READM key.
            	CNA_PRVSP_READM Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_readmRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProviderSpells objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProviderSpellsProviderBase.GetByRefpaRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PRVSP_REFPA key.
            	CNA_PRVSP_REFPA Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_refpaRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProviderSpells objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProviderSpellsProviderBase.GetBySpellRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PRVSP_SPELL key.
            	CNA_PRVSP_SPELL Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_spellRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProviderSpells objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProviderSpellsProviderBase.GetByPrvsnEndFlag(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_PRVSP_PRVSN_END index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_prvsnEndFlag"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProviderSpellsProviderBase.GetByPrvspRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_PROVIDER_SPELLS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_prvspRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ProviderSpells"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProviderSpellsProviderBase.GetByAdmdcRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PRVSP_ADMDC index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_admdcRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProviderSpellsProviderBase.GetByAdmofRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PRVSP_ADMOF index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_admofRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProviderSpellsProviderBase.GetByAeattRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PRVSP_AEATT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_aeattRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProviderSpellsProviderBase.GetByArcarHeorgRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PRVSP_ARCAR_HEORG index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_arcarHeorgRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProviderSpellsProviderBase.GetByCccccRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PRVSP_CCCCC index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_cccccRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProviderSpellsProviderBase.GetByCntctProcaRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PRVSP_CNTCT_PROCA index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_cntctProcaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProviderSpellsProviderBase.GetByContrRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PRVSP_CONTR index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_contrRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProviderSpellsProviderBase.GetByDicarHeorgRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PRVSP_DICAR_HEORG index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_dicarHeorgRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProviderSpellsProviderBase.GetByMatspRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PRVSP_MATSP index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_matspRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProviderSpellsProviderBase.GetByMhcepRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PRVSP_MHCEP index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_mhcepRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProviderSpellsProviderBase.GetByPacacRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PRVSP_PACAC index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_pacacRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProviderSpellsProviderBase.GetByPatntRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PRVSP_PATNT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_patntRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProviderSpellsProviderBase.GetByPriorRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PRVSP_PRIOR index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_priorRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProviderSpellsProviderBase.GetByProcaRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PRVSP_PROCA index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_procaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProviderSpellsProviderBase.GetByProvdRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PRVSP_PROVD index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_provdRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProviderSpellsProviderBase.GetByPurchRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PRVSP_PURCH index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_purchRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProviderSpellsProviderBase.GetByRefrlRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PRVSP_REFRL index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_refrlRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProviderSpellsProviderBase.GetByRespHeorgRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PRVSP_RESP_HEORG index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_respHeorgRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProviderSpellsProviderBase.GetBySpectRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PRVSP_SPECT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_spectRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProviderSpellsProviderBase.GetBySpontRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PRVSP_SPONT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_spontRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProviderSpellsProviderBase.GetByPriorPointer(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the SAH_PRIOR_PRVSP index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_priorPointer"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProviderSpellsProviderBase.GetByIdentifier(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the SAH_PRVSP_IDENT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_identifier"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProviderSpellsProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.ProviderSpells})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.ProviderSpells object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProviderSpellsProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.ProviderSpells)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.ProviderSpells object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.ProviderSpells object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.ProviderSpells object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProviderSpellsProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.ProviderSpells)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.ProviderSpells object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.ProviderSpells object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointSuspensionsProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ServicePointSuspensions"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointSuspensionsProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointSuspensionsProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointSuspensionsProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ServicePointSuspensions"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointSuspensionsProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointSuspensionsProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointSuspensionsProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointSuspensionsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointSuspensionsProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointSuspensionsProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointSuspensionsProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointSuspensionsProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_spsusRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointSuspensionsProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ServicePointSuspensions objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointSuspensionsProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ServicePointSuspensions objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointSuspensionsProviderBase.GetByBedssRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the BM_missing_bedss index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_bedssRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointSuspensionsProviderBase.GetBySpbayRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the bm_missing_spbay index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_spbayRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointSuspensionsProviderBase.GetBySpsusRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the cpk_service_point_suspensions index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_spsusRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ServicePointSuspensions"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointSuspensionsProviderBase.GetBySpontRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the fk_spsus_spont index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_spontRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointSuspensionsProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.ServicePointSuspensions})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.ServicePointSuspensions object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointSuspensionsProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.ServicePointSuspensions)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.ServicePointSuspensions object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.ServicePointSuspensions object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.ServicePointSuspensions object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlServicePointSuspensionsProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.ServicePointSuspensions)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.ServicePointSuspensions object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.ServicePointSuspensions object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlTheatreEventsProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TheatreEvents"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlTheatreEventsProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlTheatreEventsProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlTheatreEventsProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TheatreEvents"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlTheatreEventsProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlTheatreEventsProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlTheatreEventsProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlTheatreEventsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlTheatreEventsProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlTheatreEventsProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlTheatreEventsProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlTheatreEventsProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_theveRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlTheatreEventsProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.TheatreEvents objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlTheatreEventsProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.TheatreEvents objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlTheatreEventsProviderBase.GetByTheveRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_THEATRE_EVENTS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_theveRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TheatreEvents"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlTheatreEventsProviderBase.GetBySchdlRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_THEVE_SCHDL index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_schdlRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlTheatreEventsProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.TheatreEvents})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.TheatreEvents object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlTheatreEventsProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TheatreEvents)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.TheatreEvents object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.TheatreEvents object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.TheatreEvents object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlTheatreEventsProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TheatreEvents)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.TheatreEvents object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.TheatreEvents object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSpecialtyIdsProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.SpecialtyIds"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSpecialtyIdsProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSpecialtyIdsProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSpecialtyIdsProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.SpecialtyIds"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSpecialtyIdsProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSpecialtyIdsProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSpecialtyIdsProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSpecialtyIdsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSpecialtyIdsProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSpecialtyIdsProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSpecialtyIdsProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSpecialtyIdsProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_speidRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSpecialtyIdsProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.SpecialtyIds objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSpecialtyIdsProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.SpecialtyIds objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSpecialtyIdsProviderBase.GetByIdentifierSpectRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_SPECIALTY_IDS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_identifier"></param>
            <param name="_spectRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSpecialtyIdsProviderBase.GetByIdentifierSitypRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_SPEID_IDENT_SITYP index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_identifier"></param>
            <param name="_sitypRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSpecialtyIdsProviderBase.GetBySpectRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_SPEID_SPECT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_spectRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSpecialtyIdsProviderBase.GetBySpeidRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_SPECIALTY_IDS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_speidRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.SpecialtyIds"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSpecialtyIdsProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.SpecialtyIds})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.SpecialtyIds object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSpecialtyIdsProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.SpecialtyIds)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.SpecialtyIds object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.SpecialtyIds object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.SpecialtyIds object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSpecialtyIdsProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.SpecialtyIds)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.SpecialtyIds object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.SpecialtyIds object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlUsersProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Users"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlUsersProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlUsersProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlUsersProvider.AuthenticateGroupRight(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets user rows from the DataSource for the given User and Rights Group Code.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Users objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlUsersProvider.GetBySearch(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the UK_USERS_CODE index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_code"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlUsersProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Users"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlUsersProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlUsersProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlUsersProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlUsersProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlUsersProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlUsersProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlUsersProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlUsersProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_usersRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlUsersProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Users objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlUsersProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Users objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlUsersProviderBase.GetByUsersRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_USERS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_usersRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Users"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlUsersProviderBase.GetByProcaRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_USERS_PROCA index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_procaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlUsersProviderBase.GetByAclevRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the UK_ACLEV index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_aclevRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlUsersProviderBase.GetByCode(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the UK_USERS_CODE index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_code"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlUsersProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.Users})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.Users object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlUsersProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.Users)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.Users object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.Users object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.Users object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlUsersProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.Users)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.Users object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.Users object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSystemProfilesProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.SystemProfiles"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSystemProfilesProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSystemProfilesProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSystemProfilesProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.SystemProfiles"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSystemProfilesProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSystemProfilesProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSystemProfilesProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSystemProfilesProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSystemProfilesProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSystemProfilesProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSystemProfilesProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSystemProfilesProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_syproRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSystemProfilesProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.SystemProfiles objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSystemProfilesProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.SystemProfiles objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSystemProfilesProviderBase.GetByCode(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_SYPRO_CODE index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_code"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSystemProfilesProviderBase.GetByCodeUsage(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_SYPRO_CODE_USAGE index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_code"></param>
            <param name="_usage"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSystemProfilesProviderBase.GetByUsersRefnoWkstnRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_SYPRO_FULL index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_usersRefno"></param>
            <param name="_wkstnRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSystemProfilesProviderBase.GetBySyproRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_SYSTEM_PROFILES index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_syproRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.SystemProfiles"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSystemProfilesProviderBase.GetByAprolRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SYPRO_APROL index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_aprolRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSystemProfilesProviderBase.GetByHeorgRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SYPRO_HEORG index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_heorgRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSystemProfilesProviderBase.GetByUsersRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SYPRO_USERS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_usersRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSystemProfilesProviderBase.GetByWkstnRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SYPRO_WKSTN index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_wkstnRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSystemProfilesProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.SystemProfiles})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.SystemProfiles object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSystemProfilesProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.SystemProfiles)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.SystemProfiles object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.SystemProfiles object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.SystemProfiles object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlSystemProfilesProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.SystemProfiles)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.SystemProfiles object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.SystemProfiles object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerStaffTeamsProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ProfCarerStaffTeams"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerStaffTeamsProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerStaffTeamsProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerStaffTeamsProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ProfCarerStaffTeams"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerStaffTeamsProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerStaffTeamsProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerStaffTeamsProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerStaffTeamsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerStaffTeamsProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerStaffTeamsProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerStaffTeamsProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerStaffTeamsProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_pcsttRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerStaffTeamsProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProfCarerStaffTeams objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerStaffTeamsProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProfCarerStaffTeams objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerStaffTeamsProviderBase.GetByPcsttRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_PROF_CARER_STAFF_TEAMS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_pcsttRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ProfCarerStaffTeams"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerStaffTeamsProviderBase.GetByProcaRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PCSTT_PROCA index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_procaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerStaffTeamsProviderBase.GetBySteamRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PCSTT_STEAM index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_steamRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerStaffTeamsProviderBase.GetByPrrolRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the SAH_PCST_PRROL index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_prrolRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerStaffTeamsProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.ProfCarerStaffTeams})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.ProfCarerStaffTeams object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerStaffTeamsProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.ProfCarerStaffTeams)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.ProfCarerStaffTeams object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.ProfCarerStaffTeams object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.ProfCarerStaffTeams object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerStaffTeamsProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.ProfCarerStaffTeams)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.ProfCarerStaffTeams object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.ProfCarerStaffTeams object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerSpecialtiesProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ProfCarerSpecialties"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerSpecialtiesProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerSpecialtiesProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerSpecialtiesProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ProfCarerSpecialties"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerSpecialtiesProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerSpecialtiesProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerSpecialtiesProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerSpecialtiesProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerSpecialtiesProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerSpecialtiesProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerSpecialtiesProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerSpecialtiesProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_prcasRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerSpecialtiesProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProfCarerSpecialties objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerSpecialtiesProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProfCarerSpecialties objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerSpecialtiesProviderBase.GetByCstypRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PRCAS_CSTYP key.
            	CNA_PRCAS_CSTYP Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_cstypRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProfCarerSpecialties objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerSpecialtiesProviderBase.GetByProcaRefnoSpectRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_PROF_CARER_SPECIALTIES index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_procaRefno"></param>
            <param name="_spectRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerSpecialtiesProviderBase.GetByPrcasRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_PROF_CARER_SPECIALTIES index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_prcasRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ProfCarerSpecialties"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerSpecialtiesProviderBase.GetByProcaRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PRCAS_PROCA index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_procaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerSpecialtiesProviderBase.GetBySpectRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PRCAS_SPECT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_spectRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerSpecialtiesProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.ProfCarerSpecialties})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.ProfCarerSpecialties object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerSpecialtiesProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.ProfCarerSpecialties)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.ProfCarerSpecialties object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.ProfCarerSpecialties object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.ProfCarerSpecialties object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerSpecialtiesProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.ProfCarerSpecialties)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.ProfCarerSpecialties object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.ProfCarerSpecialties object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAeStaysProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.AeStays"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAeStaysProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAeStaysProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAeStaysProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.AeStays"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAeStaysProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAeStaysProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAeStaysProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAeStaysProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAeStaysProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAeStaysProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAeStaysProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAeStaysProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_aestyRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAeStaysProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.AeStays objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAeStaysProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.AeStays objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAeStaysProviderBase.GetByAestyRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_AE_STAYS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_aestyRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.AeStays"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAeStaysProviderBase.GetByAeattRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_AESTY_AEATT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_aeattRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAeStaysProviderBase.GetByProcaRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_AESTY_PROCA index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_procaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAeStaysProviderBase.GetBySpectRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_AESTY_SPECT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_spectRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAeStaysProviderBase.GetBySpontRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_AESTY_SPONT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_spontRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAeStaysProviderBase.GetByTempSpontRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_AESTY_TEMP_SPONT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_tempSpontRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAeStaysProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.AeStays})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.AeStays object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAeStaysProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.AeStays)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.AeStays object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.AeStays object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.AeStays object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAeStaysProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.AeStays)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.AeStays object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.AeStays object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlApplicationRolesProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ApplicationRoles"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlApplicationRolesProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlApplicationRolesProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlApplicationRolesProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ApplicationRoles"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlApplicationRolesProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlApplicationRolesProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlApplicationRolesProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlApplicationRolesProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlApplicationRolesProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlApplicationRolesProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlApplicationRolesProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlApplicationRolesProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_aprolRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlApplicationRolesProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ApplicationRoles objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlApplicationRolesProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ApplicationRoles objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlApplicationRolesProviderBase.GetByCode(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_APROL_CODE index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_code"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlApplicationRolesProviderBase.GetByAprolRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_APPLICATION_ROLES index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_aprolRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ApplicationRoles"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlApplicationRolesProviderBase.GetByParntRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_APROL_PARNT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_parntRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlApplicationRolesProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.ApplicationRoles})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.ApplicationRoles object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlApplicationRolesProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.ApplicationRoles)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.ApplicationRoles object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.ApplicationRoles object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.ApplicationRoles object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlApplicationRolesProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.ApplicationRoles)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.ApplicationRoles object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.ApplicationRoles object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlBedProfilesProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.BedProfiles"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlBedProfilesProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlBedProfilesProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlBedProfilesProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.BedProfiles"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlBedProfilesProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlBedProfilesProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlBedProfilesProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlBedProfilesProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlBedProfilesProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlBedProfilesProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlBedProfilesProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlBedProfilesProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_bdproRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlBedProfilesProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.BedProfiles objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlBedProfilesProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.BedProfiles objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlBedProfilesProviderBase.GetByBdproRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_BED_PROFILES index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_bdproRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.BedProfiles"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlBedProfilesProviderBase.GetByBedssRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_BDPRO_BEDSS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_bedssRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlBedProfilesProviderBase.GetByProcaRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_BDPRO_PROCA index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_procaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlBedProfilesProviderBase.GetBySpectRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_BDPRO_SPECT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_spectRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlBedProfilesProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.BedProfiles})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.BedProfiles object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlBedProfilesProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.BedProfiles)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.BedProfiles object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.BedProfiles object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.BedProfiles object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlBedProfilesProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.BedProfiles)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.BedProfiles object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.BedProfiles object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlDependantResourcesProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.DependantResources"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlDependantResourcesProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlDependantResourcesProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlDependantResourcesProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.DependantResources"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlDependantResourcesProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlDependantResourcesProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlDependantResourcesProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlDependantResourcesProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlDependantResourcesProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlDependantResourcesProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlDependantResourcesProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlDependantResourcesProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_dpresRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlDependantResourcesProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.DependantResources objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlDependantResourcesProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.DependantResources objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlDependantResourcesProviderBase.GetByDpresRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_DEPENDANT_RESOURCES index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_dpresRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.DependantResources"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlDependantResourcesProviderBase.GetBySorceRefnoSorceCode(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_DPRES_SORCE index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_sorceRefno"></param>
            <param name="_sorceCode"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlDependantResourcesProviderBase.GetByResrcRefnoSorceRefnoSorceCodeArchvFlag(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the SAH_DEPRES_NEW index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_resrcRefno"></param>
            <param name="_sorceRefno"></param>
            <param name="_sorceCode"></param>
            <param name="_archvFlag"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlDependantResourcesProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.DependantResources})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.DependantResources object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlDependantResourcesProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.DependantResources)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.DependantResources object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.DependantResources object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.DependantResources object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlDependantResourcesProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.DependantResources)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.DependantResources object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.DependantResources object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAeHistoriesProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.AeHistories"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAeHistoriesProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAeHistoriesProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAeHistoriesProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.AeHistories"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAeHistoriesProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAeHistoriesProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAeHistoriesProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAeHistoriesProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAeHistoriesProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAeHistoriesProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAeHistoriesProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAeHistoriesProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_aehstRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAeHistoriesProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.AeHistories objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAeHistoriesProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.AeHistories objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAeHistoriesProviderBase.GetByAehstRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_AE_HISTORIES index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_aehstRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.AeHistories"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAeHistoriesProviderBase.GetByAeattRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_AEHST_AEATT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_aeattRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAeHistoriesProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.AeHistories})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.AeHistories object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAeHistoriesProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.AeHistories)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.AeHistories object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.AeHistories object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.AeHistories object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAeHistoriesProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.AeHistories)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.AeHistories object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.AeHistories object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAcuteListProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.AcuteList"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAcuteListProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAcuteListProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAcuteListProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.AcuteList"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAcuteListProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAcuteListProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAcuteListProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAcuteListProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAcuteListProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAcuteListProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAcuteListProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAcuteListProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_aclstRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAcuteListProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.AcuteList objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAcuteListProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.AcuteList objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAcuteListProviderBase.GetByAclstRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_ACUTE_LIST index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_aclstRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.AcuteList"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAcuteListProviderBase.GetByPatntRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ACLST_PATNT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_patntRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAcuteListProviderBase.GetByProcaRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ACLST_PROCA index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_procaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAcuteListProviderBase.GetBySchdlRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ACLST_SCHDL index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_schdlRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAcuteListProviderBase.GetBySpectRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ACLST_SPECT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_spectRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAcuteListProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.AcuteList})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.AcuteList object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAcuteListProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.AcuteList)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.AcuteList object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.AcuteList object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.AcuteList object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAcuteListProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.AcuteList)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.AcuteList object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.AcuteList object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAeAttendancesProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.AeAttendances"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAeAttendancesProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAeAttendancesProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAeAttendancesProvider.GetCurrent(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All current Emergency Attendances rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.AeAttendances objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAeAttendancesProvider.GetWithinTimeFrame(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.DateTime,System.DateTime,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets all current and departed or expected AE_ATTENDANCES within the given timeframe.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.AeAttendances objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAeAttendancesProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.AeAttendances"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAeAttendancesProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAeAttendancesProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAeAttendancesProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAeAttendancesProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAeAttendancesProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAeAttendancesProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAeAttendancesProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAeAttendancesProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_aeattRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAeAttendancesProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.AeAttendances objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAeAttendancesProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.AeAttendances objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAeAttendancesProviderBase.GetByAeattRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_AE_ATTENDANCES index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_aeattRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.AeAttendances"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAeAttendancesProviderBase.GetByAetraRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_AEATT_AETRA index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_aetraRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAeAttendancesProviderBase.GetByContrRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_AEATT_CONTR index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_contrRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAeAttendancesProviderBase.GetByDischProcaRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_AEATT_DISCH_PROCA index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_dischProcaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAeAttendancesProviderBase.GetByHeorgRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_AEATT_HEORG index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_heorgRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAeAttendancesProviderBase.GetByPatntRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_AEATT_PATNT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_patntRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAeAttendancesProviderBase.GetByPatpropRemoveProcaRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_AEATT_PATPROP_REMOVE_PROCA index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_patpropRemoveProcaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAeAttendancesProviderBase.GetByPatpropRemoveUsersRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_AEATT_PATPROP_REMOVE_USERS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_patpropRemoveUsersRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAeAttendancesProviderBase.GetByPatpropReturnProcaRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_AEATT_PATPROP_RETURN_PROCA index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_patpropReturnProcaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAeAttendancesProviderBase.GetByPatpropReturnUsersRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_AEATT_PATPROP_RETURN_USERS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_patpropReturnUsersRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAeAttendancesProviderBase.GetByPrevAeattRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_AEATT_PREV_AEATT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_prevAeattRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAeAttendancesProviderBase.GetByProvdRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_AEATT_PROVD index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_provdRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAeAttendancesProviderBase.GetByPrvspRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_AEATT_PRVSP index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_prvspRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAeAttendancesProviderBase.GetByPurchRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_AEATT_PURCH index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_purchRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAeAttendancesProviderBase.GetByRefrlRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_AEATT_REFRL index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_refrlRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAeAttendancesProviderBase.GetByRespProcaRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_AEATT_RESP_PROCA index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_respProcaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAeAttendancesProviderBase.GetByRtadtRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_AEATT_RTADT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_rtadtRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAeAttendancesProviderBase.GetBySchoolHeorgRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_AEATT_SCHOOL_HEORG index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_schoolHeorgRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAeAttendancesProviderBase.GetBySpontRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_AEATT_SPONT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_spontRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAeAttendancesProviderBase.GetByExpectedFlag(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the SAH_AE_EXPECTED index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_expectedFlag"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAeAttendancesProviderBase.GetByIdentifier(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the SAH_AEATT_IDENT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_identifier"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAeAttendancesProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.AeAttendances})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.AeAttendances object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAeAttendancesProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.AeAttendances)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.AeAttendances object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.AeAttendances object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.AeAttendances object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAeAttendancesProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.AeAttendances)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.AeAttendances object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.AeAttendances object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAddressesProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Addresses"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAddressesProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAddressesProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAddressesProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Addresses"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAddressesProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAddressesProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAddressesProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAddressesProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAddressesProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAddressesProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAddressesProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAddressesProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_addssRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAddressesProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Addresses objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAddressesProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Addresses objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAddressesProviderBase.GetByCntryRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_ADDSS_CNTRY key.
            	CNA_ADDSS_CNTRY Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_cntryRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Addresses objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAddressesProviderBase.GetByLine1PcodeAdtypCode(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_ADDRESSES index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_line1"></param>
            <param name="_pcode"></param>
            <param name="_adtypCode"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAddressesProviderBase.GetByHdistCode(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_ADDSS_HDIST index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_hdistCode"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAddressesProviderBase.GetByPcode(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_ADDSS_PCODE index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_pcode"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAddressesProviderBase.GetByAdtypCodePcode(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CLU_ADDSS_ADTYP_PCODE index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_adtypCode"></param>
            <param name="_pcode"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAddressesProviderBase.GetByAddssRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_ADDRESSES index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_addssRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Addresses"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAddressesProviderBase.GetByCommuOtcodRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ADDSS_COMMU_OTCOD index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_commuOtcodRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAddressesProviderBase.GetByCountOtcodRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ADDSS_COUNT_OTCOD index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_countOtcodRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAddressesProviderBase.GetByParshOtcodRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ADDSS_PARSH_OTCOD index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_parshOtcodRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAddressesProviderBase.GetByPcareOtcodRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ADDSS_PCARE_OTCOD index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_pcareOtcodRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAddressesProviderBase.GetByPuareOtcodRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ADDSS_PUARE_OTCOD index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_puareOtcodRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAddressesProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.Addresses})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.Addresses object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAddressesProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.Addresses)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.Addresses object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.Addresses object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.Addresses object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAddressesProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.Addresses)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.Addresses object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.Addresses object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAddressRolesProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.AddressRoles"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAddressRolesProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAddressRolesProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAddressRolesProvider.GetPostlByPatntRotyp(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_homelRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAddressRolesProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.AddressRoles"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAddressRolesProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAddressRolesProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAddressRolesProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAddressRolesProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAddressRolesProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAddressRolesProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAddressRolesProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAddressRolesProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_rolesRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAddressRolesProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.AddressRoles objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAddressRolesProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.AddressRoles objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAddressRolesProviderBase.GetByAddssRefnoPatntRefnoRotypCode(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Nullable{System.Decimal},System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_ADDRESS_ROLES index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_addssRefno"></param>
            <param name="_patntRefno"></param>
            <param name="_rotypCode"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAddressRolesProviderBase.GetByHeorgRefnoAddssRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_ROLES_HEORG_ADDSS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_heorgRefno"></param>
            <param name="_addssRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAddressRolesProviderBase.GetByHomelRefnoAddssRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_ROLES_HOMEL_ADDSS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_homelRefno"></param>
            <param name="_addssRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAddressRolesProviderBase.GetByPatpcRefnoAddssRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_ROLES_PATPC_ADDSS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_patpcRefno"></param>
            <param name="_addssRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAddressRolesProviderBase.GetByRolesRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_ADDRESS_ROLES index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_rolesRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.AddressRoles"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAddressRolesProviderBase.GetByAddssRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ROLES_ADDSS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_addssRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAddressRolesProviderBase.GetByDeprtPatrnRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ROLES_DEPRT_PATRN index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_deprtPatrnRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAddressRolesProviderBase.GetByHeorgRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ROLES_HEORG index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_heorgRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAddressRolesProviderBase.GetByHomelRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ROLES_HOMEL index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_homelRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAddressRolesProviderBase.GetByOrdrrRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ROLES_ORDRR index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_ordrrRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAddressRolesProviderBase.GetByPatntRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ROLES_PATNT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_patntRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAddressRolesProviderBase.GetByPatpcRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ROLES_PATPC index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_patpcRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAddressRolesProviderBase.GetByPercaRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ROLES_PERCA index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_percaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAddressRolesProviderBase.GetByPerssRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ROLES_PERSS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_perssRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAddressRolesProviderBase.GetByProcaRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ROLES_PROCA index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_procaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAddressRolesProviderBase.GetByProvdRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ROLES_PROVD index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_provdRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAddressRolesProviderBase.GetByPurchRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ROLES_PURCH index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_purchRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAddressRolesProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.AddressRoles})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.AddressRoles object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAddressRolesProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.AddressRoles)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.AddressRoles object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.AddressRoles object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.AddressRoles object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAddressRolesProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.AddressRoles)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.AddressRoles object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.AddressRoles object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAeAttendanceRolesProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.AeAttendanceRoles"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAeAttendanceRolesProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAeAttendanceRolesProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAeAttendanceRolesProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.AeAttendanceRoles"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAeAttendanceRolesProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAeAttendanceRolesProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAeAttendanceRolesProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAeAttendanceRolesProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAeAttendanceRolesProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAeAttendanceRolesProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAeAttendanceRolesProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAeAttendanceRolesProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_atrolRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAeAttendanceRolesProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.AeAttendanceRoles objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAeAttendanceRolesProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.AeAttendanceRoles objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAeAttendanceRolesProviderBase.GetByAtrolRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_AE_ATTENDANCE_ROLES index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_atrolRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.AeAttendanceRoles"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAeAttendanceRolesProviderBase.GetByAeattRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ATROL_AEATT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_aeattRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAeAttendanceRolesProviderBase.GetByTriagProcaRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ATROL_TRIAG_PROCA index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_triagProcaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAeAttendanceRolesProviderBase.GetByCurntFlag(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the SAH_ATROL_CURRNT_FLAG index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_curntFlag"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAeAttendanceRolesProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.AeAttendanceRoles})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.AeAttendanceRoles object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAeAttendanceRolesProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.AeAttendanceRoles)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.AeAttendanceRoles object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.AeAttendanceRoles object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.AeAttendanceRoles object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlAeAttendanceRolesProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.AeAttendanceRoles)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.AeAttendanceRoles object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.AeAttendanceRoles object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlDiagnosisProceduresProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.DiagnosisProcedures"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlDiagnosisProceduresProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlDiagnosisProceduresProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlDiagnosisProceduresProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.DiagnosisProcedures"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlDiagnosisProceduresProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlDiagnosisProceduresProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlDiagnosisProceduresProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlDiagnosisProceduresProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlDiagnosisProceduresProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlDiagnosisProceduresProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlDiagnosisProceduresProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlDiagnosisProceduresProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_dgproRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlDiagnosisProceduresProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.DiagnosisProcedures objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlDiagnosisProceduresProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.DiagnosisProcedures objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlDiagnosisProceduresProviderBase.GetByAnalcRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_DGPRO_ANALC key.
            	CNA_DGPRO_ANALC Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_analcRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.DiagnosisProcedures objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlDiagnosisProceduresProviderBase.GetByCptypRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_DGPRO_CPTYP key.
            	CNA_DGPRO_CPTYP Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_cptypRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.DiagnosisProcedures objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlDiagnosisProceduresProviderBase.GetByDountRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_DGPRO_DOUNT key.
            	CNA_DGPRO_DOUNT Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_dountRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.DiagnosisProcedures objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlDiagnosisProceduresProviderBase.GetByDpclaRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_DGPRO_DPCLA key.
            	CNA_DGPRO_DPCLA Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_dpclaRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.DiagnosisProcedures objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlDiagnosisProceduresProviderBase.GetByDplocRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_DGPRO_DPLOC key.
            	CNA_DGPRO_DPLOC Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_dplocRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.DiagnosisProcedures objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlDiagnosisProceduresProviderBase.GetByFruntRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_DGPRO_FRUNT key.
            	CNA_DGPRO_FRUNT Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_fruntRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.DiagnosisProcedures objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlDiagnosisProceduresProviderBase.GetByLatrlRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_DGPRO_LATRL key.
            	CNA_DGPRO_LATRL Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_latrlRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.DiagnosisProcedures objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlDiagnosisProceduresProviderBase.GetByMplevRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_DGPRO_MPLEV key.
            	CNA_DGPRO_MPLEV Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_mplevRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.DiagnosisProcedures objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlDiagnosisProceduresProviderBase.GetByPeradRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_DGPRO_PERAD key.
            	CNA_DGPRO_PERAD Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_peradRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.DiagnosisProcedures objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlDiagnosisProceduresProviderBase.GetByRsadmRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_DGPRO_RSADM key.
            	CNA_DGPRO_RSADM Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_rsadmRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.DiagnosisProcedures objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlDiagnosisProceduresProviderBase.GetByCodeCcsxtCode(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_DGPRO_CODE_CCSXT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_code"></param>
            <param name="_ccsxtCode"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlDiagnosisProceduresProviderBase.GetByDptypCode(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_DGPRO_DPTYP index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_dptypCode"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlDiagnosisProceduresProviderBase.GetByIcdstRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_DGPRO_ICDST index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_icdstRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlDiagnosisProceduresProviderBase.GetByPatntRefnoSorceCode(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_DGPRO_PATNT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_patntRefno"></param>
            <param name="_sorceCode"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlDiagnosisProceduresProviderBase.GetBySorceRefnoSorceCode(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_DGPRO_SORCE index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_sorceRefno"></param>
            <param name="_sorceCode"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlDiagnosisProceduresProviderBase.GetBySuplCode(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_DGPRO_SUPL index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_suplCode"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlDiagnosisProceduresProviderBase.GetByDgproRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_DIAGNOSIS_PROCEDURES index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_dgproRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.DiagnosisProcedures"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlDiagnosisProceduresProviderBase.GetByLinkDgproRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_DGPRO_LINK_DGPRO index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_linkDgproRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlDiagnosisProceduresProviderBase.GetByOdpcdRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_DGPRO_ODPCD index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_odpcdRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlDiagnosisProceduresProviderBase.GetByParntRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_DGPRO_PARNT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_parntRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlDiagnosisProceduresProviderBase.GetByPatntRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_DGPRO_PATNT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_patntRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlDiagnosisProceduresProviderBase.GetByPrcaeRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_DGPRO_PRCAE index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_prcaeRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlDiagnosisProceduresProviderBase.GetByProcaRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_DGPRO_PROCA index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_procaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlDiagnosisProceduresProviderBase.GetByRulesRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_DGPRO_RULES index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_rulesRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlDiagnosisProceduresProviderBase.GetBySpectRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_DGPRO_SPECT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_spectRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlDiagnosisProceduresProviderBase.GetBySteamRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_DGPRO_STEAM index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_steamRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlDiagnosisProceduresProviderBase.GetBySorceCodeCcsxtCode(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the SAH_DGPRO_SCODE_CCSXT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_sorceCode"></param>
            <param name="_ccsxtCode"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlDiagnosisProceduresProviderBase.GetBySorceCode(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the SAH_DGPRO_SORCE index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_sorceCode"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlDiagnosisProceduresProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.DiagnosisProcedures})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.DiagnosisProcedures object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlDiagnosisProceduresProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.DiagnosisProcedures)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.DiagnosisProcedures object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.DiagnosisProcedures object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.DiagnosisProcedures object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlDiagnosisProceduresProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.DiagnosisProcedures)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.DiagnosisProcedures object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.DiagnosisProcedures object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlExtractsProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Extracts"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlExtractsProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlExtractsProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlExtractsProvider.CheckUserCreateParameter">
            <summary>
            pre iPM APAC 3.0 does not have V_User_Create parameter,  APAC 3 and later, this parameter is required to the call to P_Begin_Sessn_Transaction        
            </summary>
            <returns></returns>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlExtractsProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Extracts"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlExtractsProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlExtractsProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlExtractsProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlExtractsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlExtractsProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlExtractsProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlExtractsProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlExtractsProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_extrcRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlExtractsProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Extracts objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlExtractsProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Extracts objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlExtractsProviderBase.GetByExtrcRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_EXTRACTS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_extrcRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Extracts"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlExtractsProviderBase.GetByExlogRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_EXTRC_EXLOG index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_exlogRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlExtractsProviderBase.GetByPatntRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_EXTRC_PATNT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_patntRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlExtractsProviderBase.GetByA5(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the NZ_EXTRC_A5 index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_a5"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlExtractsProviderBase.GetByA8(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the NZ_EXTRC_A8 index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_a8"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlExtractsProviderBase.GetByStranRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the NZ_EXTRC_STRAN index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_stranRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlExtractsProviderBase.GetByOperationType(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the SAH_EXTRC_OPERATION index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_operationType"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlExtractsProviderBase.GetByXtractDate(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.DateTime},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the SAH_EXTRC_XTRACT_DATE index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_xtractDate"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlExtractsProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.Extracts})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.Extracts object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlExtractsProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.Extracts)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.Extracts object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.Extracts object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.Extracts object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlExtractsProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.Extracts)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.Extracts object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.Extracts object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHealthOrgAccessProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.HealthOrgAccess"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHealthOrgAccessProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHealthOrgAccessProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHealthOrgAccessProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.HealthOrgAccess"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHealthOrgAccessProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHealthOrgAccessProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHealthOrgAccessProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHealthOrgAccessProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHealthOrgAccessProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHealthOrgAccessProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHealthOrgAccessProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHealthOrgAccessProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_heoacRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHealthOrgAccessProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.HealthOrgAccess objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHealthOrgAccessProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.HealthOrgAccess objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHealthOrgAccessProviderBase.GetByHeoacRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_HEALTH_ORG_ACCESS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_heoacRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.HealthOrgAccess"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHealthOrgAccessProviderBase.GetByHeorgRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_HEOAC_HEORG index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_heorgRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHealthOrgAccessProviderBase.GetByUsersRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_HEOAC_USERS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_usersRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHealthOrgAccessProviderBase.GetByUsgrpRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_HEOAC_USGRP index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_usgrpRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHealthOrgAccessProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.HealthOrgAccess})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.HealthOrgAccess object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHealthOrgAccessProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.HealthOrgAccess)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.HealthOrgAccess object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.HealthOrgAccess object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.HealthOrgAccess object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHealthOrgAccessProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.HealthOrgAccess)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.HealthOrgAccess object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.HealthOrgAccess object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientPersonalCarersProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.PatientPersonalCarers"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientPersonalCarersProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientPersonalCarersProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientPersonalCarersProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.PatientPersonalCarers"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientPersonalCarersProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientPersonalCarersProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientPersonalCarersProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientPersonalCarersProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientPersonalCarersProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientPersonalCarersProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientPersonalCarersProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientPersonalCarersProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_papcaRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientPersonalCarersProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.PatientPersonalCarers objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientPersonalCarersProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.PatientPersonalCarers objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientPersonalCarersProviderBase.GetByInforRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PAPCA_INFOR key.
            	CNA_PAPCA_INFOR Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_inforRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.PatientPersonalCarers objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientPersonalCarersProviderBase.GetByLgrspRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PAPCA_LGRSP key.
            	CNA_PAPCA_LGRSP Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_lgrspRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.PatientPersonalCarers objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientPersonalCarersProviderBase.GetByPetypRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PAPCA_PETYP key.
            	CNA_PAPCA_PETYP Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_petypRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.PatientPersonalCarers objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientPersonalCarersProviderBase.GetByReltnRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PAPCA_RELTN key.
            	CNA_PAPCA_RELTN Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_reltnRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.PatientPersonalCarers objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientPersonalCarersProviderBase.GetByPercaRefnoReltnRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_PAPCA_PERCA_RELTN index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_percaRefno"></param>
            <param name="_reltnRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientPersonalCarersProviderBase.GetByPatntRefnoPercaRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_PATIENT_PERSONAL_CARERS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_patntRefno"></param>
            <param name="_percaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientPersonalCarersProviderBase.GetByPapcaRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_PATIENT_PERSONAL_CARERS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_papcaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.PatientPersonalCarers"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientPersonalCarersProviderBase.GetByPatntRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PAPCA_PATNT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_patntRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientPersonalCarersProviderBase.GetByPatntRefnoCntctAllowed(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PAPCA_PATNT_CNTCT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_patntRefno"></param>
            <param name="_cntctAllowed"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientPersonalCarersProviderBase.GetByPercaRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PAPCA_PERCA index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_percaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientPersonalCarersProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.PatientPersonalCarers})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.PatientPersonalCarers object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientPersonalCarersProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.PatientPersonalCarers)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.PatientPersonalCarers object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.PatientPersonalCarers object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.PatientPersonalCarers object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientPersonalCarersProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.PatientPersonalCarers)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.PatientPersonalCarers object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.PatientPersonalCarers object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientTransportationsProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.PatientTransportations"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientTransportationsProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientTransportationsProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientTransportationsProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.PatientTransportations"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientTransportationsProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientTransportationsProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientTransportationsProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientTransportationsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientTransportationsProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientTransportationsProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientTransportationsProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientTransportationsProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_patrnRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientTransportationsProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.PatientTransportations objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientTransportationsProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.PatientTransportations objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientTransportationsProviderBase.GetByPatrnRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_PATIENT_TRANSPORTATIONS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_patrnRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.PatientTransportations"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientTransportationsProviderBase.GetByArrivHeorgRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PATRN_ARRIV_HEORG index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_arrivHeorgRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientTransportationsProviderBase.GetByDeprtHeorgRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PATRN_DEPRT_HEORG index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_deprtHeorgRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientTransportationsProviderBase.GetByFromHeorgRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PATRN_FROM_HEORG index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_fromHeorgRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientTransportationsProviderBase.GetByToHeorgRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PATRN_TO_HEORG index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_toHeorgRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientTransportationsProviderBase.GetBySorceRefnoSorceCode(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the SAH_SORCE_PAT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_sorceRefno"></param>
            <param name="_sorceCode"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientTransportationsProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.PatientTransportations})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.PatientTransportations object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientTransportationsProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.PatientTransportations)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.PatientTransportations object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.PatientTransportations object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.PatientTransportations object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientTransportationsProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.PatientTransportations)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.PatientTransportations object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.PatientTransportations object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPreadmissionsProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Preadmissions"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPreadmissionsProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPreadmissionsProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPreadmissionsProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Preadmissions"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPreadmissionsProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPreadmissionsProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPreadmissionsProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPreadmissionsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPreadmissionsProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPreadmissionsProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPreadmissionsProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPreadmissionsProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_preadRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPreadmissionsProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Preadmissions objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPreadmissionsProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Preadmissions objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPreadmissionsProviderBase.GetByAdcatRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PREAD_ADCAT key.
            	CNA_PREAD_ADCAT Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_adcatRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Preadmissions objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPreadmissionsProviderBase.GetByAdmetRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PREAD_ADMET key.
            	CNA_PREAD_ADMET Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_admetRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Preadmissions objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPreadmissionsProviderBase.GetByAdsorRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PREAD_ADSOR key.
            	CNA_PREAD_ADSOR Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_adsorRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Preadmissions objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPreadmissionsProviderBase.GetByInmgtRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PREAD_INMGT key.
            	CNA_PREAD_INMGT Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_inmgtRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Preadmissions objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPreadmissionsProviderBase.GetByNotadRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PREAD_NOTAD key.
            	CNA_PREAD_NOTAD Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_notadRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Preadmissions objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPreadmissionsProviderBase.GetByPatclRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PREAD_PATCL key.
            	CNA_PREAD_PATCL Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_patclRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Preadmissions objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPreadmissionsProviderBase.GetByReadmRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PREAD_READM key.
            	CNA_PREAD_READM Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_readmRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Preadmissions objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPreadmissionsProviderBase.GetByPreadRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_PREADMISSIONS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_preadRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Preadmissions"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPreadmissionsProviderBase.GetByAdmdcRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PREAD_ADMDC index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_admdcRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPreadmissionsProviderBase.GetByAdmofRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PREAD_ADMOF index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_admofRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPreadmissionsProviderBase.GetByBedplRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PREAD_BEDPL index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_bedplRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPreadmissionsProviderBase.GetByBorbdRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PREAD_BORBD index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_borbdRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPreadmissionsProviderBase.GetByCccccRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PREAD_CCCCC index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_cccccRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPreadmissionsProviderBase.GetByPatntRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PREAD_PATNT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_patntRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPreadmissionsProviderBase.GetByProcaRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PREAD_PROCA index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_procaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPreadmissionsProviderBase.GetBySpbedRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PREAD_SPBED index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_spbedRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPreadmissionsProviderBase.GetBySpectRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PREAD_SPECT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_spectRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPreadmissionsProviderBase.GetBySpontRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PREAD_SPONT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_spontRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPreadmissionsProviderBase.GetByWlistRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PREAD_WLIST index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_wlistRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPreadmissionsProviderBase.GetByXferSpontRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PREAD_XFER_SPONT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_xferSpontRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPreadmissionsProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.Preadmissions})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.Preadmissions object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPreadmissionsProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.Preadmissions)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.Preadmissions object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.Preadmissions object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.Preadmissions object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPreadmissionsProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.Preadmissions)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.Preadmissions object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.Preadmissions object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerIdsProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ProfCarerIds"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerIdsProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerIdsProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerIdsProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ProfCarerIds"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerIdsProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerIdsProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerIdsProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerIdsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerIdsProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerIdsProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerIdsProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerIdsProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_prcaiRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerIdsProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProfCarerIds objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerIdsProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProfCarerIds objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerIdsProviderBase.GetByIdentifier(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_PRCAI_IDENT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_identifier"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerIdsProviderBase.GetByProcaRefnoCitypRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_PRCAI_PROCA_CITYP index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_procaRefno"></param>
            <param name="_citypRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerIdsProviderBase.GetByIdentifierProcaRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_PROF_CARER_IDS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_identifier"></param>
            <param name="_procaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerIdsProviderBase.GetByPrcaiRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_PROF_CARER_IDS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_prcaiRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ProfCarerIds"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerIdsProviderBase.GetByProcaRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PRCAI_PROCA index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_procaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerIdsProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.ProfCarerIds})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.ProfCarerIds object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerIdsProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.ProfCarerIds)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.ProfCarerIds object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.ProfCarerIds object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.ProfCarerIds object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlProfCarerIdsProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.ProfCarerIds)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.ProfCarerIds object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.ProfCarerIds object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlOdpcdScrutiniesProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.OdpcdScrutinies"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlOdpcdScrutiniesProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlOdpcdScrutiniesProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlOdpcdScrutiniesProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.OdpcdScrutinies"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlOdpcdScrutiniesProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlOdpcdScrutiniesProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlOdpcdScrutiniesProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlOdpcdScrutiniesProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlOdpcdScrutiniesProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlOdpcdScrutiniesProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlOdpcdScrutiniesProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlOdpcdScrutiniesProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_odpscRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlOdpcdScrutiniesProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.OdpcdScrutinies objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlOdpcdScrutiniesProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.OdpcdScrutinies objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlOdpcdScrutiniesProviderBase.GetByCode(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_ODPCS_CODE index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_code"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlOdpcdScrutiniesProviderBase.GetByCcsxtCodeCode(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_ODPSC_CCSXT_CODE index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_ccsxtCode"></param>
            <param name="_code"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlOdpcdScrutiniesProviderBase.GetByOdpscRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_ODPCD_SCRUTINIES index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_odpscRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.OdpcdScrutinies"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlOdpcdScrutiniesProviderBase.GetByRulesRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ODPSC_RULES index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_rulesRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlOdpcdScrutiniesProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.OdpcdScrutinies})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.OdpcdScrutinies object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlOdpcdScrutiniesProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.OdpcdScrutinies)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.OdpcdScrutinies object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.OdpcdScrutinies object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.OdpcdScrutinies object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlOdpcdScrutiniesProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.OdpcdScrutinies)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.OdpcdScrutinies object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.OdpcdScrutinies object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlOdpcdCodesProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.OdpcdCodes"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlOdpcdCodesProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlOdpcdCodesProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlOdpcdCodesProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.OdpcdCodes"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlOdpcdCodesProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlOdpcdCodesProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlOdpcdCodesProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlOdpcdCodesProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlOdpcdCodesProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlOdpcdCodesProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlOdpcdCodesProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlOdpcdCodesProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_odpcdRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlOdpcdCodesProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.OdpcdCodes objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlOdpcdCodesProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.OdpcdCodes objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlOdpcdCodesProviderBase.GetByCodeCcsxtCode(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_ODPCD_CODES index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_code"></param>
            <param name="_ccsxtCode"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlOdpcdCodesProviderBase.GetByDescriptionCcsxtCode(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_ODPCD_DESCRIPTION_CCSXT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_description"></param>
            <param name="_ccsxtCode"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlOdpcdCodesProviderBase.GetByOdpcdRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_ODPCD_CODES index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_odpcdRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.OdpcdCodes"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlOdpcdCodesProviderBase.GetByCitemRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ODPCD_CITEM index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_citemRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlOdpcdCodesProviderBase.GetByParntRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ODPCD_PARNT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_parntRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlOdpcdCodesProviderBase.GetByCcsxtCode(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the SAH_ODPCD_CCSXT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_ccsxtCode"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlOdpcdCodesProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.OdpcdCodes})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.OdpcdCodes object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlOdpcdCodesProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.OdpcdCodes)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.OdpcdCodes object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.OdpcdCodes object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.OdpcdCodes object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlOdpcdCodesProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.OdpcdCodes)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.OdpcdCodes object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.OdpcdCodes object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNotesProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Notes"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNotesProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNotesProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNotesProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Notes"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNotesProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNotesProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNotesProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNotesProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNotesProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNotesProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNotesProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNotesProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_notesRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNotesProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Notes objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNotesProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Notes objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNotesProviderBase.GetByNotexCode(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_NOTES index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_notexCode"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNotesProviderBase.GetByNotesRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_NOTES index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_notesRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Notes"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNotesProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.Notes})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.Notes object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNotesProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.Notes)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.Notes object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.Notes object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.Notes object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNotesProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.Notes)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.Notes object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.Notes object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPeriodOfCareProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.PeriodOfCare"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPeriodOfCareProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPeriodOfCareProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPeriodOfCareProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.PeriodOfCare"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPeriodOfCareProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPeriodOfCareProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPeriodOfCareProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPeriodOfCareProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPeriodOfCareProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPeriodOfCareProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPeriodOfCareProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPeriodOfCareProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_pocarRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPeriodOfCareProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.PeriodOfCare objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPeriodOfCareProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.PeriodOfCare objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPeriodOfCareProviderBase.GetByReasnRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_POCAR_REASN key.
            	CNA_POCAR_REASN Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_reasnRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.PeriodOfCare objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPeriodOfCareProviderBase.GetByPocarRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_PERIOD_OF_CARE index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_pocarRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.PeriodOfCare"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPeriodOfCareProviderBase.GetByPatntRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_POCAR_PATNT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_patntRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPeriodOfCareProviderBase.GetByProcaRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_POCAR_PROCA index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_procaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPeriodOfCareProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.PeriodOfCare})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.PeriodOfCare object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPeriodOfCareProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.PeriodOfCare)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.PeriodOfCare object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.PeriodOfCare object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.PeriodOfCare object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPeriodOfCareProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.PeriodOfCare)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.PeriodOfCare object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.PeriodOfCare object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientProfCarersProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.PatientProfCarers"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientProfCarersProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientProfCarersProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientProfCarersProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.PatientProfCarers"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientProfCarersProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientProfCarersProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientProfCarersProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientProfCarersProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientProfCarersProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientProfCarersProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientProfCarersProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientProfCarersProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_patpcRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientProfCarersProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.PatientProfCarers objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientProfCarersProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.PatientProfCarers objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientProfCarersProviderBase.GetByPatntRefnoProcaRefnoHeorgRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_PATIENT_PROF_CARERS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_patntRefno"></param>
            <param name="_procaRefno"></param>
            <param name="_heorgRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientProfCarersProviderBase.GetByProcaRefnoPrtypRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_PATPC_PROCA_PRTYP index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_procaRefno"></param>
            <param name="_prtypRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientProfCarersProviderBase.GetByPatpcRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_PATIENT_PROF_CARERS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_patpcRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.PatientProfCarers"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientProfCarersProviderBase.GetByHeorgRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PATPC_HEORG index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_heorgRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientProfCarersProviderBase.GetByPatntRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PATPC_PATNT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_patntRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientProfCarersProviderBase.GetByProcaRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PATPC_PROCA index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_procaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientProfCarersProviderBase.GetByPrtypRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the SAH_PRTYP_PATPC index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_prtypRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientProfCarersProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.PatientProfCarers})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.PatientProfCarers object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientProfCarersProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.PatientProfCarers)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.PatientProfCarers object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.PatientProfCarers object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.PatientProfCarers object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlPatientProfCarersProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.PatientProfCarers)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.PatientProfCarers object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.PatientProfCarers object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHealthOrganisationIdsProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.HealthOrganisationIds"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHealthOrganisationIdsProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHealthOrganisationIdsProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHealthOrganisationIdsProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.HealthOrganisationIds"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHealthOrganisationIdsProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHealthOrganisationIdsProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHealthOrganisationIdsProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHealthOrganisationIdsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHealthOrganisationIdsProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHealthOrganisationIdsProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHealthOrganisationIdsProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHealthOrganisationIdsProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_heoidRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHealthOrganisationIdsProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.HealthOrganisationIds objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHealthOrganisationIdsProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.HealthOrganisationIds objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHealthOrganisationIdsProviderBase.GetByHitypRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_HEOID_HITYP key.
            	CNA_HEOID_HITYP Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_hitypRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.HealthOrganisationIds objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHealthOrganisationIdsProviderBase.GetByIdentifierHeorgRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_HEALTH_ORGANISATION_IDS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_identifier"></param>
            <param name="_heorgRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHealthOrganisationIdsProviderBase.GetByHeoidRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_HEALTH_ORGANISATION_IDS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_heoidRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.HealthOrganisationIds"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHealthOrganisationIdsProviderBase.GetByHeorgRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_HEOID_HEORG index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_heorgRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHealthOrganisationIdsProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.HealthOrganisationIds})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.HealthOrganisationIds object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHealthOrganisationIdsProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.HealthOrganisationIds)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.HealthOrganisationIds object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.HealthOrganisationIds object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.HealthOrganisationIds object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHealthOrganisationIdsProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.HealthOrganisationIds)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.HealthOrganisationIds object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.HealthOrganisationIds object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHomeLeavesProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.HomeLeaves"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHomeLeavesProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHomeLeavesProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHomeLeavesProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.HomeLeaves"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHomeLeavesProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHomeLeavesProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHomeLeavesProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHomeLeavesProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHomeLeavesProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHomeLeavesProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHomeLeavesProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHomeLeavesProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_homelRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHomeLeavesProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.HomeLeaves objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHomeLeavesProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.HomeLeaves objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHomeLeavesProviderBase.GetByLveocRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_HOMEL_LVEOC key.
            	CNA_HOMEL_LVEOC Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_lveocRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.HomeLeaves objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHomeLeavesProviderBase.GetByLvtypRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_HOMEL_LVTYP key.
            	CNA_HOMEL_LVTYP Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_lvtypRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.HomeLeaves objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHomeLeavesProviderBase.GetByHomelRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_HOME_LEAVES index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_homelRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.HomeLeaves"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHomeLeavesProviderBase.GetByPatntRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_HOMEL_PATNT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_patntRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHomeLeavesProviderBase.GetByPercaRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_HOMEL_PERCA index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_percaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHomeLeavesProviderBase.GetByPlgstRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_HOMEL_PLGST index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_plgstRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHomeLeavesProviderBase.GetByPrvspRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_HOMEL_PRVSP index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_prvspRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHomeLeavesProviderBase.GetBySstayRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_HOMEL_SSTAY index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_sstayRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHomeLeavesProviderBase.GetByPrvsnFlag(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the SAH_HOMEL_PRVSN_FLAG index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_prvsnFlag"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHomeLeavesProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.HomeLeaves})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.HomeLeaves object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHomeLeavesProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.HomeLeaves)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.HomeLeaves object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.HomeLeaves object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.HomeLeaves object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlHomeLeavesProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.HomeLeaves)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.HomeLeaves object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.HomeLeaves object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlWorkStationsProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.WorkStations"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlWorkStationsProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlWorkStationsProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlWorkStationsProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.WorkStations"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlWorkStationsProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlWorkStationsProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlWorkStationsProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlWorkStationsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlWorkStationsProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlWorkStationsProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlWorkStationsProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlWorkStationsProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_wkstnRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlWorkStationsProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.WorkStations objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlWorkStationsProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.WorkStations objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlWorkStationsProviderBase.GetByWkstnRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_WORK_STATIONS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_wkstnRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.WorkStations"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlWorkStationsProviderBase.GetByHeorgRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_WKSTN_HEORG index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_heorgRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlWorkStationsProviderBase.GetById(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the UK_WKSTN_ID index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.WorkStations"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlWorkStationsProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.WorkStations})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.WorkStations object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlWorkStationsProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.WorkStations)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.WorkStations object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.WorkStations object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.WorkStations object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlWorkStationsProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.WorkStations)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.WorkStations object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.WorkStations object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNoteRolesProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.NoteRoles"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNoteRolesProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNoteRolesProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNoteRolesProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.NoteRoles"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNoteRolesProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNoteRolesProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNoteRolesProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNoteRolesProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNoteRolesProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNoteRolesProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNoteRolesProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNoteRolesProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_notrlRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNoteRolesProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.NoteRoles objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNoteRolesProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.NoteRoles objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNoteRolesProviderBase.GetBySorceRefnoSorceCode(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_ROLES_SORCE index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_sorceRefno"></param>
            <param name="_sorceCode"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNoteRolesProviderBase.GetByNotrlRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_NOTE_ROLES index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_notrlRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.NoteRoles"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNoteRolesProviderBase.GetByNotesRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_NOTRL_NOTES index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_notesRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNoteRolesProviderBase.GetByNrtypRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the SAH_NOTRL_NRTYP index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_nrtypRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNoteRolesProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.NoteRoles})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.NoteRoles object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNoteRolesProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.NoteRoles)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.NoteRoles object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.NoteRoles object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.NoteRoles object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNoteRolesProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.NoteRoles)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.NoteRoles object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.NoteRoles object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider">
            <summary>
            This class is the Sql implementation of the NetTiersProvider.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider"/> class.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes the provider.
            </summary>
            <param name="name">The friendly name of the provider.</param>
            <param name="config">A collection of the name/value pairs representing the provider-specific attributes specified in the configuration for this provider.</param>
            <exception cref="T:System.ArgumentNullException">The name of the provider is null.</exception>
            <exception cref="T:System.InvalidOperationException">An attempt is made to call <see cref="M:System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)"></see> on a provider after the provider has already been initialized.</exception>
            <exception cref="T:System.ArgumentException">The name of the provider has a length of zero.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.CreateTransaction">
            <summary>
            Creates a new <c cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> instance from the current datasource.
            </summary>
            <returns></returns>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.UseStoredProcedure">
            <summary>
            Gets a value indicating whether to use stored procedure or not.
            </summary>
            <value>
            	<c>true</c> if this repository use stored procedures; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.IsTransactionSupported">
            <summary>
             Indicates if the current <c cref="T:iSOFT.ANZ.PatientManagerService.Data.Bases.NetTiersProvider"/> implementation supports Transacton.
            </summary>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.ReferenceValuesProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ReferenceValues"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlReferenceValuesProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlReferenceValuesProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.RulesProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Rules"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlRulesProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlRulesProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.PeriodOfCareProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.PeriodOfCare"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlPeriodOfCareProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlPeriodOfCareProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.PatientProfCarersProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.PatientProfCarers"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlPatientProfCarersProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlPatientProfCarersProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SpecialtiesProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Specialties"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlSpecialtiesProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlSpecialtiesProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.ApplicationRolesProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ApplicationRoles"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlApplicationRolesProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlApplicationRolesProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.PatientTransportationsProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.PatientTransportations"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlPatientTransportationsProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlPatientTransportationsProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.BedsProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Beds"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlBedsProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlBedsProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.OdpcdScrutiniesProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.OdpcdScrutinies"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlOdpcdScrutiniesProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlOdpcdScrutiniesProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.HealthOrgAccessProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.HealthOrgAccess"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlHealthOrgAccessProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlHealthOrgAccessProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.PatientsProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Patients"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlPatientsProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlPatientsProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.ActiveInpatientsProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ActiveInpatients"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlActiveInpatientsProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlActiveInpatientsProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.ServicePointSuspensionsProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ServicePointSuspensions"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlServicePointSuspensionsProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlServicePointSuspensionsProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.ProfCarersProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ProfCarers"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlProfCarersProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlProfCarersProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.ServicePointsProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ServicePoints"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlServicePointsProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlServicePointsProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.ServicePointBedsProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ServicePointBeds"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlServicePointBedsProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlServicePointBedsProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.PersonalCarersProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.PersonalCarers"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlPersonalCarersProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlPersonalCarersProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.ReferralsProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Referrals"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlReferralsProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlReferralsProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.ServicePointStaysProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ServicePointStays"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlServicePointStaysProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlServicePointStaysProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.BedStaysProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.BedStays"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlBedStaysProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlBedStaysProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.UsersProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Users"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlUsersProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlUsersProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.HealthOrganisationsProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.HealthOrganisations"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlHealthOrganisationsProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlHealthOrganisationsProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.StaffTeamsProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.StaffTeams"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlStaffTeamsProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlStaffTeamsProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.AdmissionOffersProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.AdmissionOffers"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlAdmissionOffersProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlAdmissionOffersProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SchedulesProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Schedules"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlSchedulesProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlSchedulesProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.WaitingListEntriesProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.WaitingListEntries"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlWaitingListEntriesProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlWaitingListEntriesProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.ProviderSpellsProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ProviderSpells"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlProviderSpellsProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlProviderSpellsProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.ProfCarerEpisodesProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ProfCarerEpisodes"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlProfCarerEpisodesProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlProfCarerEpisodesProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.HomeLeavesProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.HomeLeaves"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlHomeLeavesProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlHomeLeavesProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.AddressRolesProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.AddressRoles"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlAddressRolesProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlAddressRolesProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.OdpcdCodesProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.OdpcdCodes"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlOdpcdCodesProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlOdpcdCodesProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.PreadmissionsProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Preadmissions"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlPreadmissionsProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlPreadmissionsProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.BedProfilesProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.BedProfiles"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlBedProfilesProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlBedProfilesProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.DiagnosisProceduresProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.DiagnosisProcedures"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlDiagnosisProceduresProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlDiagnosisProceduresProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.ExtractsProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Extracts"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlExtractsProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlExtractsProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.NoteRolesProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.NoteRoles"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlNoteRolesProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlNoteRolesProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.WorkStationsProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.WorkStations"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlWorkStationsProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlWorkStationsProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.AeAttendanceRolesProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.AeAttendanceRoles"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlAeAttendanceRolesProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlAeAttendanceRolesProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.PatientPersonalCarersProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.PatientPersonalCarers"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlPatientPersonalCarersProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlPatientPersonalCarersProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.AddressesProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Addresses"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlAddressesProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlAddressesProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.AeStaysProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.AeStays"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlAeStaysProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlAeStaysProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.DependantResourcesProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.DependantResources"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlDependantResourcesProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlDependantResourcesProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.UserWorkStationsProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.UserWorkStations"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlUserWorkStationsProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlUserWorkStationsProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.ReferenceValueIdsProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueIds"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlReferenceValueIdsProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlReferenceValueIdsProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.ReferenceValueDependanciesProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueDependancies"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlReferenceValueDependanciesProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlReferenceValueDependanciesProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.ReferenceValueLinksProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueLinks"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlReferenceValueLinksProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlReferenceValueLinksProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.AeAttendancesProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.AeAttendances"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlAeAttendancesProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlAeAttendancesProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.ProfCarerSpecialtiesProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ProfCarerSpecialties"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlProfCarerSpecialtiesProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlProfCarerSpecialtiesProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.AeHistoriesProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.AeHistories"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlAeHistoriesProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlAeHistoriesProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.TheatreEventsProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TheatreEvents"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlTheatreEventsProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlTheatreEventsProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.NotesProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Notes"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlNotesProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlNotesProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.ProfCarerStaffTeamsProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ProfCarerStaffTeams"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlProfCarerStaffTeamsProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlProfCarerStaffTeamsProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.ServicePointProfilesProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ServicePointProfiles"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlServicePointProfilesProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlServicePointProfilesProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.ServicePointSessionsProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ServicePointSessions"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlServicePointSessionsProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlServicePointSessionsProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.AcuteListProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.AcuteList"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlAcuteListProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlAcuteListProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SystemProfilesProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.SystemProfiles"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlSystemProfilesProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlSystemProfilesProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.UserRolesProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.UserRoles"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlUserRolesProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlUserRolesProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SpecialtyIdsProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.SpecialtyIds"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlSpecialtyIdsProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlSpecialtyIdsProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.HealthOrganisationIdsProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.HealthOrganisationIds"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlHealthOrganisationIdsProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlHealthOrganisationIdsProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.ProfCarerIdsProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ProfCarerIds"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlProfCarerIdsProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlProfCarerIdsProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.HiedischargesummariesProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Hiedischargesummaries"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlHiedischargesummariesProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.SqlHiedischargesummariesProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(System.String,System.Object[])">
            <summary>
            Executes the non query.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(System.Data.Common.DbCommand)">
            <summary>
            Executes the non query.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(System.Data.CommandType,System.String)">
            <summary>
            Executes the non query.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(System.String,System.Object[])">
            <summary>
            Executes the reader.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(System.Data.Common.DbCommand)">
            <summary>
            Executes the reader.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(System.Data.CommandType,System.String)">
            <summary>
            Executes the reader.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(System.String,System.Object[])">
            <summary>
            Executes the data set.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(System.Data.Common.DbCommand)">
            <summary>
            Executes the data set.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(System.Data.CommandType,System.String)">
            <summary>
            Executes the data set.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(System.String,System.Object[])">
            <summary>
            Executes the scalar.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(System.Data.Common.DbCommand)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(System.Data.CommandType,System.String)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.StoredProcedureProvider">
            <summary>
            Summary description for Procedures.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.StoredProcedureProvider.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.StoredProcedureProvider"/> instance.
            </summary>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.StoredProcedureProvider.Current">
            <summary>
            Gets the current <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.StoredProcedureProvider"/> singleton instance.
            </summary>
            <value><see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.StoredProcedureProvider"/></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.StoredProcedureProvider.Procedures">
            <summary>
            Gets or sets the procedures.
            </summary>
            <value>An <see cref="T:System.Collections.ArrayList"/> of <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.Procedure"/> objects.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.StoredProcedureProvider.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.Procedure"/> instance with the specified name.
            </summary>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.StoredProcedureProvider.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.Procedure"/> instance at the specified index.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.StoredProcedureProvider.Serialize(System.String)">
            <summary>
            Serializes the specified filename.
            </summary>
            <param name="filename">Filename.</param>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.StoredProcedureProvider.Deserialize">
            <summary>
            Deserializes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.StoredProcedureProvider.GetProcedureBodyFromEmbeddedResource(System.String)">
            <summary>
            Get the query text from the embedded xml file.
            </summary>
            <param name="name">The name of the query.</param>
            <returns>the text of the query</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.StoredProcedureProvider.GetCommandWrapper(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.String,System.Boolean)">
            <summary>
            Get the command wrapper, either from the stored procedures or from the embedded queries.
            </summary>
            <param name="database">The database instance.</param>
            <param name="commandName">the name of the sp.</param>
            <param name="useStoredProcedure">Indicates if we want stored procedure.</param>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.StoredProcedureProvider.GetCommandWrapper(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.String,System.Type,iSOFT.ANZ.PatientManagerService.Data.SqlFilterParameterCollection,System.String,System.Int32,System.Int32)">
            <summary>
            Gets the command wrapper for a dynamically generated query and
            optionally includes server-side paging.
            </summary>
            <param name="database"></param>
            <param name="commandName"></param>
            <param name="columnEnum"></param>
            <param name="parameters"></param>
            <param name="orderBy"></param>
            <param name="start"></param>
            <param name="pageLength"></param>
            <returns></returns>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.Procedure">
            <summary>
            Represents a sql query.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.Procedure.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.Procedure"/> instance.
            </summary>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.Procedure.Parameters">
            <summary>
            Gets or sets the parameters.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.Procedure.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.Procedure.Owner">
            <summary>
            Gets or sets the owner.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.Procedure.Comment">
            <summary>
            Gets or sets the comment.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.Procedure.Body">
            <summary>
            Gets or sets the body.
            </summary>
            <value></value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.Procedure.Parameter(System.String)">
            <summary>
            Get the parameter from the specified name of the param.
            </summary>
            <param name="paramName">Name of the param.</param>
            <returns></returns>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.Parameter">
            <summary>
            Respresents a query parameter.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.SqlClient.Parameter.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlClient.Parameter"/> instance.
            </summary>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.Parameter.Name">
            <summary>
            Gets or sets the Name.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.Parameter.SqlType">
            <summary>
            Gets or sets the SqlType.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.Parameter.Direction">
            <summary>
            Gets or sets the Direction.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.Parameter.Size">
            <summary>
            Gets or sets the size.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.Parameter.Precision">
            <summary>
            Gets or sets the precision.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.SqlClient.Parameter.Scale">
            <summary>
            Gets or sets the scale.
            </summary>
            <value></value>
        </member>
    </members>
</doc>
