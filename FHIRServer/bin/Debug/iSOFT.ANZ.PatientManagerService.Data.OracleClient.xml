<?xml version="1.0"?>
<doc>
    <assembly>
        <name>iSOFT.ANZ.PatientManagerService.Data.OracleClient</name>
    </assembly>
    <members>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHiedischargesummariesProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Hiedischargesummaries"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHiedischargesummariesProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHiedischargesummariesProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHiedischargesummariesProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Hiedischargesummaries"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHiedischargesummariesProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHiedischargesummariesProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHiedischargesummariesProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHiedischargesummariesProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHiedischargesummariesProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHiedischargesummariesProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHiedischargesummariesProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHiedischargesummariesProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_hiedsRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHiedischargesummariesProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Hiedischargesummaries objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHiedischargesummariesProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Hiedischargesummaries objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHiedischargesummariesProviderBase.GetByHiedsRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_HIEDISCHARGESUMMARIES index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_hiedsRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Hiedischargesummaries"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHiedischargesummariesProviderBase.GetByPatntRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_HIEDS_PATNT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_patntRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHiedischargesummariesProviderBase.GetByHpio(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_HIEDS_HPIO index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_hpio"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHiedischargesummariesProviderBase.GetByDocumentid(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_HIEDS_DOCUMENTID index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_documentid"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHiedischargesummariesProviderBase.GetByDocumentidHpio(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_HIEDS_DOCID_HPIO index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_documentid"></param>
            <param name="_hpio"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHiedischargesummariesProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.Hiedischargesummaries})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.Hiedischargesummaries object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHiedischargesummariesProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.Hiedischargesummaries)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.Hiedischargesummaries object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.Hiedischargesummaries object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.Hiedischargesummaries object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHiedischargesummariesProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.Hiedischargesummaries)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.Hiedischargesummaries object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.Hiedischargesummaries object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferenceValuesProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ReferenceValues"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferenceValuesProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferenceValuesProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferenceValuesProvider.GetByRfvdmCodeRfvliCode(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All current Emergency Attendances rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.AeAttendances objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferenceValuesProvider.GetByRfvdmByRitypAltId(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            This method wraps the 'ReferenceValueView' stored procedure. 
            </summary>	
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object.</param>
            <remark></remark>
            <returns>A <see cref="T:System.Data.IDataReader"/> instance.</returns>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferenceValuesProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ReferenceValues"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferenceValuesProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferenceValuesProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferenceValuesProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferenceValuesProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferenceValuesProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferenceValuesProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferenceValuesProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferenceValuesProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_rfvalRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferenceValuesProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ReferenceValues objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferenceValuesProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ReferenceValues objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferenceValuesProviderBase.GetByParntRefnoRfvdmCode(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_RFVAL_PARNT_RFVDM index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_parntRefno"></param>
            <param name="_rfvdmCode"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferenceValuesProviderBase.GetByMainCodeRfvdmCode(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_REFERENCE_VALUES index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_mainCode"></param>
            <param name="_rfvdmCode"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferenceValuesProviderBase.GetByRfvalRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_REFERENCE_VALUES index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_rfvalRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ReferenceValues"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferenceValuesProviderBase.GetByMainCode(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_RFVAL_MAIN_CODE index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_mainCode"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferenceValuesProviderBase.GetByRfvdmCodeSelectValue(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_RFVAL_RFVDM index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_rfvdmCode"></param>
            <param name="_selectValue"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferenceValuesProviderBase.GetByParntRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_RFVAL_PARNT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_parntRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferenceValuesProviderBase.GetBySortOrderDescription(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_RFVAL_SORT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_sortOrder"></param>
            <param name="_description"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferenceValuesProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.ReferenceValues})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.ReferenceValues object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferenceValuesProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.ReferenceValues)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.ReferenceValues object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.ReferenceValues object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.ReferenceValues object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferenceValuesProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.ReferenceValues)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.ReferenceValues object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.ReferenceValues object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHealthOrganisationsProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.HealthOrganisations"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHealthOrganisationsProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHealthOrganisationsProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHealthOrganisationsProvider.GetByParntHitypCodeHotypCodeFiltered(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_HEORG_PARNT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_parntRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHealthOrganisationsProvider.GetBySearch(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_HEORG_DESCRIPTION index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_description"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHealthOrganisationsProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.HealthOrganisations"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHealthOrganisationsProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHealthOrganisationsProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHealthOrganisationsProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHealthOrganisationsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHealthOrganisationsProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHealthOrganisationsProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHealthOrganisationsProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHealthOrganisationsProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_heorgRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHealthOrganisationsProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.HealthOrganisations objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHealthOrganisationsProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.HealthOrganisations objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHealthOrganisationsProviderBase.GetByCasltRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_HEORG_CASLT key.
            	CNA_HEORG_CASLT Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_casltRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.HealthOrganisations objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHealthOrganisationsProviderBase.GetByHotypRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_HEORG_HOTYP key.
            	CNA_HEORG_HOTYP Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_hotypRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.HealthOrganisations objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHealthOrganisationsProviderBase.GetByDescription(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_HEORG_DESCRIPTION index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_description"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHealthOrganisationsProviderBase.GetByParntRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_HEORG_PARNT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_parntRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHealthOrganisationsProviderBase.GetByHeorgRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_HEALTH_ORGANISATIONS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_heorgRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.HealthOrganisations"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHealthOrganisationsProviderBase.GetByHotypRefnoLocalFlag(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_HEORG_HOTYP_LOCAL index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_hotypRefno"></param>
            <param name="_localFlag"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHealthOrganisationsProviderBase.GetByMainIdent(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_HEORG_MAIN_IDENT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_mainIdent"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHealthOrganisationsProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.HealthOrganisations})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.HealthOrganisations object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHealthOrganisationsProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.HealthOrganisations)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.HealthOrganisations object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.HealthOrganisations object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.HealthOrganisations object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHealthOrganisationsProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.HealthOrganisations)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.HealthOrganisations object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.HealthOrganisations object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarersProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ProfCarers"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarersProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarersProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarersProvider.GetByRoleIdentifierType(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource with the Carer Role Reference Value Dependancies linked to Reference Value with RITYP code.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_mainIdent"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarersProvider.GetBySpectRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource with the by the Specialty Refno linked via Prof_Carer_Specialties
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_spectRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarersProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ProfCarers"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarersProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarersProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarersProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarersProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarersProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarersProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarersProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarersProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_procaRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarersProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProfCarers objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarersProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProfCarers objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarersProviderBase.GetByCartpRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PROCA_CARTP key.
            	CNA_PROCA_CARTP Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_cartpRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProfCarers objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarersProviderBase.GetByGradeRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PROCA_GRADE key.
            	CNA_PROCA_GRADE Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_gradeRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProfCarers objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarersProviderBase.GetBySexxxRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PROCA_SEXXX key.
            	CNA_PROCA_SEXXX Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_sexxxRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProfCarers objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarersProviderBase.GetByTitleRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PROCA_TITLE key.
            	CNA_PROCA_TITLE Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_titleRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProfCarers objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarersProviderBase.GetBySurnameForenamePrtypRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_PROF_CARERS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_surname"></param>
            <param name="_forename"></param>
            <param name="_prtypRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarersProviderBase.GetByLocalFlag(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_PROCA_LOCAL index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_localFlag"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarersProviderBase.GetByMainIdent(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the NZ_PROCA_MAIN index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_mainIdent"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarersProviderBase.GetByUpperSurnameUpperForename(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_PROF_CARERS_UPPER index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_upperSurname"></param>
            <param name="_upperForename"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarersProviderBase.GetBySndexSurnameSndexForename(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_PROF_CARERS_SNDEX index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_sndexSurname"></param>
            <param name="_sndexForename"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarersProviderBase.GetByProcaRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_PROF_CARERS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_procaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ProfCarers"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarersProviderBase.GetByUpperSurnameLocalFlag(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CLU_PROCA_UPP_SURNAME_LOCAL index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_upperSurname"></param>
            <param name="_localFlag"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarersProviderBase.GetByPrtypRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the SAH_PROCA_PRTYP index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_prtypRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarersProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.ProfCarers})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.ProfCarers object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarersProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.ProfCarers)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.ProfCarers object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.ProfCarers object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.ProfCarers object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarersProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.ProfCarers)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.ProfCarers object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.ProfCarers object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSpecialtiesProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Specialties"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSpecialtiesProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSpecialtiesProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSpecialtiesProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Specialties"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSpecialtiesProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSpecialtiesProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSpecialtiesProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSpecialtiesProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSpecialtiesProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSpecialtiesProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSpecialtiesProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSpecialtiesProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_spectRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSpecialtiesProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Specialties objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSpecialtiesProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Specialties objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSpecialtiesProviderBase.GetByDivsnRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SPECT_DIVSN index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_divsnRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSpecialtiesProviderBase.GetByParntRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SPECT_PARNT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_parntRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSpecialtiesProviderBase.GetByMainIdent(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_SPECT_MAIN_IDENT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_mainIdent"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSpecialtiesProviderBase.GetBySpectRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_SPECIALTIES index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_spectRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Specialties"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSpecialtiesProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.Specialties})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.Specialties object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSpecialtiesProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.Specialties)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.Specialties object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.Specialties object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.Specialties object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSpecialtiesProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.Specialties)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.Specialties object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.Specialties object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleBedsProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Beds"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleBedsProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleBedsProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleBedsProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Beds"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleBedsProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleBedsProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleBedsProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleBedsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleBedsProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleBedsProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleBedsProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleBedsProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_bedssRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleBedsProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Beds objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleBedsProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Beds objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleBedsProviderBase.GetBySpectRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_BEDSS_SPECT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_spectRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleBedsProviderBase.GetByBedssRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_BEDS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_bedssRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Beds"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleBedsProviderBase.GetByCode(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_BEDSS_CODE index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_code"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleBedsProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.Beds})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.Beds object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleBedsProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.Beds)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.Beds object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.Beds object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.Beds object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleBedsProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.Beds)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.Beds object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.Beds object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferenceValueLinksProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueLinks"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferenceValueLinksProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferenceValueLinksProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferenceValueLinksProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueLinks"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferenceValueLinksProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferenceValueLinksProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferenceValueLinksProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferenceValueLinksProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferenceValueLinksProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferenceValueLinksProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferenceValueLinksProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferenceValueLinksProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_refliRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferenceValueLinksProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueLinks objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferenceValueLinksProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueLinks objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferenceValueLinksProviderBase.GetByFromRfvalRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_REFLI_FROM_RFVAL index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_fromRfvalRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferenceValueLinksProviderBase.GetByToRfvalRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_REFLI_TO_RFVAL index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_toRfvalRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferenceValueLinksProviderBase.GetByRefliRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_REFERENCE_VALUE_LINKS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_refliRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueLinks"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferenceValueLinksProviderBase.GetByFromRfvalRefnoToRfvalRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_REFLI_RFVAL_FROM_TO index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_fromRfvalRefno"></param>
            <param name="_toRfvalRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferenceValueLinksProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueLinks})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueLinks object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferenceValueLinksProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueLinks)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueLinks object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueLinks object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueLinks object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferenceValueLinksProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueLinks)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueLinks object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueLinks object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePersonalCarersProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.PersonalCarers"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePersonalCarersProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePersonalCarersProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePersonalCarersProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.PersonalCarers"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePersonalCarersProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePersonalCarersProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePersonalCarersProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePersonalCarersProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePersonalCarersProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePersonalCarersProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePersonalCarersProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePersonalCarersProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_percaRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePersonalCarersProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.PersonalCarers objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePersonalCarersProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.PersonalCarers objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePersonalCarersProviderBase.GetBySexxxRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PERCA_SEXXX key.
            	CNA_PERCA_SEXXX Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_sexxxRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.PersonalCarers objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePersonalCarersProviderBase.GetBySpoklRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PERCA_SPOKL key.
            	CNA_PERCA_SPOKL Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_spoklRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.PersonalCarers objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePersonalCarersProviderBase.GetByUpperSurnameUpperPrefrdForename(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_PERCA_PREFRD index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_upperSurname"></param>
            <param name="_upperPrefrdForename"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePersonalCarersProviderBase.GetBySndexSurnameSndexPrefrdForename(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_PERCA_PREFRD_SOUNDEX index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_sndexSurname"></param>
            <param name="_sndexPrefrdForename"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePersonalCarersProviderBase.GetByUpperSurnameUpperSecondForename(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_PERCA_SECOND index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_upperSurname"></param>
            <param name="_upperSecondForename"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePersonalCarersProviderBase.GetBySndexSurnameSndexSecondForename(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_PERCA_SECOND_SNDEX index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_sndexSurname"></param>
            <param name="_sndexSecondForename"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePersonalCarersProviderBase.GetByUpperSurnameUpperThirdForename(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_PERCA_THIRD index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_upperSurname"></param>
            <param name="_upperThirdForename"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePersonalCarersProviderBase.GetBySndexSurnameSndexThirdForename(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_PERCA_THIRD_SNDEX index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_sndexSurname"></param>
            <param name="_sndexThirdForename"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePersonalCarersProviderBase.GetByPercaRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_PERSONAL_CARERS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_percaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.PersonalCarers"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePersonalCarersProviderBase.GetByPatntRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PERCA_PATNT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_patntRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePersonalCarersProviderBase.GetBySurnameForename(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_PERSONAL_CARERS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_surname"></param>
            <param name="_forename"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePersonalCarersProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.PersonalCarers})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.PersonalCarers object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePersonalCarersProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.PersonalCarers)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.PersonalCarers object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.PersonalCarers object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.PersonalCarers object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePersonalCarersProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.PersonalCarers)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.PersonalCarers object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.PersonalCarers object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferenceValueIdsProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueIds"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferenceValueIdsProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferenceValueIdsProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferenceValueIdsProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueIds"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferenceValueIdsProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferenceValueIdsProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferenceValueIdsProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferenceValueIdsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferenceValueIdsProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferenceValueIdsProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferenceValueIdsProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferenceValueIdsProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_rfvliRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferenceValueIdsProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueIds objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferenceValueIdsProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueIds objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferenceValueIdsProviderBase.GetByIdentifierRfvalRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_REFERENCE_VALUE_IDS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_identifier"></param>
            <param name="_rfvalRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferenceValueIdsProviderBase.GetByRfvalRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_RFVLI_RFVAL index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_rfvalRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferenceValueIdsProviderBase.GetByRfvliRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_REFERENCE_VALUE_IDS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_rfvliRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueIds"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferenceValueIdsProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueIds})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueIds object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferenceValueIdsProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueIds)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueIds object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueIds object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueIds object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferenceValueIdsProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueIds)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueIds object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueIds object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientsProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Patients"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientsProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientsProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientsProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Patients"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientsProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientsProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientsProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientsProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientsProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientsProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientsProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_patntRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientsProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Patients objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientsProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Patients objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientsProviderBase.GetByApdthRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PATNT_APDTH key.
            	CNA_PATNT_APDTH Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_apdthRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Patients objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientsProviderBase.GetByBloodRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PATNT_BLOOD key.
            	CNA_PATNT_BLOOD Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_bloodRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Patients objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientsProviderBase.GetByCasltRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PATNT_CASLT key.
            	CNA_PATNT_CASLT Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_casltRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Patients objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientsProviderBase.GetByCntstRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PATNT_CNTST key.
            	CNA_PATNT_CNTST Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_cntstRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Patients objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientsProviderBase.GetByEthgrRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PATNT_ETHGR key.
            	CNA_PATNT_ETHGR Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_ethgrRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Patients objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientsProviderBase.GetByMarryRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PATNT_MARRY key.
            	CNA_PATNT_MARRY Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_marryRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Patients objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientsProviderBase.GetByMultbRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PATNT_MULTB key.
            	CNA_PATNT_MULTB Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_multbRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Patients objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientsProviderBase.GetByOccupRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PATNT_OCCUP key.
            	CNA_PATNT_OCCUP Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_occupRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Patients objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientsProviderBase.GetByRebesRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PATNT_REBES key.
            	CNA_PATNT_REBES Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_rebesRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Patients objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientsProviderBase.GetByReligRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PATNT_RELIG key.
            	CNA_PATNT_RELIG Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_religRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Patients objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientsProviderBase.GetBySexxxRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PATNT_SEXXX key.
            	CNA_PATNT_SEXXX Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_sexxxRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Patients objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientsProviderBase.GetBySpoklRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PATNT_SPOKL key.
            	CNA_PATNT_SPOKL Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_spoklRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Patients objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientsProviderBase.GetByTitleRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PATNT_TITLE key.
            	CNA_PATNT_TITLE Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_titleRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Patients objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientsProviderBase.GetBySndexForenameSndexSurname(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_PATNT_SNDEX index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_sndexForename"></param>
            <param name="_sndexSurname"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientsProviderBase.GetByPasid(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the UK_PATNT_PASID index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_pasid"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientsProviderBase.GetByPrivateIdentifier(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the UK_PATNT_PRIVATE_ID index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_privateIdentifier"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientsProviderBase.GetBySndexSurnameSndexPrefrdForename(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_PATNT_PREFRD_SOUNDEX index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_sndexSurname"></param>
            <param name="_sndexPrefrdForename"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientsProviderBase.GetBySndexSurnameSndexThirdForename(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_PATNT_THIRD_SNDEX index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_sndexSurname"></param>
            <param name="_sndexThirdForename"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientsProviderBase.GetByUpperSurnameUpperPrefrdForename(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_PATNT_PREFRD index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_upperSurname"></param>
            <param name="_upperPrefrdForename"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientsProviderBase.GetByUpperSurnameUpperSecondForename(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_PATNT_SECOND index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_upperSurname"></param>
            <param name="_upperSecondForename"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientsProviderBase.GetBySndexSurnameSndexSecondForename(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_PATNT_SECOND_SNDEX index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_sndexSurname"></param>
            <param name="_sndexSecondForename"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientsProviderBase.GetByUpperSurnameUpperThirdForename(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_PATNT_THIRD index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_upperSurname"></param>
            <param name="_upperThirdForename"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientsProviderBase.GetByPatntRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_PATIENTS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_patntRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Patients"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientsProviderBase.GetBySearchSurname(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_PATNT_SEARCH_SURNAME index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_searchSurname"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientsProviderBase.GetByCntryRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PATNT_CNTRY index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_cntryRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientsProviderBase.GetByUpperSurnameUpperForename(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_PATNT_UPPER index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_upperSurname"></param>
            <param name="_upperForename"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientsProviderBase.GetByDecsdFlag(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_PATNT_DECSD index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_decsdFlag"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientsProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.Patients})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.Patients object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientsProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.Patients)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.Patients object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.Patients object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.Patients object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientsProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.Patients)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.Patients object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.Patients object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointsProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ServicePoints"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointsProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointsProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointsProvider.GetByHeorgRefnoSptypRefnoHitypCode(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the SERVICE_POINTS_INDEX1 index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_heorgRefno"></param>
            <param name="_sptypRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointsProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ServicePoints"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointsProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointsProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointsProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointsProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointsProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointsProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointsProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_spontRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointsProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ServicePoints objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointsProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ServicePoints objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointsProviderBase.GetByPurpsRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_SPONT_PURPS key.
            	CNA_SPONT_PURPS Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_purpsRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ServicePoints objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointsProviderBase.GetBySptypRefnoHeorgRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the SERVICE_POINTS_INDEX1 index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_sptypRefno"></param>
            <param name="_heorgRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointsProviderBase.GetBySteamRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SPONT_STEAM index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_steamRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointsProviderBase.GetBySpontRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_SERVICE_POINTS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_spontRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ServicePoints"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointsProviderBase.GetByName(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_SPONT_NAME index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_name"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointsProviderBase.GetBySptypRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SPONT_SPTYP index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_sptypRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointsProviderBase.GetByProcaRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SPONT_PROCA index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_procaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointsProviderBase.GetBySpectRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SPONT_SPECT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_spectRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointsProviderBase.GetByHeorgRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SPONT_HEORG index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_heorgRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointsProviderBase.GetByCodeSptypRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_SPONT_CODE index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_code"></param>
            <param name="_sptypRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointsProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.ServicePoints})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.ServicePoints object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointsProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.ServicePoints)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.ServicePoints object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.ServicePoints object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.ServicePoints object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointsProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.ServicePoints)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.ServicePoints object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.ServicePoints object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleUsersProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Users"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleUsersProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleUsersProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleUsersProvider.AuthenticateGroupRight(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets user rows from the DataSource for the given User and Rights Group Code.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Users objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleUsersProvider.GetBySearch(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the UK_USERS_CODE index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_code"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleUsersProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Users"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleUsersProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleUsersProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleUsersProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleUsersProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleUsersProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleUsersProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleUsersProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleUsersProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_usersRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleUsersProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Users objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleUsersProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Users objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleUsersProviderBase.GetByProcaRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_USERS_PROCA index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_procaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleUsersProviderBase.GetByUsersRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_USERS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_usersRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Users"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleUsersProviderBase.GetByAclevRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the UK_ACLEV index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_aclevRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleUsersProviderBase.GetByCode(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the UK_USERS_CODE index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_code"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleUsersProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.Users})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.Users object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleUsersProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.Users)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.Users object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.Users object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.Users object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleUsersProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.Users)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.Users object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.Users object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleStaffTeamsProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.StaffTeams"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleStaffTeamsProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleStaffTeamsProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleStaffTeamsProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.StaffTeams"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleStaffTeamsProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleStaffTeamsProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleStaffTeamsProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleStaffTeamsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleStaffTeamsProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleStaffTeamsProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleStaffTeamsProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleStaffTeamsProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_steamRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleStaffTeamsProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.StaffTeams objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleStaffTeamsProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.StaffTeams objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleStaffTeamsProviderBase.GetByLeadrProcaRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_STEAM_LEADR_PROCA index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_leadrProcaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleStaffTeamsProviderBase.GetBySteamRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_STAFF_TEAMS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_steamRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.StaffTeams"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleStaffTeamsProviderBase.GetByHeorgRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_STEAM_HEORG index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_heorgRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleStaffTeamsProviderBase.GetBySpectRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_STEAM_SPECT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_spectRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleStaffTeamsProviderBase.GetByCode(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IDX_STEAM_CODE index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_code"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleStaffTeamsProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.StaffTeams})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.StaffTeams object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleStaffTeamsProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.StaffTeams)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.StaffTeams object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.StaffTeams object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.StaffTeams object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleStaffTeamsProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.StaffTeams)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.StaffTeams object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.StaffTeams object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferralsProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Referrals"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferralsProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferralsProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferralsProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Referrals"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferralsProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferralsProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferralsProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferralsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferralsProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferralsProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferralsProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferralsProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_refrlRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferralsProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Referrals objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferralsProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Referrals objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferralsProviderBase.GetByAustsRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_REFRL_AUSTS key.
            	CNA_REFRL_AUSTS Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_austsRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Referrals objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferralsProviderBase.GetByCanrsRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_REFRL_CANRS key.
            	CNA_REFRL_CANRS Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_canrsRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Referrals objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferralsProviderBase.GetByCstatRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_REFRL_CSTAT key.
            	CNA_REFRL_CSTAT Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_cstatRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Referrals objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferralsProviderBase.GetByPrityRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_REFRL_PRITY key.
            	CNA_REFRL_PRITY Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_prityRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Referrals objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferralsProviderBase.GetByReasnRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_REFRL_REASN key.
            	CNA_REFRL_REASN Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_reasnRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Referrals objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferralsProviderBase.GetByRfocmRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_REFRL_RFOCM key.
            	CNA_REFRL_RFOCM Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_rfocmRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Referrals objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferralsProviderBase.GetByRjectRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_REFRL_RJECT key.
            	CNA_REFRL_RJECT Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_rjectRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Referrals objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferralsProviderBase.GetByRqurgRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_REFRL_RQURG key.
            	CNA_REFRL_RQURG Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_rqurgRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Referrals objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferralsProviderBase.GetByRstatRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_REFRL_RSTAT key.
            	CNA_REFRL_RSTAT Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_rstatRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Referrals objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferralsProviderBase.GetBySorrfRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_REFRL_SORRF key.
            	CNA_REFRL_SORRF Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_sorrfRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Referrals objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferralsProviderBase.GetBySusrsRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_REFRL_SUSRS key.
            	CNA_REFRL_SUSRS Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_susrsRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Referrals objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferralsProviderBase.GetByUrgncRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_REFRL_URGNC key.
            	CNA_REFRL_URGNC Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_urgncRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Referrals objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferralsProviderBase.GetByReftoHeorgRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_REFRL_REFTO_HEORG index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_reftoHeorgRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferralsProviderBase.GetByRefbyProcaRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_REFRL_REFBY_PROCA index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_refbyProcaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferralsProviderBase.GetByReftoSpectRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_REFRL_REFTO_SPECT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_reftoSpectRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferralsProviderBase.GetByPocarRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_REFRL_POCAR index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_pocarRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferralsProviderBase.GetByRespSpectRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_REFRL_RESP_SPECT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_respSpectRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferralsProviderBase.GetByRefrlRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_REFERRALS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_refrlRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Referrals"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferralsProviderBase.GetByRetypRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the REFERRALS_RETYP index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_retypRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferralsProviderBase.GetByAccrlRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the SAH_ACCRL_REFERRAL index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_accrlRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferralsProviderBase.GetByAuthrSpectRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_REFRL_AUTHR_SPECT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_authrSpectRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferralsProviderBase.GetByProvdRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_REFRL_PROVD index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_provdRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferralsProviderBase.GetByRespProcaRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_REFRL_RESP_PROCA index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_respProcaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferralsProviderBase.GetByPatntRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_REFRL_PATNT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_patntRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferralsProviderBase.GetByReftoProcaRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_REFRL_REFTO_PROCA index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_reftoProcaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferralsProviderBase.GetByRefbySpectRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_REFRL_REFBY_SPECT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_refbySpectRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferralsProviderBase.GetByContrRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_REFRL_CONTR index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_contrRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferralsProviderBase.GetByPurchRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_REFRL_PURCH index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_purchRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferralsProviderBase.GetByPriorRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_REFRL_PRIOR index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_priorRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferralsProviderBase.GetByRefbyHeorgRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_REFRL_REFBY_HEORG index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_refbyHeorgRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferralsProviderBase.GetByAuthrProcaRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_REFRL_AUTHR_PROCA index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_authrProcaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferralsProviderBase.GetByAuthrHeorgRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_REFRL_AUTHR_HEORG index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_authrHeorgRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferralsProviderBase.GetByRespHeorgRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_REFRL_RESP_HEORG index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_respHeorgRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferralsProviderBase.GetByParntRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_REFRL_PARNT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_parntRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferralsProviderBase.GetByReftoSteamRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_REFRL_REFTO_STEAM index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_reftoSteamRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferralsProviderBase.GetByAuthrSteamRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_REFRL_AUTHR_STEAM index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_authrSteamRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferralsProviderBase.GetByRefbySteamRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_REFRL_REFBY_STEAM index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_refbySteamRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferralsProviderBase.GetByRespSteamRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_REFRL_RESP_STEAM index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_respSteamRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferralsProviderBase.GetByReftoWardSpontRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_REFRL_REFTO_WARD_SPONT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_reftoWardSpontRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferralsProviderBase.GetByReftoClinicSpontRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_REFRL_REFTO_CLINIC_SPONT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_reftoClinicSpontRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferralsProviderBase.GetByAuthrRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_REFRL_AUTHR index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_authrRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferralsProviderBase.GetByMhcepRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_REFRL_MHCEP index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_mhcepRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferralsProviderBase.GetByCtrsvRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_REFRL_CTRSV index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_ctrsvRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferralsProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.Referrals})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.Referrals object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferralsProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.Referrals)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.Referrals object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.Referrals object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.Referrals object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferralsProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.Referrals)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.Referrals object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.Referrals object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointSessionsProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ServicePointSessions"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointSessionsProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointSessionsProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointSessionsProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ServicePointSessions"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointSessionsProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointSessionsProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointSessionsProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointSessionsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointSessionsProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointSessionsProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointSessionsProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointSessionsProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_spssnRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointSessionsProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ServicePointSessions objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointSessionsProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ServicePointSessions objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointSessionsProviderBase.GetByDayowRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_SPSSN_DAYOW key.
            	CNA_SPSSN_DAYOW Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_dayowRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ServicePointSessions objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointSessionsProviderBase.GetByFreofRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_SPSSN_FREOF key.
            	CNA_SPSSN_FREOF Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_freofRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ServicePointSessions objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointSessionsProviderBase.GetByFreof2Refno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_SPSSN_FREOF2 key.
            	CNA_SPSSN_FREOF2 Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_freof2Refno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ServicePointSessions objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointSessionsProviderBase.GetByFreof3Refno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_SPSSN_FREOF3 key.
            	CNA_SPSSN_FREOF3 Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_freof3Refno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ServicePointSessions objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointSessionsProviderBase.GetByFreof4Refno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_SPSSN_FREOF4 key.
            	CNA_SPSSN_FREOF4 Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_freof4Refno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ServicePointSessions objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointSessionsProviderBase.GetByFreqnRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_SPSSN_FREQN key.
            	CNA_SPSSN_FREQN Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_freqnRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ServicePointSessions objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointSessionsProviderBase.GetByPurpsRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_SPSSN_PURPS key.
            	CNA_SPSSN_PURPS Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_purpsRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ServicePointSessions objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointSessionsProviderBase.GetBySschrRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_SPSSN_SSCHR key.
            	CNA_SPSSN_SSCHR Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_sschrRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ServicePointSessions objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointSessionsProviderBase.GetBySsensRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_SPSSN_SSENS key.
            	CNA_SPSSN_SSENS Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_ssensRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ServicePointSessions objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointSessionsProviderBase.GetBySsersRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_SPSSN_SSERS key.
            	CNA_SPSSN_SSERS Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_ssersRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ServicePointSessions objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointSessionsProviderBase.GetBySssrsRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_SPSSN_SSSRS key.
            	CNA_SPSSN_SSSRS Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_sssrsRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ServicePointSessions objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointSessionsProviderBase.GetBySsstsRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_SPSSN_SSSTS key.
            	CNA_SPSSN_SSSTS Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_ssstsRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ServicePointSessions objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointSessionsProviderBase.GetBySstatRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_SPSSN_SSTAT key.
            	CNA_SPSSN_SSTAT Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_sstatRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ServicePointSessions objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointSessionsProviderBase.GetByStcrbRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_SPSSN_STCRB key.
            	CNA_SPSSN_STCRB Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_stcrbRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ServicePointSessions objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointSessionsProviderBase.GetByTemplateFlagDirtyFlag(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the SAH_SPSSN_TMPLT_DIRTY index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_templateFlag"></param>
            <param name="_dirtyFlag"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointSessionsProviderBase.GetByActualProcaRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SPSSN_ACTUAL_PROCA index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_actualProcaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointSessionsProviderBase.GetByCode(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_SPSSN_CODE index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_code"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointSessionsProviderBase.GetBySpontRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SPSSN_SPONT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_spontRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointSessionsProviderBase.GetByTmpltRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SPSSN_TMPLT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_tmpltRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointSessionsProviderBase.GetByTmpltRefnoSpssnRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SPSSN_TMPLT_SPSSN index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_tmpltRefno"></param>
            <param name="_spssnRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointSessionsProviderBase.GetBySpectRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SPSSN_SPECT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_spectRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointSessionsProviderBase.GetByHeorgRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SPSSN_HEORG index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_heorgRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointSessionsProviderBase.GetByProcaRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SPSSN_PROCA index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_procaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointSessionsProviderBase.GetBySteamRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SPSSN_STEAM index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_steamRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointSessionsProviderBase.GetBySpssnRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_SERVICE_POINT_SESSIONS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_spssnRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ServicePointSessions"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointSessionsProviderBase.GetByArchvFlag(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_SPSSN_ARCH index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_archvFlag"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointSessionsProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.ServicePointSessions})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.ServicePointSessions object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointSessionsProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.ServicePointSessions)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.ServicePointSessions object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.ServicePointSessions object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.ServicePointSessions object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointSessionsProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.ServicePointSessions)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.ServicePointSessions object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.ServicePointSessions object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointBedsProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ServicePointBeds"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointBedsProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointBedsProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointBedsProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ServicePointBeds"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointBedsProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointBedsProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointBedsProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointBedsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointBedsProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointBedsProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointBedsProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointBedsProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_spbedRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointBedsProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ServicePointBeds objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointBedsProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ServicePointBeds objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointBedsProviderBase.GetByBedssRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SPBED_BEDSS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_bedssRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointBedsProviderBase.GetByWdproRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SPBED_WDPRO index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_wdproRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointBedsProviderBase.GetBySpontRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SPBED_SPONT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_spontRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointBedsProviderBase.GetBySpbedRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_SERVICE_POINT_BEDS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_spbedRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ServicePointBeds"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointBedsProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.ServicePointBeds})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.ServicePointBeds object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointBedsProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.ServicePointBeds)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.ServicePointBeds object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.ServicePointBeds object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.ServicePointBeds object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointBedsProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.ServicePointBeds)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.ServicePointBeds object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.ServicePointBeds object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleBedStaysProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.BedStays"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleBedStaysProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleBedStaysProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleBedStaysProvider.GetBySpontRefnoOnDttm(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.DateTime,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the HSS_BEDST_START index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_startDttm"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleBedStaysProvider.GetBySpbedRefnoAfterDttm(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.DateTime,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_startDttm"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleBedStaysProvider.GetBedHistory(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Decimal,System.Int32,System.Int32)">
            <summary>
            This method wraps the 'GetBedHistory' stored procedure. 
            </summary>	
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object.</param>
            <remark></remark>
            <returns>A <see cref="T:System.Data.IDataReader"/> instance.</returns>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleBedStaysProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.BedStays"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleBedStaysProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleBedStaysProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleBedStaysProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleBedStaysProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleBedStaysProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleBedStaysProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleBedStaysProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleBedStaysProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_bedstRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleBedStaysProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.BedStays objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleBedStaysProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.BedStays objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleBedStaysProviderBase.GetByPatntRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_BEDST_PATNT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_patntRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleBedStaysProviderBase.GetByPercaRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_BEDST_PERCA index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_percaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleBedStaysProviderBase.GetBySstayRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_BEDST_SSTAY index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_sstayRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleBedStaysProviderBase.GetBySpbedRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_BEDST_SPBED index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_spbedRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleBedStaysProviderBase.GetByBedstRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_BED_STAYS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_bedstRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.BedStays"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleBedStaysProviderBase.GetByPriorPointer(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_PRIOR_POINTER index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_priorPointer"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleBedStaysProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.BedStays})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.BedStays object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleBedStaysProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.BedStays)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.BedStays object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.BedStays object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.BedStays object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleBedStaysProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.BedStays)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.BedStays object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.BedStays object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleWaitingListEntriesProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.WaitingListEntries"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleWaitingListEntriesProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleWaitingListEntriesProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleWaitingListEntriesProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.WaitingListEntries"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleWaitingListEntriesProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleWaitingListEntriesProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleWaitingListEntriesProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleWaitingListEntriesProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleWaitingListEntriesProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleWaitingListEntriesProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleWaitingListEntriesProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleWaitingListEntriesProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_wlistRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleWaitingListEntriesProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.WaitingListEntries objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleWaitingListEntriesProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.WaitingListEntries objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleWaitingListEntriesProviderBase.GetByAdcatRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_WLIST_ADCAT key.
            	CNA_WLIST_ADCAT Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_adcatRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.WaitingListEntries objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleWaitingListEntriesProviderBase.GetByClptyRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_WLIST_CLPTY key.
            	CNA_WLIST_CLPTY Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_clptyRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.WaitingListEntries objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleWaitingListEntriesProviderBase.GetByCstatRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_WLIST_CSTAT key.
            	CNA_WLIST_CSTAT Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_cstatRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.WaitingListEntries objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleWaitingListEntriesProviderBase.GetByDayowRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_WLIST_DAYOW key.
            	CNA_WLIST_DAYOW Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_dayowRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.WaitingListEntries objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleWaitingListEntriesProviderBase.GetByInmgtRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_WLIST_INMGT key.
            	CNA_WLIST_INMGT Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_inmgtRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.WaitingListEntries objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleWaitingListEntriesProviderBase.GetByPrityRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_WLIST_PRITY key.
            	CNA_WLIST_PRITY Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_prityRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.WaitingListEntries objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleWaitingListEntriesProviderBase.GetByRemvlRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_WLIST_REMVL key.
            	CNA_WLIST_REMVL Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_remvlRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.WaitingListEntries objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleWaitingListEntriesProviderBase.GetBySvtypRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_WLIST_SVTYP key.
            	CNA_WLIST_SVTYP Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_svtypRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.WaitingListEntries objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleWaitingListEntriesProviderBase.GetByTransRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_WLIST_TRANS key.
            	CNA_WLIST_TRANS Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_transRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.WaitingListEntries objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleWaitingListEntriesProviderBase.GetByUrgncRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_WLIST_URGNC key.
            	CNA_WLIST_URGNC Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_urgncRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.WaitingListEntries objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleWaitingListEntriesProviderBase.GetByWhocoRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_WLIST_WHOCO key.
            	CNA_WLIST_WHOCO Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_whocoRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.WaitingListEntries objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleWaitingListEntriesProviderBase.GetByPatntRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_WLIST_PATNT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_patntRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleWaitingListEntriesProviderBase.GetByAdmdcRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_WLIST_ADMDC index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_admdcRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleWaitingListEntriesProviderBase.GetByRefrlRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_WLIST_REFRL index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_refrlRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleWaitingListEntriesProviderBase.GetByWlrulRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_WLIST_WLRUL index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_wlrulRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleWaitingListEntriesProviderBase.GetByWlistRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_WAITING_LIST_ENTRIES index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_wlistRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.WaitingListEntries"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleWaitingListEntriesProviderBase.GetByPrityRefnoWlistRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_WLIST_PRITY_WLIST index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_prityRefno"></param>
            <param name="_wlistRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleWaitingListEntriesProviderBase.GetByBktypRefnoStageRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the SAH_WLE_BKTYP_STAGE index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_bktypRefno"></param>
            <param name="_stageRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleWaitingListEntriesProviderBase.GetByLocalWlrulRefnoPrityRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the SAH_WLE_LCAT_PRITY index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_localWlrulRefno"></param>
            <param name="_prityRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleWaitingListEntriesProviderBase.GetByProcaRefnoSpectRefnoPrityRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the SAH_WLIST_PROCA_SPECT_PRITY index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_procaRefno"></param>
            <param name="_spectRefno"></param>
            <param name="_prityRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleWaitingListEntriesProviderBase.GetBySpectRefnoPrityRefnoSvtypRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the SAH_WLIST_SPECT_PRITY index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_spectRefno"></param>
            <param name="_prityRefno"></param>
            <param name="_svtypRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleWaitingListEntriesProviderBase.GetByProcaRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_WLIST_PROCA index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_procaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleWaitingListEntriesProviderBase.GetByHeorgRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_WLIST_HEORG index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_heorgRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleWaitingListEntriesProviderBase.GetByPriorRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_WLIST_PRIOR index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_priorRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleWaitingListEntriesProviderBase.GetBySpontRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_WLIST_SPONT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_spontRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleWaitingListEntriesProviderBase.GetByContrRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_WLIST_CONTR index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_contrRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleWaitingListEntriesProviderBase.GetByPurchRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_WLIST_PURCH index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_purchRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleWaitingListEntriesProviderBase.GetByLocalWlrulRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_WLIST_LOCAL_WLRUL index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_localWlrulRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleWaitingListEntriesProviderBase.GetByXferSpontRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_WLIST_XFER_SPONT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_xferSpontRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleWaitingListEntriesProviderBase.GetByProvdRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_WLIST_PROVD index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_provdRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleWaitingListEntriesProviderBase.GetByProcaRefnoSpectRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_WAITING_LIST_ENTRIES index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_procaRefno"></param>
            <param name="_spectRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleWaitingListEntriesProviderBase.GetBySpectRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_WLIST_SPECT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_spectRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleWaitingListEntriesProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.WaitingListEntries})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.WaitingListEntries object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleWaitingListEntriesProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.WaitingListEntries)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.WaitingListEntries object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.WaitingListEntries object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.WaitingListEntries object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleWaitingListEntriesProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.WaitingListEntries)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.WaitingListEntries object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.WaitingListEntries object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAdmissionOffersProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.AdmissionOffers"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAdmissionOffersProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAdmissionOffersProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAdmissionOffersProvider.GetTciBetween(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.DateTime,System.DateTime,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource with TCI with TCI date between a given Date Range.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_tciDttm"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAdmissionOffersProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.AdmissionOffers"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAdmissionOffersProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAdmissionOffersProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAdmissionOffersProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAdmissionOffersProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAdmissionOffersProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAdmissionOffersProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAdmissionOffersProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAdmissionOffersProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_admofRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAdmissionOffersProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.AdmissionOffers objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAdmissionOffersProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.AdmissionOffers objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAdmissionOffersProviderBase.GetByConfmRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_ADMOF_CONFM key.
            	CNA_ADMOF_CONFM Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_confmRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.AdmissionOffers objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAdmissionOffersProviderBase.GetByDeferRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_ADMOF_DEFER key.
            	CNA_ADMOF_DEFER Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_deferRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.AdmissionOffers objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAdmissionOffersProviderBase.GetByOfocmRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_ADMOF_OFOCM index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_ofocmRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAdmissionOffersProviderBase.GetBySpbedRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ADMOF_SPBED index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_spbedRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAdmissionOffersProviderBase.GetByXferSpontRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ADMOF_XFER_SPONT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_xferSpontRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAdmissionOffersProviderBase.GetByAdmofRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_ADMISSION_OFFERS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_admofRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.AdmissionOffers"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAdmissionOffersProviderBase.GetByWlistRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ADMOF_WLIST index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_wlistRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAdmissionOffersProviderBase.GetBySpontRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ADMOF_SPONT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_spontRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAdmissionOffersProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.AdmissionOffers})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.AdmissionOffers object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAdmissionOffersProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.AdmissionOffers)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.AdmissionOffers object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.AdmissionOffers object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.AdmissionOffers object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAdmissionOffersProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.AdmissionOffers)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.AdmissionOffers object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.AdmissionOffers object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferenceValueDependanciesProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueDependancies"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferenceValueDependanciesProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferenceValueDependanciesProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferenceValueDependanciesProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueDependancies"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferenceValueDependanciesProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferenceValueDependanciesProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferenceValueDependanciesProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferenceValueDependanciesProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferenceValueDependanciesProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferenceValueDependanciesProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferenceValueDependanciesProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferenceValueDependanciesProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_rfvldRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferenceValueDependanciesProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueDependancies objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferenceValueDependanciesProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueDependancies objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferenceValueDependanciesProviderBase.GetBySorceCodeRfvalRefnoSorceRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Decimal,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the SAH_SRCE_CODE index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_sorceCode"></param>
            <param name="_rfvalRefno"></param>
            <param name="_sorceRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferenceValueDependanciesProviderBase.GetByRfvalRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_RFVLD_RFVAL index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_rfvalRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferenceValueDependanciesProviderBase.GetByRfvldRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_RFVLD index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_rfvldRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueDependancies"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferenceValueDependanciesProviderBase.GetBySorceRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_RFVLD_SORCE_REFNO index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_sorceRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferenceValueDependanciesProviderBase.GetBySorceCodeSorceRefnoRfvalRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Nullable{System.Decimal},System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the SAH_SRCE_CODE2 index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_sorceCode"></param>
            <param name="_sorceRefno"></param>
            <param name="_rfvalRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferenceValueDependanciesProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueDependancies})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueDependancies object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferenceValueDependanciesProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueDependancies)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueDependancies object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueDependancies object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueDependancies object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleReferenceValueDependanciesProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueDependancies)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueDependancies object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueDependancies object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAeAttendancesProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.AeAttendances"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAeAttendancesProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAeAttendancesProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAeAttendancesProvider.GetCurrent(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All current Emergency Attendances rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.AeAttendances objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAeAttendancesProvider.GetWithinTimeFrame(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.DateTime,System.DateTime,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets all current and departed or expected AE_ATTENDANCES within the given timeframe.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.AeAttendances objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAeAttendancesProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.AeAttendances"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAeAttendancesProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAeAttendancesProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAeAttendancesProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAeAttendancesProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAeAttendancesProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAeAttendancesProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAeAttendancesProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAeAttendancesProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_aeattRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAeAttendancesProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.AeAttendances objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAeAttendancesProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.AeAttendances objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAeAttendancesProviderBase.GetByAetraRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_AEATT_AETRA index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_aetraRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAeAttendancesProviderBase.GetBySchoolHeorgRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_AEATT_SCHOOL_HEORG index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_schoolHeorgRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAeAttendancesProviderBase.GetByPatpropRemoveProcaRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_AEATT_PATPROP_REMOVE_PROCA index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_patpropRemoveProcaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAeAttendancesProviderBase.GetByPatpropRemoveUsersRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_AEATT_PATPROP_REMOVE_USERS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_patpropRemoveUsersRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAeAttendancesProviderBase.GetByPatpropReturnProcaRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_AEATT_PATPROP_RETURN_PROCA index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_patpropReturnProcaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAeAttendancesProviderBase.GetByPatpropReturnUsersRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_AEATT_PATPROP_RETURN_USERS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_patpropReturnUsersRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAeAttendancesProviderBase.GetByPrvspRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_AEATT_PRVSP index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_prvspRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAeAttendancesProviderBase.GetByProvdRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_AEATT_PROVD index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_provdRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAeAttendancesProviderBase.GetByRefrlRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_AEATT_REFRL index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_refrlRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAeAttendancesProviderBase.GetBySpontRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_AEATT_SPONT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_spontRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAeAttendancesProviderBase.GetByPatntRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_AEATT_PATNT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_patntRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAeAttendancesProviderBase.GetByHeorgRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_AEATT_HEORG index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_heorgRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAeAttendancesProviderBase.GetByContrRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_AEATT_CONTR index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_contrRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAeAttendancesProviderBase.GetByPurchRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_AEATT_PURCH index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_purchRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAeAttendancesProviderBase.GetByPrevAeattRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_AEATT_PREV_AEATT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_prevAeattRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAeAttendancesProviderBase.GetByDischProcaRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_AEATT_DISCH_PROCA index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_dischProcaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAeAttendancesProviderBase.GetByRtadtRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_AEATT_RTADT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_rtadtRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAeAttendancesProviderBase.GetByAeattRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_AE_ATTENDANCES index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_aeattRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.AeAttendances"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAeAttendancesProviderBase.GetByIdentifier(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the SAH_AEATT_IDENT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_identifier"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAeAttendancesProviderBase.GetByExpectedFlag(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the SAH_AE_EXPECTED index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_expectedFlag"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAeAttendancesProviderBase.GetByRespProcaRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_AEATT_RESP_PROCA index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_respProcaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAeAttendancesProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.AeAttendances})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.AeAttendances object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAeAttendancesProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.AeAttendances)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.AeAttendances object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.AeAttendances object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.AeAttendances object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAeAttendancesProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.AeAttendances)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.AeAttendances object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.AeAttendances object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSchedulesProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Schedules"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSchedulesProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSchedulesProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSchedulesProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Schedules"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSchedulesProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSchedulesProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSchedulesProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSchedulesProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSchedulesProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSchedulesProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSchedulesProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSchedulesProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_schdlRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSchedulesProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Schedules objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSchedulesProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Schedules objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSchedulesProviderBase.GetByAdcatRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_SCHDL_ADCAT key.
            	CNA_SCHDL_ADCAT Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_adcatRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Schedules objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSchedulesProviderBase.GetByCccccRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_SCHDL_CCCCC key.
            	CNA_SCHDL_CCCCC Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_cccccRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Schedules objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSchedulesProviderBase.GetByContpRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_SCHDL_CONTP key.
            	CNA_SCHDL_CONTP Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_contpRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Schedules objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSchedulesProviderBase.GetByContyRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_SCHDL_CONTY key.
            	CNA_SCHDL_CONTY Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_contyRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Schedules objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSchedulesProviderBase.GetByCstatRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_SCHDL_CSTAT key.
            	CNA_SCHDL_CSTAT Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_cstatRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Schedules objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSchedulesProviderBase.GetByDnarsRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_SCHDL_DNARS key.
            	CNA_SCHDL_DNARS Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_dnarsRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Schedules objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSchedulesProviderBase.GetByLotypRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_SCHDL_LOTYP key.
            	CNA_SCHDL_LOTYP Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_lotypRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Schedules objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSchedulesProviderBase.GetByMovrnRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_SCHDL_MOVRN key.
            	CNA_SCHDL_MOVRN Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_movrnRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Schedules objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSchedulesProviderBase.GetByMurqbRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_SCHDL_MURQB key.
            	CNA_SCHDL_MURQB Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_murqbRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Schedules objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSchedulesProviderBase.GetByPrityRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_SCHDL_PRITY key.
            	CNA_SCHDL_PRITY Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_prityRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Schedules objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSchedulesProviderBase.GetByReasnRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_SCHDL_REASN key.
            	CNA_SCHDL_REASN Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_reasnRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Schedules objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSchedulesProviderBase.GetByResutRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_SCHDL_RESUT key.
            	CNA_SCHDL_RESUT Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_resutRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Schedules objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSchedulesProviderBase.GetBySatypRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_SCHDL_SATYP key.
            	CNA_SCHDL_SATYP Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_satypRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Schedules objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSchedulesProviderBase.GetByScocmRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_SCHDL_SCOCM key.
            	CNA_SCHDL_SCOCM Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_scocmRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Schedules objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSchedulesProviderBase.GetByScsdaRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_SCHDL_SCSDA key.
            	CNA_SCHDL_SCSDA Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_scsdaRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Schedules objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSchedulesProviderBase.GetBySctypRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_SCHDL_SCTYP key.
            	CNA_SCHDL_SCTYP Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_sctypRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Schedules objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSchedulesProviderBase.GetByTransRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_SCHDL_TRANS key.
            	CNA_SCHDL_TRANS Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_transRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Schedules objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSchedulesProviderBase.GetByUrgncRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_SCHDL_URGNC key.
            	CNA_SCHDL_URGNC Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_urgncRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Schedules objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSchedulesProviderBase.GetByVisitRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_SCHDL_VISIT key.
            	CNA_SCHDL_VISIT Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_visitRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Schedules objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSchedulesProviderBase.GetByPatntRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SCHDL_PATNT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_patntRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSchedulesProviderBase.GetByWlistRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SCHDL_WLIST index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_wlistRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSchedulesProviderBase.GetBySstayRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SCHDL_SSTAY index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_sstayRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSchedulesProviderBase.GetBySstaySpontRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SCHDL_SSTAY_SPONT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_sstaySpontRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSchedulesProviderBase.GetBySpectRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SCHDL_SPECT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_spectRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSchedulesProviderBase.GetBySorceRefnoSorceCode(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SCHDL_SREFNO_SCODE index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_sorceRefno"></param>
            <param name="_sorceCode"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSchedulesProviderBase.GetByLinkRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SCHDL_LINK index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_linkRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSchedulesProviderBase.GetByPacacRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SCHDL_PACAC index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_pacacRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSchedulesProviderBase.GetByPaassRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SCHDL_PAASS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_paassRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSchedulesProviderBase.GetByCtrsvRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SCHDL_CTRSV index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_ctrsvRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSchedulesProviderBase.GetByAdmofRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SCHDL_ADMOF index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_admofRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSchedulesProviderBase.GetByAnaesProcaRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SCHDL_ANAES_PROCA index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_anaesProcaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSchedulesProviderBase.GetByScrcrRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SCHDL_SCRCR index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_scrcrRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSchedulesProviderBase.GetByContrRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SCHDL_CONTR index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_contrRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSchedulesProviderBase.GetByPurchRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SCHDL_PURCH index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_purchRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSchedulesProviderBase.GetByPrcaeRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SCHDL_PRCAE index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_prcaeRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSchedulesProviderBase.GetBySpontRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SCHDL_SPONT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_spontRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSchedulesProviderBase.GetBySpssnRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SCHDL_SPSSN index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_spssnRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSchedulesProviderBase.GetByParntRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SCHDL_PARNT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_parntRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSchedulesProviderBase.GetBySteamRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SCHDL_STEAM index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_steamRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSchedulesProviderBase.GetByAeattRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SCHDL_AEATT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_aeattRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSchedulesProviderBase.GetByDnaSchdlRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SCHDL_DNA_SCHDL index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_dnaSchdlRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSchedulesProviderBase.GetByPconfRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SCHDL_PCONF index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_pconfRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSchedulesProviderBase.GetBySchdlRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_SCHEDULES index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_schdlRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Schedules"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSchedulesProviderBase.GetByAttndRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_SCHDL_ATTND index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_attndRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSchedulesProviderBase.GetByIdentifier(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_SCHDL_IDENTIFIER index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_identifier"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSchedulesProviderBase.GetByPatntRefnoSctypRefnoSpontRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_SCHDL_PATNT_SCTYP_SPONT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_patntRefno"></param>
            <param name="_sctypRefno"></param>
            <param name="_spontRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSchedulesProviderBase.GetBySctypRefnoArchvFlag(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_SCHDL_SCTYP index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_sctypRefno"></param>
            <param name="_archvFlag"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSchedulesProviderBase.GetByLotypHeorgRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SCHDL_LOTYP_HEORG index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_lotypHeorgRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSchedulesProviderBase.GetByProcaRefnoSctypRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PROCA_SCHDL index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_procaRefno"></param>
            <param name="_sctypRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSchedulesProviderBase.GetByScocmRefnoSpectRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the SAH_SCHDL_SCOCMSPECT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_scocmRefno"></param>
            <param name="_spectRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSchedulesProviderBase.GetBySpontRefnoScsdaRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the SAH_SCHD_SPONT_SCSDA index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_spontRefno"></param>
            <param name="_scsdaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSchedulesProviderBase.GetBySpontRefnoSctypRefnoSpectRefnoPatntRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the SAH_SCHEDULES_SPONTSPEC index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_spontRefno"></param>
            <param name="_sctypRefno"></param>
            <param name="_spectRefno"></param>
            <param name="_patntRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSchedulesProviderBase.GetByProcaRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SCHDL_PROCA index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_procaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSchedulesProviderBase.GetBySeenbyProcaRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SCHDL_SEENBY_PROCA index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_seenbyProcaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSchedulesProviderBase.GetByPriorRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SCHDL_PRIOR index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_priorRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSchedulesProviderBase.GetByBedstRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SCHDL_BEDST index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_bedstRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSchedulesProviderBase.GetByProvdRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SCHDL_PROVD index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_provdRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSchedulesProviderBase.GetByRefrlRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SCHDL_REFRL index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_refrlRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSchedulesProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.Schedules})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.Schedules object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSchedulesProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.Schedules)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.Schedules object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.Schedules object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.Schedules object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSchedulesProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.Schedules)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.Schedules object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.Schedules object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleActiveInpatientsProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ActiveInpatients"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleActiveInpatientsProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleActiveInpatientsProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleActiveInpatientsProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ActiveInpatients"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleActiveInpatientsProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleActiveInpatientsProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleActiveInpatientsProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleActiveInpatientsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleActiveInpatientsProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleActiveInpatientsProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleActiveInpatientsProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleActiveInpatientsProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_ainptRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleActiveInpatientsProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ActiveInpatients objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleActiveInpatientsProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ActiveInpatients objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleActiveInpatientsProviderBase.GetBySpontRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_SPONT_REFNO index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_spontRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleActiveInpatientsProviderBase.GetByPrvspRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the SAH_AINPT_PRVSP index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_prvspRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleActiveInpatientsProviderBase.GetByAinptRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_ACTIVE_INPATIENTS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_ainptRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ActiveInpatients"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleActiveInpatientsProviderBase.GetByPatntRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_PATNT_REFNO index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_patntRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleActiveInpatientsProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.ActiveInpatients})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.ActiveInpatients object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleActiveInpatientsProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.ActiveInpatients)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.ActiveInpatients object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.ActiveInpatients object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.ActiveInpatients object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleActiveInpatientsProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.ActiveInpatients)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.ActiveInpatients object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.ActiveInpatients object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleRulesProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Rules"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleRulesProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleRulesProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleRulesProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Rules"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleRulesProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleRulesProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleRulesProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleRulesProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleRulesProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleRulesProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleRulesProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleRulesProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_rulesRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleRulesProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Rules objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleRulesProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Rules objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleRulesProviderBase.GetByCode(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_RULES_CODE index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_code"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleRulesProviderBase.GetByRulesRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_RULES index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_rulesRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Rules"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleRulesProviderBase.GetByRltypCode(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CLU_RULES_RLTYP index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_rltypCode"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleRulesProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.Rules})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.Rules object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleRulesProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.Rules)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.Rules object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.Rules object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.Rules object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleRulesProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.Rules)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.Rules object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.Rules object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerEpisodesProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ProfCarerEpisodes"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerEpisodesProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerEpisodesProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerEpisodesProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ProfCarerEpisodes"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerEpisodesProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerEpisodesProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerEpisodesProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerEpisodesProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerEpisodesProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerEpisodesProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerEpisodesProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerEpisodesProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_prcaeRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerEpisodesProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProfCarerEpisodes objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerEpisodesProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProfCarerEpisodes objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerEpisodesProviderBase.GetByAdcatRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PRCAE_ADCAT key.
            	CNA_PRCAE_ADCAT Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_adcatRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProfCarerEpisodes objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerEpisodesProviderBase.GetByAdmetRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PRCAE_ADMET key.
            	CNA_PRCAE_ADMET Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_admetRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProfCarerEpisodes objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerEpisodesProviderBase.GetByAgebdRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PRCAE_AGEBD key.
            	CNA_PRCAE_AGEBD Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_agebdRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProfCarerEpisodes objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerEpisodesProviderBase.GetByAttndRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PRCAE_ATTND key.
            	CNA_PRCAE_ATTND Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_attndRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProfCarerEpisodes objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerEpisodesProviderBase.GetByCeocmRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PRCAE_CEOCM key.
            	CNA_PRCAE_CEOCM Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_ceocmRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProfCarerEpisodes objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerEpisodesProviderBase.GetByDnarsRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PRCAE_DNARS key.
            	CNA_PRCAE_DNARS Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_dnarsRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProfCarerEpisodes objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerEpisodesProviderBase.GetByEpisoRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PRCAE_EPISO key.
            	CNA_PRCAE_EPISO Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_episoRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProfCarerEpisodes objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerEpisodesProviderBase.GetByEptypRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PRCAE_EPTYP key.
            	CNA_PRCAE_EPTYP Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_eptypRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProfCarerEpisodes objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerEpisodesProviderBase.GetByInlocRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PRCAE_INLOC key.
            	CNA_PRCAE_INLOC Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_inlocRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProfCarerEpisodes objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerEpisodesProviderBase.GetByInmgtRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PRCAE_INMGT key.
            	CNA_PRCAE_INMGT Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_inmgtRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProfCarerEpisodes objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerEpisodesProviderBase.GetByLegscRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PRCAE_LEGSC key.
            	CNA_PRCAE_LEGSC Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_legscRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProfCarerEpisodes objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerEpisodesProviderBase.GetByMenctRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PRCAE_MENCT key.
            	CNA_PRCAE_MENCT Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_menctRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProfCarerEpisodes objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerEpisodesProviderBase.GetByPagrpRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PRCAE_PAGRP key.
            	CNA_PRCAE_PAGRP Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_pagrpRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProfCarerEpisodes objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerEpisodesProviderBase.GetByPatclRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PRCAE_PATCL key.
            	CNA_PRCAE_PATCL Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_patclRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProfCarerEpisodes objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerEpisodesProviderBase.GetByPaymtRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PRCAE_PAYMT key.
            	CNA_PRCAE_PAYMT Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_paymtRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProfCarerEpisodes objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerEpisodesProviderBase.GetByRectrRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PRCAE_RECTR key.
            	CNA_PRCAE_RECTR Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_rectrRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProfCarerEpisodes objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerEpisodesProviderBase.GetBySorrfRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PRCAE_SORRF key.
            	CNA_PRCAE_SORRF Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_sorrfRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProfCarerEpisodes objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerEpisodesProviderBase.GetBySpxrlRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PRCAE_SPXRL key.
            	CNA_PRCAE_SPXRL Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_spxrlRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProfCarerEpisodes objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerEpisodesProviderBase.GetByVisitRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PRCAE_VISIT key.
            	CNA_PRCAE_VISIT Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_visitRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProfCarerEpisodes objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerEpisodesProviderBase.GetByProvdRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PRCAE_PROVD index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_provdRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerEpisodesProviderBase.GetByCtrsvRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PRCAE_CTRSV index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_ctrsvRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerEpisodesProviderBase.GetByPatntRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PRCAE_PATNT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_patntRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerEpisodesProviderBase.GetByWlistRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PRCAE_WLIST index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_wlistRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerEpisodesProviderBase.GetBySstayRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PRCAE_SSTAY index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_sstayRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerEpisodesProviderBase.GetBySstaySpontRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PRCAE_SSTAY_SPONT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_sstaySpontRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerEpisodesProviderBase.GetByPurchRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PRCAE_PURCH index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_purchRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerEpisodesProviderBase.GetByContrRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PRCAE_CONTR index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_contrRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerEpisodesProviderBase.GetBySpontRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PRCAE_SPONT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_spontRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerEpisodesProviderBase.GetByCccccRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PRCAE_CCCCC index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_cccccRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerEpisodesProviderBase.GetByMhcepRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PRCAE_MHCEP index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_mhcepRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerEpisodesProviderBase.GetByPrvspRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PRCAE_PRVSP index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_prvspRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerEpisodesProviderBase.GetByPriorRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PRCAE_PRIOR index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_priorRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerEpisodesProviderBase.GetByRefrlRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PRCAE_REFRL index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_refrlRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerEpisodesProviderBase.GetBySpectRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PRCAE_SPECT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_spectRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerEpisodesProviderBase.GetByProcaRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PRCAE_PROCA index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_procaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerEpisodesProviderBase.GetByAdmofRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PRCAE_ADMOF index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_admofRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerEpisodesProviderBase.GetByPriorPointer(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PRCAE_PRIOR_POINTER index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_priorPointer"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerEpisodesProviderBase.GetByPrvsnFlag(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_PRCAE_PRVSN index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_prvsnFlag"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerEpisodesProviderBase.GetByPrcaeRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_PROF_CARER_EPISODES index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_prcaeRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ProfCarerEpisodes"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerEpisodesProviderBase.GetByCstatRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_CSTAT_REFNO index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_cstatRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerEpisodesProviderBase.GetByAdmofRefnoArchvFlag(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_PRCAE_ADMOF_ARCHV index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_admofRefno"></param>
            <param name="_archvFlag"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerEpisodesProviderBase.GetByIdentifier(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_PRCAE_IDENTIFIER index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_identifier"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerEpisodesProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.ProfCarerEpisodes})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.ProfCarerEpisodes object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerEpisodesProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.ProfCarerEpisodes)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.ProfCarerEpisodes object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.ProfCarerEpisodes object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.ProfCarerEpisodes object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerEpisodesProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.ProfCarerEpisodes)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.ProfCarerEpisodes object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.ProfCarerEpisodes object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointProfilesProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ServicePointProfiles"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointProfilesProvider.GetBySpbedRefnoAfterDttm(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.DateTime,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_startDttm"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointProfilesProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointProfilesProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointProfilesProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ServicePointProfiles"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointProfilesProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointProfilesProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointProfilesProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointProfilesProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointProfilesProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointProfilesProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointProfilesProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointProfilesProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_spproRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointProfilesProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ServicePointProfiles objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointProfilesProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ServicePointProfiles objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointProfilesProviderBase.GetByRulesRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SPPRO_RULES index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_rulesRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointProfilesProviderBase.GetBySpontRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SPPRO_SPONT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_spontRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointProfilesProviderBase.GetBySpectRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SPPRO_SPECT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_spectRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointProfilesProviderBase.GetByProcaRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SPPRO_PROCA index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_procaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointProfilesProviderBase.GetByRfvalRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SPPRO_RFVAL index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_rfvalRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointProfilesProviderBase.GetByWdproRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SPPRO_WDPRO index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_wdproRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointProfilesProviderBase.GetBySpbedRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SPPRO_SPBED index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_spbedRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointProfilesProviderBase.GetByBedssRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SPPRO_BEDSS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_bedssRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointProfilesProviderBase.GetBySpproRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_SERVICE_POINT_PROFILES index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_spproRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ServicePointProfiles"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointProfilesProviderBase.GetBySpbayRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SPPRO_SPBAY index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_spbayRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointProfilesProviderBase.GetByArchvFlag(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the SAH_SPONT_PROFILES_ARCHV index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_archvFlag"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointProfilesProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.ServicePointProfiles})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.ServicePointProfiles object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointProfilesProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.ServicePointProfiles)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.ServicePointProfiles object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.ServicePointProfiles object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.ServicePointProfiles object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointProfilesProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.ServicePointProfiles)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.ServicePointProfiles object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.ServicePointProfiles object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleUserRolesProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.UserRoles"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleUserRolesProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleUserRolesProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleUserRolesProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.UserRoles"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleUserRolesProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleUserRolesProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleUserRolesProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleUserRolesProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleUserRolesProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleUserRolesProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleUserRolesProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleUserRolesProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_usrolRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleUserRolesProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.UserRoles objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleUserRolesProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.UserRoles objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleUserRolesProviderBase.GetByUsersRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_USROL_USERS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_usersRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleUserRolesProviderBase.GetByAprolRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_USROL_APROL index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_aprolRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleUserRolesProviderBase.GetByUsrolRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_USER_ROLES index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_usrolRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.UserRoles"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleUserRolesProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.UserRoles})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.UserRoles object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleUserRolesProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.UserRoles)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.UserRoles object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.UserRoles object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.UserRoles object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleUserRolesProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.UserRoles)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.UserRoles object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.UserRoles object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProviderSpellsProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ProviderSpells"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProviderSpellsProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProviderSpellsProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProviderSpellsProvider.GetProvisionalBetween(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.DateTime,System.DateTime,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Prvsn_Start_flag and Admit_dttm.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_modifDttm"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProviderSpellsProvider.GetProvisionalDischargesBeforeDttm(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.DateTime,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Prvsn_end_flag and Disch_dttm.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_modifDttm"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProviderSpellsProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ProviderSpells"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProviderSpellsProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProviderSpellsProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProviderSpellsProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProviderSpellsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProviderSpellsProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProviderSpellsProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProviderSpellsProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProviderSpellsProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_prvspRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProviderSpellsProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProviderSpells objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProviderSpellsProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProviderSpells objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProviderSpellsProviderBase.GetByAdcatRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PRVSP_ADCAT key.
            	CNA_PRVSP_ADCAT Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_adcatRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProviderSpells objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProviderSpellsProviderBase.GetByAdmitLegscRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PRVSP_ADMIT_LEGSC key.
            	CNA_PRVSP_ADMIT_LEGSC Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_admitLegscRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProviderSpells objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProviderSpellsProviderBase.GetByAdmitMenctRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PRVSP_ADMIT_MENCT key.
            	CNA_PRVSP_ADMIT_MENCT Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_admitMenctRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProviderSpells objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProviderSpellsProviderBase.GetByAdsorRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PRVSP_ADSOR key.
            	CNA_PRVSP_ADSOR Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_adsorRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProviderSpells objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProviderSpellsProviderBase.GetByAgebdRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PRVSP_AGEBD key.
            	CNA_PRVSP_AGEBD Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_agebdRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProviderSpells objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProviderSpellsProviderBase.GetByArrivTransRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PRVSP_ARRIV_TRANS key.
            	CNA_PRVSP_ARRIV_TRANS Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_arrivTransRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProviderSpells objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProviderSpellsProviderBase.GetByClevlRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PRVSP_CLEVL key.
            	CNA_PRVSP_CLEVL Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_clevlRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProviderSpells objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProviderSpellsProviderBase.GetByDeprtTransRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PRVSP_DEPRT_TRANS key.
            	CNA_PRVSP_DEPRT_TRANS Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_deprtTransRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProviderSpells objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProviderSpellsProviderBase.GetByDischRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PRVSP_DISCH key.
            	CNA_PRVSP_DISCH Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_dischRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProviderSpells objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProviderSpellsProviderBase.GetByDischLegscRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PRVSP_DISCH_LEGSC key.
            	CNA_PRVSP_DISCH_LEGSC Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_dischLegscRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProviderSpells objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProviderSpellsProviderBase.GetByDischMenctRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PRVSP_DISCH_MENCT key.
            	CNA_PRVSP_DISCH_MENCT Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_dischMenctRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProviderSpells objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProviderSpellsProviderBase.GetByDisdeRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PRVSP_DISDE key.
            	CNA_PRVSP_DISDE Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_disdeRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProviderSpells objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProviderSpellsProviderBase.GetByDismtRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PRVSP_DISMT key.
            	CNA_PRVSP_DISMT Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_dismtRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProviderSpells objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProviderSpellsProviderBase.GetByFolupRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PRVSP_FOLUP key.
            	CNA_PRVSP_FOLUP Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_folupRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProviderSpells objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProviderSpellsProviderBase.GetByInmgtRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PRVSP_INMGT key.
            	CNA_PRVSP_INMGT Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_inmgtRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProviderSpells objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProviderSpellsProviderBase.GetByNotadRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PRVSP_NOTAD key.
            	CNA_PRVSP_NOTAD Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_notadRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProviderSpells objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProviderSpellsProviderBase.GetByPatclRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PRVSP_PATCL key.
            	CNA_PRVSP_PATCL Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_patclRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProviderSpells objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProviderSpellsProviderBase.GetByReadmRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PRVSP_READM key.
            	CNA_PRVSP_READM Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_readmRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProviderSpells objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProviderSpellsProviderBase.GetByRefpaRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PRVSP_REFPA key.
            	CNA_PRVSP_REFPA Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_refpaRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProviderSpells objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProviderSpellsProviderBase.GetBySpellRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PRVSP_SPELL key.
            	CNA_PRVSP_SPELL Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_spellRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProviderSpells objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProviderSpellsProviderBase.GetByProvdRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PRVSP_PROVD index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_provdRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProviderSpellsProviderBase.GetByPatntRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PRVSP_PATNT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_patntRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProviderSpellsProviderBase.GetByPrvsnEndFlag(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_PRVSP_PRVSN_END index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_prvsnEndFlag"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProviderSpellsProviderBase.GetByRefrlRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PRVSP_REFRL index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_refrlRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProviderSpellsProviderBase.GetBySpontRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PRVSP_SPONT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_spontRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProviderSpellsProviderBase.GetByPurchRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PRVSP_PURCH index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_purchRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProviderSpellsProviderBase.GetByRespHeorgRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PRVSP_RESP_HEORG index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_respHeorgRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProviderSpellsProviderBase.GetByAdmofRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PRVSP_ADMOF index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_admofRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProviderSpellsProviderBase.GetByArcarHeorgRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PRVSP_ARCAR_HEORG index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_arcarHeorgRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProviderSpellsProviderBase.GetByDicarHeorgRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PRVSP_DICAR_HEORG index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_dicarHeorgRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProviderSpellsProviderBase.GetByAeattRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PRVSP_AEATT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_aeattRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProviderSpellsProviderBase.GetByPacacRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PRVSP_PACAC index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_pacacRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProviderSpellsProviderBase.GetByMhcepRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PRVSP_MHCEP index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_mhcepRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProviderSpellsProviderBase.GetByPrvspRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_PROVIDER_SPELLS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_prvspRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ProviderSpells"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProviderSpellsProviderBase.GetByPriorPointer(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the SAH_PRIOR_PRVSP index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_priorPointer"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProviderSpellsProviderBase.GetByIdentifier(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the SAH_PRVSP_IDENT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_identifier"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProviderSpellsProviderBase.GetByProcaRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PRVSP_PROCA index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_procaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProviderSpellsProviderBase.GetByContrRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PRVSP_CONTR index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_contrRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProviderSpellsProviderBase.GetBySpectRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PRVSP_SPECT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_spectRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProviderSpellsProviderBase.GetByPriorRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PRVSP_PRIOR index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_priorRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProviderSpellsProviderBase.GetByAdmdcRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PRVSP_ADMDC index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_admdcRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProviderSpellsProviderBase.GetByCccccRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PRVSP_CCCCC index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_cccccRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProviderSpellsProviderBase.GetByCntctProcaRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PRVSP_CNTCT_PROCA index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_cntctProcaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProviderSpellsProviderBase.GetByMatspRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PRVSP_MATSP index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_matspRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProviderSpellsProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.ProviderSpells})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.ProviderSpells object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProviderSpellsProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.ProviderSpells)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.ProviderSpells object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.ProviderSpells object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.ProviderSpells object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProviderSpellsProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.ProviderSpells)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.ProviderSpells object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.ProviderSpells object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleTheatreEventsProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TheatreEvents"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleTheatreEventsProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleTheatreEventsProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleTheatreEventsProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TheatreEvents"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleTheatreEventsProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleTheatreEventsProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleTheatreEventsProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleTheatreEventsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleTheatreEventsProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleTheatreEventsProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleTheatreEventsProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleTheatreEventsProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_theveRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleTheatreEventsProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.TheatreEvents objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleTheatreEventsProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.TheatreEvents objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleTheatreEventsProviderBase.GetBySchdlRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_THEVE_SCHDL index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_schdlRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleTheatreEventsProviderBase.GetByTheveRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_THEATRE_EVENTS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_theveRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TheatreEvents"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleTheatreEventsProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.TheatreEvents})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.TheatreEvents object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleTheatreEventsProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TheatreEvents)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.TheatreEvents object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.TheatreEvents object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.TheatreEvents object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleTheatreEventsProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TheatreEvents)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.TheatreEvents object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.TheatreEvents object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointStaysProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ServicePointStays"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointStaysProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointStaysProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointStaysProvider.GetTransferEventsInTimePeriod(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.DateTime,System.DateTime,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_startDttm"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointStaysProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ServicePointStays"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointStaysProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointStaysProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointStaysProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointStaysProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointStaysProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointStaysProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointStaysProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointStaysProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_sstayRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointStaysProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ServicePointStays objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointStaysProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ServicePointStays objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointStaysProviderBase.GetByBdcatRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_SSTAY_BDCAT key.
            	CNA_SSTAY_BDCAT Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_bdcatRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ServicePointStays objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointStaysProviderBase.GetByHpstpRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_SSTAY_HPSTP key.
            	CNA_SSTAY_HPSTP Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_hpstpRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ServicePointStays objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointStaysProviderBase.GetByRehscRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_SSTAY_REHSC key.
            	CNA_SSTAY_REHSC Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_rehscRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ServicePointStays objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointStaysProviderBase.GetBySstypRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_SSTAY_SSTYP key.
            	CNA_SSTAY_SSTYP Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_sstypRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ServicePointStays objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointStaysProviderBase.GetByPriorPointer(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the HAH_SSTAY_PRIOR index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_priorPointer"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointStaysProviderBase.GetByPrvsnFlag(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_SSTAY_PRVSN index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_prvsnFlag"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointStaysProviderBase.GetBySpontRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SSTAY_SPONT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_spontRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointStaysProviderBase.GetByPercaRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SSTAY_PERCA index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_percaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointStaysProviderBase.GetByProcaRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SSTAY_PROCA index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_procaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointStaysProviderBase.GetByPatntRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SSTAY_PATNT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_patntRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointStaysProviderBase.GetByPrvsnFlagSpontRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_SSTAY_PRVSN_SPONT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_prvsnFlag"></param>
            <param name="_spontRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointStaysProviderBase.GetByPrvspRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SSTAY_PRVSP index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_prvspRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointStaysProviderBase.GetBySstayRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_SERVICE_POINT_STAYS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_sstayRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ServicePointStays"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointStaysProviderBase.GetByActiveIndicator(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_SSTAY_ACTIND index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_activeIndicator"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointStaysProviderBase.GetBySpontRefnoPrvsnFlag(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_SSTAY_SPONT_PRVSN index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_spontRefno"></param>
            <param name="_prvsnFlag"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointStaysProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.ServicePointStays})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.ServicePointStays object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointStaysProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.ServicePointStays)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.ServicePointStays object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.ServicePointStays object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.ServicePointStays object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointStaysProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.ServicePointStays)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.ServicePointStays object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.ServicePointStays object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSystemProfilesProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.SystemProfiles"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSystemProfilesProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSystemProfilesProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSystemProfilesProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.SystemProfiles"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSystemProfilesProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSystemProfilesProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSystemProfilesProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSystemProfilesProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSystemProfilesProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSystemProfilesProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSystemProfilesProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSystemProfilesProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_syproRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSystemProfilesProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.SystemProfiles objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSystemProfilesProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.SystemProfiles objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSystemProfilesProviderBase.GetByUsersRefnoWkstnRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_SYPRO_FULL index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_usersRefno"></param>
            <param name="_wkstnRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSystemProfilesProviderBase.GetByUsersRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SYPRO_USERS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_usersRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSystemProfilesProviderBase.GetByWkstnRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SYPRO_WKSTN index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_wkstnRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSystemProfilesProviderBase.GetByAprolRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SYPRO_APROL index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_aprolRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSystemProfilesProviderBase.GetByHeorgRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SYPRO_HEORG index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_heorgRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSystemProfilesProviderBase.GetBySyproRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_SYSTEM_PROFILES index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_syproRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.SystemProfiles"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSystemProfilesProviderBase.GetByCode(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_SYPRO_CODE index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_code"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSystemProfilesProviderBase.GetByCodeUsage(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_SYPRO_CODE_USAGE index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_code"></param>
            <param name="_usage"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSystemProfilesProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.SystemProfiles})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.SystemProfiles object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSystemProfilesProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.SystemProfiles)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.SystemProfiles object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.SystemProfiles object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.SystemProfiles object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSystemProfilesProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.SystemProfiles)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.SystemProfiles object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.SystemProfiles object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointSuspensionsProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ServicePointSuspensions"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointSuspensionsProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointSuspensionsProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointSuspensionsProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ServicePointSuspensions"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointSuspensionsProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointSuspensionsProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointSuspensionsProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointSuspensionsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointSuspensionsProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointSuspensionsProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointSuspensionsProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointSuspensionsProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_spsusRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointSuspensionsProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ServicePointSuspensions objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointSuspensionsProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ServicePointSuspensions objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointSuspensionsProviderBase.GetBySpontRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SPSUS_SPONT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_spontRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointSuspensionsProviderBase.GetByBedssRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SPSUS_BEDSS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_bedssRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointSuspensionsProviderBase.GetBySpsusRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_SERVICE_POINT_SUSPENSIONS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_spsusRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ServicePointSuspensions"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointSuspensionsProviderBase.GetBySpbayRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SPSUS_SPBAY index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_spbayRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointSuspensionsProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.ServicePointSuspensions})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.ServicePointSuspensions object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointSuspensionsProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.ServicePointSuspensions)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.ServicePointSuspensions object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.ServicePointSuspensions object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.ServicePointSuspensions object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleServicePointSuspensionsProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.ServicePointSuspensions)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.ServicePointSuspensions object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.ServicePointSuspensions object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleUserWorkStationsProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.UserWorkStations"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleUserWorkStationsProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleUserWorkStationsProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleUserWorkStationsProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.UserWorkStations"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleUserWorkStationsProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleUserWorkStationsProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleUserWorkStationsProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleUserWorkStationsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleUserWorkStationsProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleUserWorkStationsProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleUserWorkStationsProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleUserWorkStationsProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_uswrkRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleUserWorkStationsProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.UserWorkStations objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleUserWorkStationsProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.UserWorkStations objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleUserWorkStationsProviderBase.GetByUsersRefnoWkstnRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_USWRK_FULL index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_usersRefno"></param>
            <param name="_wkstnRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleUserWorkStationsProviderBase.GetByWkstnRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_USWRK_WKSTN index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_wkstnRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleUserWorkStationsProviderBase.GetByUsersRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_USWRK_USERS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_usersRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleUserWorkStationsProviderBase.GetByUswrkRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_USER_WORK_STATIONS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_uswrkRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.UserWorkStations"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleUserWorkStationsProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.UserWorkStations})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.UserWorkStations object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleUserWorkStationsProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.UserWorkStations)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.UserWorkStations object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.UserWorkStations object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.UserWorkStations object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleUserWorkStationsProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.UserWorkStations)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.UserWorkStations object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.UserWorkStations object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSpecialtyIdsProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.SpecialtyIds"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSpecialtyIdsProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSpecialtyIdsProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSpecialtyIdsProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.SpecialtyIds"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSpecialtyIdsProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSpecialtyIdsProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSpecialtyIdsProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSpecialtyIdsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSpecialtyIdsProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSpecialtyIdsProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSpecialtyIdsProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSpecialtyIdsProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_speidRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSpecialtyIdsProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.SpecialtyIds objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSpecialtyIdsProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.SpecialtyIds objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSpecialtyIdsProviderBase.GetByIdentifierSpectRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_SPECIALTY_IDS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_identifier"></param>
            <param name="_spectRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSpecialtyIdsProviderBase.GetBySpeidRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_SPECIALTY_IDS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_speidRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.SpecialtyIds"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSpecialtyIdsProviderBase.GetByIdentifierSitypRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_SPEID_IDENT_SITYP index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_identifier"></param>
            <param name="_sitypRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSpecialtyIdsProviderBase.GetBySpectRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_SPEID_SPECT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_spectRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSpecialtyIdsProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.SpecialtyIds})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.SpecialtyIds object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSpecialtyIdsProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.SpecialtyIds)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.SpecialtyIds object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.SpecialtyIds object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.SpecialtyIds object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleSpecialtyIdsProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.SpecialtyIds)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.SpecialtyIds object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.SpecialtyIds object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerStaffTeamsProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ProfCarerStaffTeams"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerStaffTeamsProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerStaffTeamsProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerStaffTeamsProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ProfCarerStaffTeams"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerStaffTeamsProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerStaffTeamsProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerStaffTeamsProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerStaffTeamsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerStaffTeamsProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerStaffTeamsProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerStaffTeamsProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerStaffTeamsProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_pcsttRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerStaffTeamsProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProfCarerStaffTeams objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerStaffTeamsProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProfCarerStaffTeams objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerStaffTeamsProviderBase.GetBySteamRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PCSTT_STEAM index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_steamRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerStaffTeamsProviderBase.GetByProcaRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PCSTT_PROCA index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_procaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerStaffTeamsProviderBase.GetByPcsttRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_PROF_CARER_STAFF_TEAMS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_pcsttRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ProfCarerStaffTeams"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerStaffTeamsProviderBase.GetByPrrolRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the SAH_PCST_PRROL index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_prrolRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerStaffTeamsProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.ProfCarerStaffTeams})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.ProfCarerStaffTeams object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerStaffTeamsProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.ProfCarerStaffTeams)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.ProfCarerStaffTeams object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.ProfCarerStaffTeams object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.ProfCarerStaffTeams object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerStaffTeamsProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.ProfCarerStaffTeams)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.ProfCarerStaffTeams object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.ProfCarerStaffTeams object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleApplicationRolesProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ApplicationRoles"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleApplicationRolesProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleApplicationRolesProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleApplicationRolesProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ApplicationRoles"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleApplicationRolesProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleApplicationRolesProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleApplicationRolesProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleApplicationRolesProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleApplicationRolesProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleApplicationRolesProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleApplicationRolesProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleApplicationRolesProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_aprolRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleApplicationRolesProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ApplicationRoles objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleApplicationRolesProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ApplicationRoles objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleApplicationRolesProviderBase.GetByAprolRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_APPLICATION_ROLES index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_aprolRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ApplicationRoles"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleApplicationRolesProviderBase.GetByCode(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_APROL_CODE index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_code"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleApplicationRolesProviderBase.GetByParntRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_APROL_PARNT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_parntRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleApplicationRolesProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.ApplicationRoles})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.ApplicationRoles object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleApplicationRolesProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.ApplicationRoles)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.ApplicationRoles object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.ApplicationRoles object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.ApplicationRoles object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleApplicationRolesProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.ApplicationRoles)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.ApplicationRoles object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.ApplicationRoles object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleBedProfilesProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.BedProfiles"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleBedProfilesProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleBedProfilesProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleBedProfilesProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.BedProfiles"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleBedProfilesProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleBedProfilesProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleBedProfilesProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleBedProfilesProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleBedProfilesProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleBedProfilesProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleBedProfilesProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleBedProfilesProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_bdproRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleBedProfilesProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.BedProfiles objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleBedProfilesProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.BedProfiles objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleBedProfilesProviderBase.GetByProcaRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_BDPRO_PROCA index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_procaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleBedProfilesProviderBase.GetBySpectRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_BDPRO_SPECT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_spectRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleBedProfilesProviderBase.GetByBdproRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_BED_PROFILES index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_bdproRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.BedProfiles"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleBedProfilesProviderBase.GetByBedssRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_BDPRO_BEDSS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_bedssRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleBedProfilesProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.BedProfiles})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.BedProfiles object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleBedProfilesProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.BedProfiles)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.BedProfiles object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.BedProfiles object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.BedProfiles object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleBedProfilesProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.BedProfiles)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.BedProfiles object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.BedProfiles object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleDependantResourcesProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.DependantResources"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleDependantResourcesProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleDependantResourcesProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleDependantResourcesProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.DependantResources"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleDependantResourcesProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleDependantResourcesProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleDependantResourcesProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleDependantResourcesProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleDependantResourcesProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleDependantResourcesProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleDependantResourcesProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleDependantResourcesProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_dpresRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleDependantResourcesProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.DependantResources objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleDependantResourcesProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.DependantResources objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleDependantResourcesProviderBase.GetBySorceRefnoSorceCode(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_DPRES_SORCE index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_sorceRefno"></param>
            <param name="_sorceCode"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleDependantResourcesProviderBase.GetByDpresRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_DEPENDANT_RESOURCES index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_dpresRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.DependantResources"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleDependantResourcesProviderBase.GetByResrcRefnoSorceRefnoSorceCodeArchvFlag(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the SAH_DEPRES_NEW index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_resrcRefno"></param>
            <param name="_sorceRefno"></param>
            <param name="_sorceCode"></param>
            <param name="_archvFlag"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleDependantResourcesProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.DependantResources})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.DependantResources object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleDependantResourcesProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.DependantResources)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.DependantResources object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.DependantResources object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.DependantResources object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleDependantResourcesProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.DependantResources)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.DependantResources object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.DependantResources object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleDiagnosisProceduresProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.DiagnosisProcedures"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleDiagnosisProceduresProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleDiagnosisProceduresProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleDiagnosisProceduresProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.DiagnosisProcedures"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleDiagnosisProceduresProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleDiagnosisProceduresProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleDiagnosisProceduresProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleDiagnosisProceduresProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleDiagnosisProceduresProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleDiagnosisProceduresProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleDiagnosisProceduresProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleDiagnosisProceduresProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_dgproRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleDiagnosisProceduresProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.DiagnosisProcedures objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleDiagnosisProceduresProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.DiagnosisProcedures objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleDiagnosisProceduresProviderBase.GetByAnalcRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_DGPRO_ANALC key.
            	CNA_DGPRO_ANALC Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_analcRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.DiagnosisProcedures objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleDiagnosisProceduresProviderBase.GetByCptypRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_DGPRO_CPTYP key.
            	CNA_DGPRO_CPTYP Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_cptypRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.DiagnosisProcedures objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleDiagnosisProceduresProviderBase.GetByDountRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_DGPRO_DOUNT key.
            	CNA_DGPRO_DOUNT Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_dountRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.DiagnosisProcedures objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleDiagnosisProceduresProviderBase.GetByDpclaRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_DGPRO_DPCLA key.
            	CNA_DGPRO_DPCLA Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_dpclaRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.DiagnosisProcedures objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleDiagnosisProceduresProviderBase.GetByDplocRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_DGPRO_DPLOC key.
            	CNA_DGPRO_DPLOC Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_dplocRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.DiagnosisProcedures objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleDiagnosisProceduresProviderBase.GetByFruntRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_DGPRO_FRUNT key.
            	CNA_DGPRO_FRUNT Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_fruntRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.DiagnosisProcedures objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleDiagnosisProceduresProviderBase.GetByLatrlRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_DGPRO_LATRL key.
            	CNA_DGPRO_LATRL Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_latrlRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.DiagnosisProcedures objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleDiagnosisProceduresProviderBase.GetByMplevRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_DGPRO_MPLEV key.
            	CNA_DGPRO_MPLEV Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_mplevRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.DiagnosisProcedures objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleDiagnosisProceduresProviderBase.GetByPeradRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_DGPRO_PERAD key.
            	CNA_DGPRO_PERAD Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_peradRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.DiagnosisProcedures objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleDiagnosisProceduresProviderBase.GetByRsadmRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_DGPRO_RSADM key.
            	CNA_DGPRO_RSADM Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_rsadmRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.DiagnosisProcedures objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleDiagnosisProceduresProviderBase.GetBySuplCode(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_DGPRO_SUPL index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_suplCode"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleDiagnosisProceduresProviderBase.GetByCodeCcsxtCode(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_DGPRO_CODE_CCSXT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_code"></param>
            <param name="_ccsxtCode"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleDiagnosisProceduresProviderBase.GetByPrcaeRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_DGPRO_PRCAE index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_prcaeRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleDiagnosisProceduresProviderBase.GetByProcaRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_DGPRO_PROCA index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_procaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleDiagnosisProceduresProviderBase.GetByParntRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_DGPRO_PARNT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_parntRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleDiagnosisProceduresProviderBase.GetByRulesRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_DGPRO_RULES index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_rulesRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleDiagnosisProceduresProviderBase.GetByLinkDgproRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_DGPRO_LINK_DGPRO index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_linkDgproRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleDiagnosisProceduresProviderBase.GetBySteamRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_DGPRO_STEAM index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_steamRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleDiagnosisProceduresProviderBase.GetBySpectRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_DGPRO_SPECT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_spectRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleDiagnosisProceduresProviderBase.GetByOdpcdRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_DGPRO_ODPCD index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_odpcdRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleDiagnosisProceduresProviderBase.GetByPatntRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_DGPRO_PATNT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_patntRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleDiagnosisProceduresProviderBase.GetBySorceRefnoSorceCode(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_DGPRO_SORCE index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_sorceRefno"></param>
            <param name="_sorceCode"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleDiagnosisProceduresProviderBase.GetByDgproRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_DIAGNOSIS_PROCEDURES index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_dgproRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.DiagnosisProcedures"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleDiagnosisProceduresProviderBase.GetBySorceCodeCcsxtCode(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the SAH_DGPRO_SCODE_CCSXT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_sorceCode"></param>
            <param name="_ccsxtCode"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleDiagnosisProceduresProviderBase.GetBySorceCode(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the SAH_DGPRO_SORCE index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_sorceCode"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleDiagnosisProceduresProviderBase.GetByDptypCode(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_DGPRO_DPTYP index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_dptypCode"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleDiagnosisProceduresProviderBase.GetByPatntRefnoSorceCode(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_DGPRO_PATNT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_patntRefno"></param>
            <param name="_sorceCode"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleDiagnosisProceduresProviderBase.GetByIcdstRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_DGPRO_ICDST index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_icdstRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleDiagnosisProceduresProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.DiagnosisProcedures})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.DiagnosisProcedures object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleDiagnosisProceduresProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.DiagnosisProcedures)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.DiagnosisProcedures object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.DiagnosisProcedures object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.DiagnosisProcedures object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleDiagnosisProceduresProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.DiagnosisProcedures)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.DiagnosisProcedures object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.DiagnosisProcedures object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAeStaysProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.AeStays"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAeStaysProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAeStaysProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAeStaysProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.AeStays"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAeStaysProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAeStaysProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAeStaysProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAeStaysProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAeStaysProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAeStaysProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAeStaysProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAeStaysProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_aestyRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAeStaysProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.AeStays objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAeStaysProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.AeStays objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAeStaysProviderBase.GetByProcaRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_AESTY_PROCA index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_procaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAeStaysProviderBase.GetBySpectRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_AESTY_SPECT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_spectRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAeStaysProviderBase.GetByTempSpontRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_AESTY_TEMP_SPONT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_tempSpontRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAeStaysProviderBase.GetByAeattRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_AESTY_AEATT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_aeattRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAeStaysProviderBase.GetBySpontRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_AESTY_SPONT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_spontRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAeStaysProviderBase.GetByAestyRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_AE_STAYS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_aestyRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.AeStays"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAeStaysProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.AeStays})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.AeStays object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAeStaysProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.AeStays)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.AeStays object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.AeStays object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.AeStays object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAeStaysProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.AeStays)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.AeStays object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.AeStays object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAcuteListProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.AcuteList"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAcuteListProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAcuteListProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAcuteListProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.AcuteList"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAcuteListProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAcuteListProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAcuteListProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAcuteListProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAcuteListProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAcuteListProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAcuteListProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAcuteListProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_aclstRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAcuteListProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.AcuteList objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAcuteListProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.AcuteList objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAcuteListProviderBase.GetByPatntRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ACLST_PATNT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_patntRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAcuteListProviderBase.GetBySchdlRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ACLST_SCHDL index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_schdlRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAcuteListProviderBase.GetBySpectRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ACLST_SPECT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_spectRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAcuteListProviderBase.GetByProcaRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ACLST_PROCA index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_procaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAcuteListProviderBase.GetByAclstRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_ACUTE_LIST index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_aclstRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.AcuteList"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAcuteListProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.AcuteList})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.AcuteList object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAcuteListProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.AcuteList)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.AcuteList object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.AcuteList object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.AcuteList object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAcuteListProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.AcuteList)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.AcuteList object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.AcuteList object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAeHistoriesProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.AeHistories"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAeHistoriesProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAeHistoriesProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAeHistoriesProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.AeHistories"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAeHistoriesProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAeHistoriesProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAeHistoriesProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAeHistoriesProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAeHistoriesProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAeHistoriesProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAeHistoriesProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAeHistoriesProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_aehstRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAeHistoriesProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.AeHistories objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAeHistoriesProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.AeHistories objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAeHistoriesProviderBase.GetByAeattRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_AEHST_AEATT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_aeattRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAeHistoriesProviderBase.GetByAehstRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_AE_HISTORIES index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_aehstRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.AeHistories"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAeHistoriesProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.AeHistories})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.AeHistories object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAeHistoriesProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.AeHistories)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.AeHistories object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.AeHistories object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.AeHistories object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAeHistoriesProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.AeHistories)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.AeHistories object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.AeHistories object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAddressesProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Addresses"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAddressesProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAddressesProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAddressesProvider.GetByPatntRotypAdtyp(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            
            </summary>
            <param name="transactionManager"></param>
            <param name="_patntRefno"></param>
            <param name="_rotypCode"></param>
            <param name="start"></param>
            <param name="pageLength"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAddressesProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Addresses"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAddressesProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAddressesProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAddressesProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAddressesProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAddressesProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAddressesProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAddressesProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAddressesProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_addssRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAddressesProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Addresses objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAddressesProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Addresses objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAddressesProviderBase.GetByCntryRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_ADDSS_CNTRY key.
            	CNA_ADDSS_CNTRY Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_cntryRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Addresses objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAddressesProviderBase.GetByHdistCode(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_ADDSS_HDIST index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_hdistCode"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAddressesProviderBase.GetByPcode(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_ADDSS_PCODE index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_pcode"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAddressesProviderBase.GetByCountOtcodRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ADDSS_COUNT_OTCOD index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_countOtcodRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAddressesProviderBase.GetByCommuOtcodRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ADDSS_COMMU_OTCOD index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_commuOtcodRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAddressesProviderBase.GetByParshOtcodRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ADDSS_PARSH_OTCOD index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_parshOtcodRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAddressesProviderBase.GetByPuareOtcodRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ADDSS_PUARE_OTCOD index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_puareOtcodRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAddressesProviderBase.GetByPcareOtcodRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ADDSS_PCARE_OTCOD index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_pcareOtcodRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAddressesProviderBase.GetByAddssRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_ADDRESSES index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_addssRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Addresses"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAddressesProviderBase.GetByLine1PcodeAdtypCode(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_ADDRESSES index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_line1"></param>
            <param name="_pcode"></param>
            <param name="_adtypCode"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAddressesProviderBase.GetByAdtypCodePcode(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CLU_ADDSS_ADTYP_PCODE index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_adtypCode"></param>
            <param name="_pcode"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAddressesProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.Addresses})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.Addresses object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAddressesProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.Addresses)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.Addresses object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.Addresses object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.Addresses object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAddressesProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.Addresses)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.Addresses object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.Addresses object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAddressRolesProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.AddressRoles"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAddressRolesProvider.GetPostlByPatntRotyp(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_homelRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAddressRolesProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAddressRolesProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAddressRolesProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.AddressRoles"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAddressRolesProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAddressRolesProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAddressRolesProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAddressRolesProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAddressRolesProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAddressRolesProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAddressRolesProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAddressRolesProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_rolesRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAddressRolesProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.AddressRoles objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAddressRolesProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.AddressRoles objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAddressRolesProviderBase.GetByHomelRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ROLES_HOMEL index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_homelRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAddressRolesProviderBase.GetByHeorgRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ROLES_HEORG index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_heorgRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAddressRolesProviderBase.GetByPurchRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ROLES_PURCH index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_purchRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAddressRolesProviderBase.GetByPatpcRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ROLES_PATPC index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_patpcRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAddressRolesProviderBase.GetByDeprtPatrnRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ROLES_DEPRT_PATRN index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_deprtPatrnRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAddressRolesProviderBase.GetByPerssRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ROLES_PERSS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_perssRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAddressRolesProviderBase.GetByRolesRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_ADDRESS_ROLES index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_rolesRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.AddressRoles"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAddressRolesProviderBase.GetByHeorgRefnoAddssRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_ROLES_HEORG_ADDSS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_heorgRefno"></param>
            <param name="_addssRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAddressRolesProviderBase.GetByHomelRefnoAddssRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_ROLES_HOMEL_ADDSS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_homelRefno"></param>
            <param name="_addssRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAddressRolesProviderBase.GetByPatpcRefnoAddssRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_ROLES_PATPC_ADDSS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_patpcRefno"></param>
            <param name="_addssRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAddressRolesProviderBase.GetByOrdrrRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ROLES_ORDRR index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_ordrrRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAddressRolesProviderBase.GetByProvdRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ROLES_PROVD index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_provdRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAddressRolesProviderBase.GetByAddssRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ROLES_ADDSS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_addssRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAddressRolesProviderBase.GetByAddssRefnoPatntRefnoRotypCode(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Nullable{System.Decimal},System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_ADDRESS_ROLES index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_addssRefno"></param>
            <param name="_patntRefno"></param>
            <param name="_rotypCode"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAddressRolesProviderBase.GetByPatntRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ROLES_PATNT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_patntRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAddressRolesProviderBase.GetByProcaRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ROLES_PROCA index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_procaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAddressRolesProviderBase.GetByPercaRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ROLES_PERCA index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_percaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAddressRolesProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.AddressRoles})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.AddressRoles object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAddressRolesProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.AddressRoles)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.AddressRoles object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.AddressRoles object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.AddressRoles object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAddressRolesProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.AddressRoles)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.AddressRoles object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.AddressRoles object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAeAttendanceRolesProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.AeAttendanceRoles"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAeAttendanceRolesProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAeAttendanceRolesProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAeAttendanceRolesProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.AeAttendanceRoles"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAeAttendanceRolesProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAeAttendanceRolesProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAeAttendanceRolesProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAeAttendanceRolesProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAeAttendanceRolesProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAeAttendanceRolesProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAeAttendanceRolesProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAeAttendanceRolesProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_atrolRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAeAttendanceRolesProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.AeAttendanceRoles objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAeAttendanceRolesProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.AeAttendanceRoles objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAeAttendanceRolesProviderBase.GetByTriagProcaRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ATROL_TRIAG_PROCA index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_triagProcaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAeAttendanceRolesProviderBase.GetByAtrolRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_AE_ATTENDANCE_ROLES index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_atrolRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.AeAttendanceRoles"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAeAttendanceRolesProviderBase.GetByAeattRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ATROL_AEATT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_aeattRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAeAttendanceRolesProviderBase.GetByCurntFlag(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the SAH_ATROL_CURRNT_FLAG index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_curntFlag"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAeAttendanceRolesProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.AeAttendanceRoles})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.AeAttendanceRoles object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAeAttendanceRolesProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.AeAttendanceRoles)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.AeAttendanceRoles object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.AeAttendanceRoles object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.AeAttendanceRoles object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleAeAttendanceRolesProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.AeAttendanceRoles)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.AeAttendanceRoles object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.AeAttendanceRoles object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleExtractsProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Extracts"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleExtractsProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleExtractsProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleExtractsProvider.CheckUserCreateParameter">
            <summary>
            pre iPM APAC 3.0 does not have V_User_Create parameter,  APAC 3 and later, this parameter is required to the call to P_Begin_Sessn_Transaction        
            </summary>
            <returns></returns>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleExtractsProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Extracts"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleExtractsProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleExtractsProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleExtractsProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleExtractsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleExtractsProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleExtractsProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleExtractsProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleExtractsProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_extrcRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleExtractsProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Extracts objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleExtractsProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Extracts objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleExtractsProviderBase.GetByExtrcRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_EXTRACTS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_extrcRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Extracts"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleExtractsProviderBase.GetByExlogRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_EXTRC_EXLOG index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_exlogRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleExtractsProviderBase.GetByPatntRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_EXTRC_PATNT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_patntRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleExtractsProviderBase.GetByA5(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the NZ_EXTRC_A5 index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_a5"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleExtractsProviderBase.GetByA8(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the NZ_EXTRC_A8 index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_a8"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleExtractsProviderBase.GetByStranRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the NZ_EXTRC_STRAN index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_stranRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleExtractsProviderBase.GetByOperationType(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the SAH_EXTRC_OPERATION index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_operationType"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleExtractsProviderBase.GetByXtractDate(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.DateTime},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the SAH_EXTRC_XTRACT_DATE index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_xtractDate"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleExtractsProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.Extracts})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.Extracts object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleExtractsProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.Extracts)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.Extracts object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.Extracts object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.Extracts object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleExtractsProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.Extracts)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.Extracts object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.Extracts object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHealthOrgAccessProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.HealthOrgAccess"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHealthOrgAccessProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHealthOrgAccessProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHealthOrgAccessProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.HealthOrgAccess"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHealthOrgAccessProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHealthOrgAccessProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHealthOrgAccessProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHealthOrgAccessProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHealthOrgAccessProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHealthOrgAccessProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHealthOrgAccessProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHealthOrgAccessProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_heoacRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHealthOrgAccessProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.HealthOrgAccess objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHealthOrgAccessProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.HealthOrgAccess objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHealthOrgAccessProviderBase.GetByHeorgRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_HEOAC_HEORG index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_heorgRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHealthOrgAccessProviderBase.GetByUsersRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_HEOAC_USERS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_usersRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHealthOrgAccessProviderBase.GetByUsgrpRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_HEOAC_USGRP index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_usgrpRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHealthOrgAccessProviderBase.GetByHeoacRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_HEALTH_ORG_ACCESS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_heoacRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.HealthOrgAccess"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHealthOrgAccessProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.HealthOrgAccess})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.HealthOrgAccess object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHealthOrgAccessProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.HealthOrgAccess)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.HealthOrgAccess object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.HealthOrgAccess object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.HealthOrgAccess object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHealthOrgAccessProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.HealthOrgAccess)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.HealthOrgAccess object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.HealthOrgAccess object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHealthOrganisationIdsProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.HealthOrganisationIds"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHealthOrganisationIdsProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHealthOrganisationIdsProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHealthOrganisationIdsProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.HealthOrganisationIds"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHealthOrganisationIdsProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHealthOrganisationIdsProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHealthOrganisationIdsProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHealthOrganisationIdsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHealthOrganisationIdsProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHealthOrganisationIdsProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHealthOrganisationIdsProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHealthOrganisationIdsProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_heoidRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHealthOrganisationIdsProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.HealthOrganisationIds objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHealthOrganisationIdsProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.HealthOrganisationIds objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHealthOrganisationIdsProviderBase.GetByHitypRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_HEOID_HITYP key.
            	CNA_HEOID_HITYP Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_hitypRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.HealthOrganisationIds objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHealthOrganisationIdsProviderBase.GetByIdentifierHeorgRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_HEALTH_ORGANISATION_IDS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_identifier"></param>
            <param name="_heorgRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHealthOrganisationIdsProviderBase.GetByHeorgRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_HEOID_HEORG index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_heorgRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHealthOrganisationIdsProviderBase.GetByHeoidRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_HEALTH_ORGANISATION_IDS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_heoidRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.HealthOrganisationIds"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHealthOrganisationIdsProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.HealthOrganisationIds})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.HealthOrganisationIds object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHealthOrganisationIdsProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.HealthOrganisationIds)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.HealthOrganisationIds object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.HealthOrganisationIds object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.HealthOrganisationIds object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHealthOrganisationIdsProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.HealthOrganisationIds)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.HealthOrganisationIds object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.HealthOrganisationIds object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientTransportationsProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.PatientTransportations"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientTransportationsProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientTransportationsProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientTransportationsProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.PatientTransportations"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientTransportationsProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientTransportationsProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientTransportationsProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientTransportationsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientTransportationsProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientTransportationsProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientTransportationsProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientTransportationsProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_patrnRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientTransportationsProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.PatientTransportations objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientTransportationsProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.PatientTransportations objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientTransportationsProviderBase.GetByToHeorgRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PATRN_TO_HEORG index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_toHeorgRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientTransportationsProviderBase.GetByArrivHeorgRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PATRN_ARRIV_HEORG index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_arrivHeorgRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientTransportationsProviderBase.GetByDeprtHeorgRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PATRN_DEPRT_HEORG index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_deprtHeorgRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientTransportationsProviderBase.GetByFromHeorgRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PATRN_FROM_HEORG index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_fromHeorgRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientTransportationsProviderBase.GetByPatrnRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_PATIENT_TRANSPORTATIONS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_patrnRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.PatientTransportations"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientTransportationsProviderBase.GetBySorceRefnoSorceCode(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the SAH_SORCE_PAT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_sorceRefno"></param>
            <param name="_sorceCode"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientTransportationsProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.PatientTransportations})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.PatientTransportations object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientTransportationsProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.PatientTransportations)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.PatientTransportations object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.PatientTransportations object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.PatientTransportations object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientTransportationsProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.PatientTransportations)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.PatientTransportations object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.PatientTransportations object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePreadmissionsProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Preadmissions"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePreadmissionsProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePreadmissionsProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePreadmissionsProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Preadmissions"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePreadmissionsProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePreadmissionsProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePreadmissionsProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePreadmissionsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePreadmissionsProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePreadmissionsProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePreadmissionsProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePreadmissionsProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_preadRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePreadmissionsProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Preadmissions objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePreadmissionsProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Preadmissions objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePreadmissionsProviderBase.GetByAdcatRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PREAD_ADCAT key.
            	CNA_PREAD_ADCAT Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_adcatRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Preadmissions objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePreadmissionsProviderBase.GetByAdmetRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PREAD_ADMET key.
            	CNA_PREAD_ADMET Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_admetRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Preadmissions objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePreadmissionsProviderBase.GetByAdsorRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PREAD_ADSOR key.
            	CNA_PREAD_ADSOR Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_adsorRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Preadmissions objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePreadmissionsProviderBase.GetByInmgtRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PREAD_INMGT key.
            	CNA_PREAD_INMGT Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_inmgtRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Preadmissions objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePreadmissionsProviderBase.GetByNotadRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PREAD_NOTAD key.
            	CNA_PREAD_NOTAD Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_notadRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Preadmissions objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePreadmissionsProviderBase.GetByPatclRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PREAD_PATCL key.
            	CNA_PREAD_PATCL Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_patclRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Preadmissions objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePreadmissionsProviderBase.GetByReadmRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PREAD_READM key.
            	CNA_PREAD_READM Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_readmRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Preadmissions objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePreadmissionsProviderBase.GetByAdmofRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PREAD_ADMOF index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_admofRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePreadmissionsProviderBase.GetByAdmdcRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PREAD_ADMDC index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_admdcRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePreadmissionsProviderBase.GetByCccccRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PREAD_CCCCC index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_cccccRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePreadmissionsProviderBase.GetBySpbedRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PREAD_SPBED index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_spbedRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePreadmissionsProviderBase.GetByBorbdRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PREAD_BORBD index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_borbdRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePreadmissionsProviderBase.GetByBedplRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PREAD_BEDPL index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_bedplRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePreadmissionsProviderBase.GetByPatntRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PREAD_PATNT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_patntRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePreadmissionsProviderBase.GetByProcaRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PREAD_PROCA index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_procaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePreadmissionsProviderBase.GetByWlistRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PREAD_WLIST index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_wlistRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePreadmissionsProviderBase.GetByXferSpontRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PREAD_XFER_SPONT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_xferSpontRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePreadmissionsProviderBase.GetBySpectRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PREAD_SPECT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_spectRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePreadmissionsProviderBase.GetBySpontRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PREAD_SPONT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_spontRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePreadmissionsProviderBase.GetByPreadRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_PREADMISSIONS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_preadRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Preadmissions"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePreadmissionsProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.Preadmissions})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.Preadmissions object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePreadmissionsProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.Preadmissions)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.Preadmissions object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.Preadmissions object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.Preadmissions object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePreadmissionsProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.Preadmissions)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.Preadmissions object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.Preadmissions object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerIdsProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ProfCarerIds"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerIdsProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerIdsProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerIdsProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ProfCarerIds"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerIdsProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerIdsProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerIdsProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerIdsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerIdsProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerIdsProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerIdsProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerIdsProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_prcaiRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerIdsProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProfCarerIds objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerIdsProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProfCarerIds objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerIdsProviderBase.GetByProcaRefnoCitypRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_PRCAI_PROCA_CITYP index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_procaRefno"></param>
            <param name="_citypRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerIdsProviderBase.GetByProcaRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PRCAI_PROCA index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_procaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerIdsProviderBase.GetByIdentifierProcaRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_PROF_CARER_IDS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_identifier"></param>
            <param name="_procaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerIdsProviderBase.GetByIdentifier(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_PRCAI_IDENT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_identifier"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerIdsProviderBase.GetByPrcaiRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_PROF_CARER_IDS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_prcaiRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ProfCarerIds"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerIdsProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.ProfCarerIds})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.ProfCarerIds object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerIdsProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.ProfCarerIds)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.ProfCarerIds object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.ProfCarerIds object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.ProfCarerIds object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerIdsProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.ProfCarerIds)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.ProfCarerIds object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.ProfCarerIds object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePeriodOfCareProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.PeriodOfCare"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePeriodOfCareProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePeriodOfCareProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePeriodOfCareProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.PeriodOfCare"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePeriodOfCareProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePeriodOfCareProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePeriodOfCareProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePeriodOfCareProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePeriodOfCareProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePeriodOfCareProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePeriodOfCareProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePeriodOfCareProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_pocarRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePeriodOfCareProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.PeriodOfCare objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePeriodOfCareProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.PeriodOfCare objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePeriodOfCareProviderBase.GetByReasnRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_POCAR_REASN key.
            	CNA_POCAR_REASN Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_reasnRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.PeriodOfCare objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePeriodOfCareProviderBase.GetByProcaRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_POCAR_PROCA index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_procaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePeriodOfCareProviderBase.GetByPatntRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_POCAR_PATNT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_patntRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePeriodOfCareProviderBase.GetByPocarRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_PERIOD_OF_CARE index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_pocarRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.PeriodOfCare"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePeriodOfCareProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.PeriodOfCare})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.PeriodOfCare object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePeriodOfCareProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.PeriodOfCare)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.PeriodOfCare object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.PeriodOfCare object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.PeriodOfCare object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePeriodOfCareProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.PeriodOfCare)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.PeriodOfCare object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.PeriodOfCare object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientProfCarersProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.PatientProfCarers"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientProfCarersProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientProfCarersProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientProfCarersProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.PatientProfCarers"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientProfCarersProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientProfCarersProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientProfCarersProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientProfCarersProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientProfCarersProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientProfCarersProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientProfCarersProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientProfCarersProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_patpcRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientProfCarersProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.PatientProfCarers objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientProfCarersProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.PatientProfCarers objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientProfCarersProviderBase.GetByPatntRefnoProcaRefnoHeorgRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_PATIENT_PROF_CARERS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_patntRefno"></param>
            <param name="_procaRefno"></param>
            <param name="_heorgRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientProfCarersProviderBase.GetByProcaRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PATPC_PROCA index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_procaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientProfCarersProviderBase.GetByPatntRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PATPC_PATNT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_patntRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientProfCarersProviderBase.GetByHeorgRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PATPC_HEORG index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_heorgRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientProfCarersProviderBase.GetByPatpcRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_PATIENT_PROF_CARERS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_patpcRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.PatientProfCarers"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientProfCarersProviderBase.GetByPrtypRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the SAH_PRTYP_PATPC index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_prtypRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientProfCarersProviderBase.GetByProcaRefnoPrtypRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_PATPC_PROCA_PRTYP index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_procaRefno"></param>
            <param name="_prtypRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientProfCarersProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.PatientProfCarers})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.PatientProfCarers object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientProfCarersProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.PatientProfCarers)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.PatientProfCarers object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.PatientProfCarers object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.PatientProfCarers object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientProfCarersProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.PatientProfCarers)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.PatientProfCarers object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.PatientProfCarers object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerSpecialtiesProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ProfCarerSpecialties"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerSpecialtiesProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerSpecialtiesProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerSpecialtiesProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ProfCarerSpecialties"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerSpecialtiesProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerSpecialtiesProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerSpecialtiesProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerSpecialtiesProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerSpecialtiesProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerSpecialtiesProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerSpecialtiesProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerSpecialtiesProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_prcasRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerSpecialtiesProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProfCarerSpecialties objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerSpecialtiesProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProfCarerSpecialties objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerSpecialtiesProviderBase.GetByCstypRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PRCAS_CSTYP key.
            	CNA_PRCAS_CSTYP Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_cstypRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.ProfCarerSpecialties objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerSpecialtiesProviderBase.GetByPrcasRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_PROF_CARER_SPECIALTIES index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_prcasRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ProfCarerSpecialties"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerSpecialtiesProviderBase.GetByProcaRefnoSpectRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_PROF_CARER_SPECIALTIES index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_procaRefno"></param>
            <param name="_spectRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerSpecialtiesProviderBase.GetBySpectRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PRCAS_SPECT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_spectRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerSpecialtiesProviderBase.GetByProcaRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PRCAS_PROCA index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_procaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerSpecialtiesProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.ProfCarerSpecialties})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.ProfCarerSpecialties object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerSpecialtiesProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.ProfCarerSpecialties)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.ProfCarerSpecialties object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.ProfCarerSpecialties object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.ProfCarerSpecialties object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleProfCarerSpecialtiesProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.ProfCarerSpecialties)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.ProfCarerSpecialties object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.ProfCarerSpecialties object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientPersonalCarersProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.PatientPersonalCarers"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientPersonalCarersProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientPersonalCarersProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientPersonalCarersProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.PatientPersonalCarers"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientPersonalCarersProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientPersonalCarersProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientPersonalCarersProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientPersonalCarersProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientPersonalCarersProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientPersonalCarersProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientPersonalCarersProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientPersonalCarersProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_papcaRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientPersonalCarersProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.PatientPersonalCarers objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientPersonalCarersProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.PatientPersonalCarers objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientPersonalCarersProviderBase.GetByInforRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PAPCA_INFOR key.
            	CNA_PAPCA_INFOR Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_inforRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.PatientPersonalCarers objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientPersonalCarersProviderBase.GetByLgrspRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PAPCA_LGRSP key.
            	CNA_PAPCA_LGRSP Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_lgrspRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.PatientPersonalCarers objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientPersonalCarersProviderBase.GetByPetypRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PAPCA_PETYP key.
            	CNA_PAPCA_PETYP Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_petypRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.PatientPersonalCarers objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientPersonalCarersProviderBase.GetByReltnRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_PAPCA_RELTN key.
            	CNA_PAPCA_RELTN Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_reltnRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.PatientPersonalCarers objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientPersonalCarersProviderBase.GetByPatntRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PAPCA_PATNT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_patntRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientPersonalCarersProviderBase.GetByPapcaRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_PATIENT_PERSONAL_CARERS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_papcaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.PatientPersonalCarers"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientPersonalCarersProviderBase.GetByPatntRefnoCntctAllowed(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PAPCA_PATNT_CNTCT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_patntRefno"></param>
            <param name="_cntctAllowed"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientPersonalCarersProviderBase.GetByPercaRefnoReltnRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_PAPCA_PERCA_RELTN index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_percaRefno"></param>
            <param name="_reltnRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientPersonalCarersProviderBase.GetByPatntRefnoPercaRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_PATIENT_PERSONAL_CARERS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_patntRefno"></param>
            <param name="_percaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientPersonalCarersProviderBase.GetByPercaRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_PAPCA_PERCA index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_percaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientPersonalCarersProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.PatientPersonalCarers})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.PatientPersonalCarers object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientPersonalCarersProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.PatientPersonalCarers)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.PatientPersonalCarers object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.PatientPersonalCarers object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.PatientPersonalCarers object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OraclePatientPersonalCarersProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.PatientPersonalCarers)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.PatientPersonalCarers object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.PatientPersonalCarers object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHomeLeavesProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.HomeLeaves"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHomeLeavesProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHomeLeavesProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHomeLeavesProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.HomeLeaves"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHomeLeavesProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHomeLeavesProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHomeLeavesProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHomeLeavesProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHomeLeavesProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHomeLeavesProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHomeLeavesProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHomeLeavesProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_homelRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHomeLeavesProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.HomeLeaves objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHomeLeavesProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.HomeLeaves objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHomeLeavesProviderBase.GetByLveocRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_HOMEL_LVEOC key.
            	CNA_HOMEL_LVEOC Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_lveocRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.HomeLeaves objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHomeLeavesProviderBase.GetByLvtypRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CNA_HOMEL_LVTYP key.
            	CNA_HOMEL_LVTYP Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_lvtypRefno"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.HomeLeaves objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHomeLeavesProviderBase.GetByPercaRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_HOMEL_PERCA index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_percaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHomeLeavesProviderBase.GetByPrvspRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_HOMEL_PRVSP index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_prvspRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHomeLeavesProviderBase.GetBySstayRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_HOMEL_SSTAY index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_sstayRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHomeLeavesProviderBase.GetByPatntRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_HOMEL_PATNT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_patntRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHomeLeavesProviderBase.GetByPlgstRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_HOMEL_PLGST index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_plgstRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHomeLeavesProviderBase.GetByHomelRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_HOME_LEAVES index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_homelRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.HomeLeaves"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHomeLeavesProviderBase.GetByPrvsnFlag(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the SAH_HOMEL_PRVSN_FLAG index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_prvsnFlag"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHomeLeavesProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.HomeLeaves})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.HomeLeaves object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHomeLeavesProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.HomeLeaves)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.HomeLeaves object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.HomeLeaves object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.HomeLeaves object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleHomeLeavesProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.HomeLeaves)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.HomeLeaves object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.HomeLeaves object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleOdpcdScrutiniesProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.OdpcdScrutinies"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleOdpcdScrutiniesProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleOdpcdScrutiniesProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleOdpcdScrutiniesProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.OdpcdScrutinies"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleOdpcdScrutiniesProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleOdpcdScrutiniesProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleOdpcdScrutiniesProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleOdpcdScrutiniesProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleOdpcdScrutiniesProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleOdpcdScrutiniesProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleOdpcdScrutiniesProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleOdpcdScrutiniesProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_odpscRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleOdpcdScrutiniesProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.OdpcdScrutinies objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleOdpcdScrutiniesProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.OdpcdScrutinies objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleOdpcdScrutiniesProviderBase.GetByCcsxtCodeCode(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_ODPSC_CCSXT_CODE index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_ccsxtCode"></param>
            <param name="_code"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleOdpcdScrutiniesProviderBase.GetByRulesRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ODPSC_RULES index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_rulesRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleOdpcdScrutiniesProviderBase.GetByOdpscRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_ODPCD_SCRUTINIES index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_odpscRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.OdpcdScrutinies"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleOdpcdScrutiniesProviderBase.GetByCode(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_ODPCS_CODE index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_code"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleOdpcdScrutiniesProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.OdpcdScrutinies})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.OdpcdScrutinies object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleOdpcdScrutiniesProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.OdpcdScrutinies)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.OdpcdScrutinies object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.OdpcdScrutinies object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.OdpcdScrutinies object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleOdpcdScrutiniesProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.OdpcdScrutinies)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.OdpcdScrutinies object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.OdpcdScrutinies object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNotesProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Notes"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNotesProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNotesProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNotesProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Notes"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNotesProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNotesProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNotesProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNotesProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNotesProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNotesProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNotesProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNotesProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_notesRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNotesProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Notes objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNotesProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.Notes objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNotesProviderBase.GetByNotexCode(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_NOTES index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_notexCode"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNotesProviderBase.GetByNotesRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_NOTES index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_notesRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Notes"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNotesProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.Notes})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.Notes object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNotesProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.Notes)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.Notes object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.Notes object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.Notes object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNotesProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.Notes)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.Notes object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.Notes object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNoteRolesProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.NoteRoles"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNoteRolesProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNoteRolesProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNoteRolesProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.NoteRoles"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNoteRolesProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNoteRolesProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNoteRolesProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNoteRolesProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNoteRolesProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNoteRolesProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNoteRolesProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNoteRolesProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_notrlRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNoteRolesProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.NoteRoles objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNoteRolesProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.NoteRoles objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNoteRolesProviderBase.GetBySorceRefnoSorceCode(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_ROLES_SORCE index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_sorceRefno"></param>
            <param name="_sorceCode"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNoteRolesProviderBase.GetByNotesRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_NOTRL_NOTES index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_notesRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNoteRolesProviderBase.GetByNotrlRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_NOTE_ROLES index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_notrlRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.NoteRoles"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNoteRolesProviderBase.GetByNrtypRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the SAH_NOTRL_NRTYP index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_nrtypRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNoteRolesProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.NoteRoles})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.NoteRoles object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNoteRolesProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.NoteRoles)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.NoteRoles object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.NoteRoles object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.NoteRoles object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNoteRolesProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.NoteRoles)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.NoteRoles object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.NoteRoles object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleOdpcdCodesProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.OdpcdCodes"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleOdpcdCodesProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleOdpcdCodesProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleOdpcdCodesProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.OdpcdCodes"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleOdpcdCodesProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleOdpcdCodesProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleOdpcdCodesProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleOdpcdCodesProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleOdpcdCodesProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleOdpcdCodesProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleOdpcdCodesProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleOdpcdCodesProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_odpcdRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleOdpcdCodesProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.OdpcdCodes objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleOdpcdCodesProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.OdpcdCodes objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleOdpcdCodesProviderBase.GetByDescriptionCcsxtCode(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_ODPCD_DESCRIPTION_CCSXT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_description"></param>
            <param name="_ccsxtCode"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleOdpcdCodesProviderBase.GetByParntRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ODPCD_PARNT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_parntRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleOdpcdCodesProviderBase.GetByCitemRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ODPCD_CITEM index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_citemRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleOdpcdCodesProviderBase.GetByOdpcdRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_ODPCD_CODES index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_odpcdRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.OdpcdCodes"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleOdpcdCodesProviderBase.GetByCodeCcsxtCode(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CK_ODPCD_CODES index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_code"></param>
            <param name="_ccsxtCode"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleOdpcdCodesProviderBase.GetByCcsxtCode(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the SAH_ODPCD_CCSXT index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_ccsxtCode"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleOdpcdCodesProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.OdpcdCodes})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.OdpcdCodes object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleOdpcdCodesProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.OdpcdCodes)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.OdpcdCodes object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.OdpcdCodes object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.OdpcdCodes object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleOdpcdCodesProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.OdpcdCodes)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.OdpcdCodes object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.OdpcdCodes object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleWorkStationsProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.WorkStations"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleWorkStationsProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleWorkStationsProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleWorkStationsProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.WorkStations"/> entity.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleWorkStationsProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleWorkStationsProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleWorkStationsProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleWorkStationsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleWorkStationsProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleWorkStationsProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleWorkStationsProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleWorkStationsProviderBase.Delete(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_wkstnRefno">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleWorkStationsProviderBase.GetAll(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.WorkStations objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleWorkStationsProviderBase.GetPaged(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of iSOFT.ANZ.PatientManagerService.Entities.WorkStations objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleWorkStationsProviderBase.GetById(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the UK_WKSTN_ID index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.WorkStations"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleWorkStationsProviderBase.GetByHeorgRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_WKSTN_HEORG index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_heorgRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleWorkStationsProviderBase.GetByWkstnRefno(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CPK_WORK_STATIONS index.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="_wkstnRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.WorkStations"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleWorkStationsProviderBase.BulkInsert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.WorkStations})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.WorkStations object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleWorkStationsProviderBase.Insert(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.WorkStations)">
            <summary>
            	Inserts a iSOFT.ANZ.PatientManagerService.Entities.WorkStations object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.WorkStations object to insert.</param>
            <remarks>
            	After inserting into the datasource, the iSOFT.ANZ.PatientManagerService.Entities.WorkStations object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleWorkStationsProviderBase.Update(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,iSOFT.ANZ.PatientManagerService.Entities.WorkStations)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> object</param>
            <param name="entity">iSOFT.ANZ.PatientManagerService.Entities.WorkStations object to update.</param>
            <remarks>
            	After updating the datasource, the iSOFT.ANZ.PatientManagerService.Entities.WorkStations object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider">
            <summary>
            This class is the Sql implementation of the NetTiersProvider.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider"/> class.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes the provider.
            </summary>
            <param name="name">The friendly name of the provider.</param>
            <param name="config">A collection of the name/value pairs representing the provider-specific attributes specified in the configuration for this provider.</param>
            <exception cref="T:System.ArgumentNullException">The name of the provider is null.</exception>
            <exception cref="T:System.InvalidOperationException">An attempt is made to call <see cref="M:System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)"></see> on a provider after the provider has already been initialized.</exception>
            <exception cref="T:System.ArgumentException">The name of the provider has a length of zero.</exception>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.CreateTransaction">
            <summary>
            Creates a new <c cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager"/> instance from the current datasource.
            </summary>
            <returns></returns>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.UseStoredProcedure">
            <summary>
            Gets a value indicating whether to use stored procedure or not.
            </summary>
            <value>
            	<c>true</c> if this repository use stored procedures; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.IsTransactionSupported">
            <summary>
             Indicates if the current <c cref="T:iSOFT.ANZ.PatientManagerService.Data.Bases.NetTiersProvider"/> implementation supports Transacton.
            </summary>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.ReferenceValuesProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ReferenceValues"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OracleReferenceValuesProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OracleReferenceValuesProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.ProfCarersProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ProfCarers"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OracleProfCarersProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OracleProfCarersProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.ReferenceValueLinksProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueLinks"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OracleReferenceValueLinksProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OracleReferenceValueLinksProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.ActiveInpatientsProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ActiveInpatients"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OracleActiveInpatientsProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OracleActiveInpatientsProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.PatientsProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Patients"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OraclePatientsProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OraclePatientsProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.ReferenceValueIdsProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueIds"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OracleReferenceValueIdsProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OracleReferenceValueIdsProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.ReferenceValueDependanciesProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueDependancies"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OracleReferenceValueDependanciesProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OracleReferenceValueDependanciesProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.ProfCarerSpecialtiesProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ProfCarerSpecialties"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OracleProfCarerSpecialtiesProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OracleProfCarerSpecialtiesProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.ReferralsProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Referrals"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OracleReferralsProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OracleReferralsProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.PersonalCarersProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.PersonalCarers"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OraclePersonalCarersProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OraclePersonalCarersProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.PeriodOfCareProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.PeriodOfCare"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OraclePeriodOfCareProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OraclePeriodOfCareProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.PatientProfCarersProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.PatientProfCarers"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OraclePatientProfCarersProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OraclePatientProfCarersProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.ProfCarerStaffTeamsProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ProfCarerStaffTeams"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OracleProfCarerStaffTeamsProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OracleProfCarerStaffTeamsProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.RulesProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Rules"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OracleRulesProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OracleRulesProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.UsersProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Users"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OracleUsersProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OracleUsersProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.SystemProfilesProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.SystemProfiles"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OracleSystemProfilesProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OracleSystemProfilesProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.UserWorkStationsProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.UserWorkStations"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OracleUserWorkStationsProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OracleUserWorkStationsProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.UserRolesProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.UserRoles"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OracleUserRolesProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OracleUserRolesProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.SpecialtiesProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Specialties"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OracleSpecialtiesProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OracleSpecialtiesProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.StaffTeamsProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.StaffTeams"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OracleStaffTeamsProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OracleStaffTeamsProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.PatientTransportationsProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.PatientTransportations"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OraclePatientTransportationsProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OraclePatientTransportationsProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.ServicePointsProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ServicePoints"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OracleServicePointsProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OracleServicePointsProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.ServicePointBedsProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ServicePointBeds"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OracleServicePointBedsProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OracleServicePointBedsProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.ServicePointProfilesProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ServicePointProfiles"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OracleServicePointProfilesProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OracleServicePointProfilesProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.ServicePointSessionsProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ServicePointSessions"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OracleServicePointSessionsProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OracleServicePointSessionsProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.ServicePointSuspensionsProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ServicePointSuspensions"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OracleServicePointSuspensionsProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OracleServicePointSuspensionsProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.HealthOrganisationsProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.HealthOrganisations"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OracleHealthOrganisationsProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OracleHealthOrganisationsProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.PatientPersonalCarersProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.PatientPersonalCarers"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OraclePatientPersonalCarersProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OraclePatientPersonalCarersProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.BedsProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Beds"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OracleBedsProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OracleBedsProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.ProfCarerEpisodesProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ProfCarerEpisodes"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OracleProfCarerEpisodesProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OracleProfCarerEpisodesProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.BedProfilesProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.BedProfiles"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OracleBedProfilesProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OracleBedProfilesProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.ApplicationRolesProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ApplicationRoles"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OracleApplicationRolesProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OracleApplicationRolesProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.ProviderSpellsProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ProviderSpells"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OracleProviderSpellsProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OracleProviderSpellsProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.AddressesProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Addresses"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OracleAddressesProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OracleAddressesProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.AeHistoriesProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.AeHistories"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OracleAeHistoriesProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OracleAeHistoriesProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.BedStaysProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.BedStays"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OracleBedStaysProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OracleBedStaysProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.DependantResourcesProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.DependantResources"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OracleDependantResourcesProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OracleDependantResourcesProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.ExtractsProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Extracts"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OracleExtractsProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OracleExtractsProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OdpcdScrutiniesProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.OdpcdScrutinies"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OracleOdpcdScrutiniesProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OracleOdpcdScrutiniesProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.WaitingListEntriesProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.WaitingListEntries"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OracleWaitingListEntriesProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OracleWaitingListEntriesProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.AdmissionOffersProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.AdmissionOffers"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OracleAdmissionOffersProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OracleAdmissionOffersProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.AeAttendancesProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.AeAttendances"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OracleAeAttendancesProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OracleAeAttendancesProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.AddressRolesProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.AddressRoles"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OracleAddressRolesProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OracleAddressRolesProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.AeAttendanceRolesProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.AeAttendanceRoles"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OracleAeAttendanceRolesProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OracleAeAttendanceRolesProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.TheatreEventsProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TheatreEvents"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OracleTheatreEventsProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OracleTheatreEventsProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OdpcdCodesProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.OdpcdCodes"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OracleOdpcdCodesProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OracleOdpcdCodesProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.AcuteListProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.AcuteList"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OracleAcuteListProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OracleAcuteListProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.ServicePointStaysProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ServicePointStays"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OracleServicePointStaysProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OracleServicePointStaysProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.HealthOrgAccessProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.HealthOrgAccess"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OracleHealthOrgAccessProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OracleHealthOrgAccessProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.SchedulesProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Schedules"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OracleSchedulesProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OracleSchedulesProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.AeStaysProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.AeStays"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OracleAeStaysProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OracleAeStaysProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.HomeLeavesProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.HomeLeaves"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OracleHomeLeavesProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OracleHomeLeavesProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.WorkStationsProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.WorkStations"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OracleWorkStationsProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OracleWorkStationsProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.PreadmissionsProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Preadmissions"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OraclePreadmissionsProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OraclePreadmissionsProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.NoteRolesProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.NoteRoles"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OracleNoteRolesProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OracleNoteRolesProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.NotesProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Notes"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OracleNotesProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OracleNotesProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.DiagnosisProceduresProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.DiagnosisProcedures"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OracleDiagnosisProceduresProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OracleDiagnosisProceduresProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.SpecialtyIdsProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.SpecialtyIds"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OracleSpecialtyIdsProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OracleSpecialtyIdsProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.HealthOrganisationIdsProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.HealthOrganisationIds"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OracleHealthOrganisationIdsProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OracleHealthOrganisationIdsProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.ProfCarerIdsProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ProfCarerIds"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OracleProfCarerIdsProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OracleProfCarerIdsProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.HiedischargesummariesProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Hiedischargesummaries"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OracleHiedischargesummariesProvider">
            <summary>
            Gets the current <c cref="P:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.OracleHiedischargesummariesProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.ExecuteNonQuery(System.String,System.Object[])">
            <summary>
            Executes the non query.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.ExecuteNonQuery(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.ExecuteNonQuery(System.Data.Common.DbCommand)">
            <summary>
            Executes the non query.
            </summary>
            <param name="command">The command wrapper.</param>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.ExecuteNonQuery(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="command">The command wrapper.</param>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.ExecuteNonQuery(System.Data.CommandType,System.String)">
            <summary>
            Executes the non query.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.ExecuteNonQuery(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.ExecuteReader(System.String,System.Object[])">
            <summary>
            Executes the reader.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.ExecuteReader(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.ExecuteReader(System.Data.Common.DbCommand)">
            <summary>
            Executes the reader.
            </summary>
            <param name="command">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.ExecuteReader(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="command">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.ExecuteReader(System.Data.CommandType,System.String)">
            <summary>
            Executes the reader.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.ExecuteReader(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.ExecuteDataSet(System.String,System.Object[])">
            <summary>
            Executes the data set.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.ExecuteDataSet(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.ExecuteDataSet(System.Data.Common.DbCommand)">
            <summary>
            Executes the data set.
            </summary>
            <param name="command">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.ExecuteDataSet(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="command">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.ExecuteDataSet(System.Data.CommandType,System.String)">
            <summary>
            Executes the data set.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.ExecuteDataSet(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.ExecuteScalar(System.String,System.Object[])">
            <summary>
            Executes the scalar.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.ExecuteScalar(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.ExecuteScalar(System.Data.Common.DbCommand)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="command">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.ExecuteScalar(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="command">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.ExecuteScalar(System.Data.CommandType,System.String)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Data.OracleClient.OracleNetTiersProvider.ExecuteScalar(iSOFT.ANZ.PatientManagerService.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
    </members>
</doc>
