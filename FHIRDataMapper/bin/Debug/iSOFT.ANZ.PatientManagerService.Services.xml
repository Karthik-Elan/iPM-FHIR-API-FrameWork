<?xml version="1.0"?>
<doc>
    <assembly>
        <name>iSOFT.ANZ.PatientManagerService.Services</name>
    </assembly>
    <members>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.HiedischargesummariesService">
            <summary>
            An component type implementation of the 'HIEDISCHARGESUMMARIES' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HiedischargesummariesService.#ctor">
            <summary>
            Initializes a new instance of the HiedischargesummariesService class.
            </summary>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.HiedischargesummariesServiceBase">
            <summary>
             An object representation of the 'HIEDISCHARGESUMMARIES' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Hiedischargesummaries.cs file instead.
             All custom implementations should be done in the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Hiedischargesummaries"/> class.
             </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HiedischargesummariesServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Hiedischargesummaries"/> instance .
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HiedischargesummariesServiceBase.CreateHiedischargesummaries(System.Decimal,System.String,System.String,System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Hiedischargesummaries"/> instance.
            </summary>
            <param name="_patntRefno"></param>
            <param name="_documentid"></param>
            <param name="_hpio"></param>
            <param name="_ownerHeorgRefno"></param>
            <param name="_archvFlag"></param>
            <param name="_stranRefno"></param>
            <param name="_externalKey"></param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.HiedischargesummariesServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HiedischargesummariesServiceBase.Get(iSOFT.ANZ.PatientManagerService.Entities.HiedischargesummariesKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HiedischargesummariesServiceBase.GetByHiedsRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key PK_HIEDISCHARGESUMMARIES index.
            </summary>
            <param name="_hiedsRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Hiedischargesummaries"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HiedischargesummariesServiceBase.GetByHiedsRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key PK_HIEDISCHARGESUMMARIES index.
            </summary>
            <param name="_hiedsRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Hiedischargesummaries"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HiedischargesummariesServiceBase.GetByPatntRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_HIEDS_PATNT index.
            </summary>
            <param name="_patntRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HiedischargesummariesServiceBase.GetByPatntRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_HIEDS_PATNT index.
            </summary>
            <param name="_patntRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HiedischargesummariesServiceBase.GetByHpio(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_HIEDS_HPIO index.
            </summary>
            <param name="_hpio"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HiedischargesummariesServiceBase.GetByHpio(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_HIEDS_HPIO index.
            </summary>
            <param name="_hpio"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HiedischargesummariesServiceBase.GetByDocumentid(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_HIEDS_DOCUMENTID index.
            </summary>
            <param name="_documentid"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HiedischargesummariesServiceBase.GetByDocumentid(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_HIEDS_DOCUMENTID index.
            </summary>
            <param name="_documentid"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HiedischargesummariesServiceBase.GetByDocumentidHpio(System.String,System.String)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_HIEDS_DOCID_HPIO index.
            </summary>
            <param name="_documentid"></param>
            <param name="_hpio"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HiedischargesummariesServiceBase.GetByDocumentidHpio(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_HIEDS_DOCID_HPIO index.
            </summary>
            <param name="_documentid"></param>
            <param name="_hpio"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HiedischargesummariesServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Hiedischargesummaries" /> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HiedischargesummariesServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Hiedischargesummaries" /> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> </returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HiedischargesummariesServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Hiedischargesummaries</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HiedischargesummariesServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Hiedischargesummaries</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HiedischargesummariesServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Hiedischargesummaries</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HiedischargesummariesServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HiedischargesummariesServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.Hiedischargesummaries)">
            <summary>
            public virtual method that Inserts a Hiedischargesummaries object into the datasource using a transaction.
            </summary>
            <param name="entity">Hiedischargesummaries object to Insert.</param>
            <remarks>After Inserting into the datasource, the Hiedischargesummaries object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Hiedischargesummaries entity = new Hiedischargesummaries();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	HiedischargesummariesService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HiedischargesummariesServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.Hiedischargesummaries})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>Hiedischargesummaries</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Hiedischargesummaries</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Hiedischargesummaries.
             <code><![CDATA[
             TList<Hiedischargesummaries> list = new TList<Hiedischargesummaries>();
             Hiedischargesummaries entity = new Hiedischargesummaries();
             entity.StringProperty = "foo";
             Hiedischargesummaries entity2 = new Hiedischargesummaries();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	HiedischargesummariesService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HiedischargesummariesServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.Hiedischargesummaries)">
            <summary>
            public virtual method that Updates a Hiedischargesummaries object into the datasource using a transaction.
            </summary>
            <param name="entity">Hiedischargesummaries object to Update.</param>
            <remarks>After Updateing into the datasource, the Hiedischargesummaries object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Hiedischargesummaries entity = HiedischargesummariesService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	HiedischargesummariesService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HiedischargesummariesServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.Hiedischargesummaries})">
             <summary>
             public virtual method that Updates rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>Hiedischargesummaries</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Hiedischargesummaries</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Hiedischargesummaries.
             <code><![CDATA[
             TList<Hiedischargesummaries> list = new TList<Hiedischargesummaries>();
             Hiedischargesummaries entity = new Hiedischargesummaries();
             entity.StringProperty = "foo";
             Hiedischargesummaries entity2 = new Hiedischargesummaries();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	HiedischargesummariesService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HiedischargesummariesServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.Hiedischargesummaries)">
            <summary>
            public virtual method that Deletes a Hiedischargesummaries object into the datasource using a transaction.
            </summary>
            <param name="entity">Hiedischargesummaries object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Hiedischargesummaries object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Hiedischargesummaries entity = HiedischargesummariesService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	HiedischargesummariesService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HiedischargesummariesServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.Hiedischargesummaries})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>Hiedischargesummaries</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Hiedischargesummaries</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Hiedischargesummaries.
             <code><![CDATA[
             TList<Hiedischargesummaries> list = new TList<Hiedischargesummaries>();
             Hiedischargesummaries entity = new Hiedischargesummaries();
             entity.StringProperty = "foo";
             Hiedischargesummaries entity2 = new Hiedischargesummaries();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	HiedischargesummariesService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HiedischargesummariesServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.HiedischargesummariesKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HiedischargesummariesServiceBase.Delete(System.Decimal)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Decimal _hiedsRefno
            </summary>
            <param name="_hiedsRefno">Hiedischargesummaries pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.ReferenceValuesService">
            <summary>
            An component type implementation of the 'REFERENCE_VALUES' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValuesService.#ctor">
            <summary>
            Initializes a new instance of the ReferenceValuesService class.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValuesService.GetByRfvdmCodeRfvliCode(System.String,System.String)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_REFERENCE_VALUES index.
            </summary>
            <param name="_mainCode"></param>
            <param name="_rfvdmCode"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValuesService.GetByRfvdmByRitypAltId(System.String,System.String)">
            <summary>
            This method wrap the 'ReferenceValueView' stored procedure. 
            </summary>
            <remark></remark>
            <returns>A <see cref="T:System.Data.IDataReader"/> instance.</returns>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.ReferenceValuesServiceBase">
            <summary>
             An object representation of the 'REFERENCE_VALUES' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ReferenceValues.cs file instead.
             All custom implementations should be done in the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ReferenceValues"/> class.
             </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValuesServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ReferenceValues"/> instance .
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValuesServiceBase.CreateReferenceValues(System.Decimal,System.String,System.String,System.String,System.Nullable{System.Decimal},System.String,System.String,System.Decimal,System.String,System.String,System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ReferenceValues"/> instance.
            </summary>
            <param name="_rfvalRefno"></param>
            <param name="_rfvdmCode"></param>
            <param name="_description"></param>
            <param name="_mainCode"></param>
            <param name="_parntRefno"></param>
            <param name="_smodeValue"></param>
            <param name="_defaultValue"></param>
            <param name="_sortOrder"></param>
            <param name="_selectValue"></param>
            <param name="_displayValue"></param>
            <param name="_rftypCode"></param>
            <param name="_archvFlag"></param>
            <param name="_stranRefno"></param>
            <param name="_priorPointer"></param>
            <param name="_externalKey"></param>
            <param name="_startDttm"></param>
            <param name="_endDttm"></param>
            <param name="_lowValue"></param>
            <param name="_highValue"></param>
            <param name="_processModuleId"></param>
            <param name="_ownerHeorgRefno"></param>
            <param name="_sclvlRefno"></param>
            <param name="_synCode"></param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.ReferenceValuesServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValuesServiceBase.Get(iSOFT.ANZ.PatientManagerService.Entities.ReferenceValuesKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValuesServiceBase.GetByParntRefnoRfvdmCode(System.Nullable{System.Decimal},System.String)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_RFVAL_PARNT_RFVDM index.
            </summary>
            <param name="_parntRefno"></param>
            <param name="_rfvdmCode"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValuesServiceBase.GetByParntRefnoRfvdmCode(System.Nullable{System.Decimal},System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_RFVAL_PARNT_RFVDM index.
            </summary>
            <param name="_parntRefno"></param>
            <param name="_rfvdmCode"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValuesServiceBase.GetByMainCodeRfvdmCode(System.String,System.String)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_REFERENCE_VALUES index.
            </summary>
            <param name="_mainCode"></param>
            <param name="_rfvdmCode"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValuesServiceBase.GetByMainCodeRfvdmCode(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_REFERENCE_VALUES index.
            </summary>
            <param name="_mainCode"></param>
            <param name="_rfvdmCode"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValuesServiceBase.GetByRfvalRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_REFERENCE_VALUES index.
            </summary>
            <param name="_rfvalRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ReferenceValues"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValuesServiceBase.GetByRfvalRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_REFERENCE_VALUES index.
            </summary>
            <param name="_rfvalRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ReferenceValues"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValuesServiceBase.GetByMainCode(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_RFVAL_MAIN_CODE index.
            </summary>
            <param name="_mainCode"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValuesServiceBase.GetByMainCode(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_RFVAL_MAIN_CODE index.
            </summary>
            <param name="_mainCode"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValuesServiceBase.GetByRfvdmCodeSelectValue(System.String,System.String)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_RFVAL_RFVDM index.
            </summary>
            <param name="_rfvdmCode"></param>
            <param name="_selectValue"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValuesServiceBase.GetByRfvdmCodeSelectValue(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_RFVAL_RFVDM index.
            </summary>
            <param name="_rfvdmCode"></param>
            <param name="_selectValue"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValuesServiceBase.GetByParntRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_RFVAL_PARNT index.
            </summary>
            <param name="_parntRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValuesServiceBase.GetByParntRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_RFVAL_PARNT index.
            </summary>
            <param name="_parntRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValuesServiceBase.GetBySortOrderDescription(System.Decimal,System.String)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_RFVAL_SORT index.
            </summary>
            <param name="_sortOrder"></param>
            <param name="_description"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValuesServiceBase.GetBySortOrderDescription(System.Decimal,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_RFVAL_SORT index.
            </summary>
            <param name="_sortOrder"></param>
            <param name="_description"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValuesServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ReferenceValues" /> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValuesServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ReferenceValues" /> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> </returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValuesServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ReferenceValues</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValuesServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ReferenceValues</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValuesServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ReferenceValues</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValuesServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValuesServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.ReferenceValues)">
            <summary>
            public virtual method that Inserts a ReferenceValues object into the datasource using a transaction.
            </summary>
            <param name="entity">ReferenceValues object to Insert.</param>
            <remarks>After Inserting into the datasource, the ReferenceValues object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            ReferenceValues entity = new ReferenceValues();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ReferenceValuesService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValuesServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.ReferenceValues})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>ReferenceValues</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>ReferenceValues</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of ReferenceValues.
             <code><![CDATA[
             TList<ReferenceValues> list = new TList<ReferenceValues>();
             ReferenceValues entity = new ReferenceValues();
             entity.StringProperty = "foo";
             ReferenceValues entity2 = new ReferenceValues();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ReferenceValuesService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValuesServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.ReferenceValues)">
            <summary>
            public virtual method that Updates a ReferenceValues object into the datasource using a transaction.
            </summary>
            <param name="entity">ReferenceValues object to Update.</param>
            <remarks>After Updateing into the datasource, the ReferenceValues object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            ReferenceValues entity = ReferenceValuesService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ReferenceValuesService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValuesServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.ReferenceValues})">
             <summary>
             public virtual method that Updates rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>ReferenceValues</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>ReferenceValues</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of ReferenceValues.
             <code><![CDATA[
             TList<ReferenceValues> list = new TList<ReferenceValues>();
             ReferenceValues entity = new ReferenceValues();
             entity.StringProperty = "foo";
             ReferenceValues entity2 = new ReferenceValues();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ReferenceValuesService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValuesServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.ReferenceValues)">
            <summary>
            public virtual method that Deletes a ReferenceValues object into the datasource using a transaction.
            </summary>
            <param name="entity">ReferenceValues object to Delete.</param>
            <remarks>After Deleteing into the datasource, the ReferenceValues object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            ReferenceValues entity = ReferenceValuesService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ReferenceValuesService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValuesServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.ReferenceValues})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>ReferenceValues</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>ReferenceValues</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of ReferenceValues.
             <code><![CDATA[
             TList<ReferenceValues> list = new TList<ReferenceValues>();
             ReferenceValues entity = new ReferenceValues();
             entity.StringProperty = "foo";
             ReferenceValues entity2 = new ReferenceValues();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ReferenceValuesService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValuesServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.ReferenceValuesKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValuesServiceBase.Delete(System.Decimal)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Decimal _rfvalRefno
            </summary>
            <param name="_rfvalRefno">ReferenceValues pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.HealthOrganisationsService">
            <summary>
            An component type implementation of the 'HEALTH_ORGANISATIONS' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HealthOrganisationsService.#ctor">
            <summary>
            Initializes a new instance of the HealthOrganisationsService class.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HealthOrganisationsService.GetByParntHitypCodeHotypCodeFiltered(System.Nullable{System.Decimal},System.String,System.String)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_HEORG_PARNT index.
            </summary>
            <param name="_parntRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HealthOrganisationsService.GetBySearch(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_HEORG_DESCRIPTION index.
            </summary>
            <param name="_description"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.HealthOrganisationsServiceBase">
            <summary>
             An object representation of the 'HEALTH_ORGANISATIONS' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the HealthOrganisations.cs file instead.
             All custom implementations should be done in the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.HealthOrganisations"/> class.
             </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HealthOrganisationsServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.HealthOrganisations"/> instance .
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HealthOrganisationsServiceBase.CreateHealthOrganisations(System.Decimal,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.String,System.Nullable{System.Decimal},System.DateTime,System.Nullable{System.DateTime},System.Decimal,System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.String,System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.String,System.String,System.String,System.Nullable{System.Decimal},System.String,System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.HealthOrganisations"/> instance.
            </summary>
            <param name="_heorgRefno"></param>
            <param name="_hotypRefno"></param>
            <param name="_casltRefno"></param>
            <param name="_mainIdent"></param>
            <param name="_description"></param>
            <param name="_parntRefno"></param>
            <param name="_startDttm"></param>
            <param name="_endDttm"></param>
            <param name="_ranking"></param>
            <param name="_localFlag"></param>
            <param name="_archvFlag"></param>
            <param name="_stranRefno"></param>
            <param name="_priorPointer"></param>
            <param name="_externalKey"></param>
            <param name="_pdtypRefno"></param>
            <param name="_holvlRefno"></param>
            <param name="_ownerHeorgRefno"></param>
            <param name="_companyCode"></param>
            <param name="_billingCentre"></param>
            <param name="_sclvlRefno"></param>
            <param name="_synCode"></param>
            <param name="_aclevRefno"></param>
            <param name="_pasidSeed"></param>
            <param name="_pasidFormat"></param>
            <param name="_pasIdSuffix"></param>
            <param name="_tzoneRefno"></param>
            <param name="_pasIdManual"></param>
            <param name="_dummyFlag"></param>
            <param name="_eligAreaIncenFlag"></param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.HealthOrganisationsServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HealthOrganisationsServiceBase.GetByCasltRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_HEORG_CASLT key.
            	CNA_HEORG_CASLT Description: 
            </summary>
            <param name="_casltRefno"></param>
            <returns>Returns a generic collection of HealthOrganisations objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HealthOrganisationsServiceBase.GetByCasltRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_HEORG_CASLT key.
            	CNA_HEORG_CASLT Description: 
            </summary>
            <param name="_casltRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>HealthOrganisations</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HealthOrganisationsServiceBase.GetByHotypRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_HEORG_HOTYP key.
            	CNA_HEORG_HOTYP Description: 
            </summary>
            <param name="_hotypRefno"></param>
            <returns>Returns a generic collection of HealthOrganisations objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HealthOrganisationsServiceBase.GetByHotypRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_HEORG_HOTYP key.
            	CNA_HEORG_HOTYP Description: 
            </summary>
            <param name="_hotypRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>HealthOrganisations</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HealthOrganisationsServiceBase.Get(iSOFT.ANZ.PatientManagerService.Entities.HealthOrganisationsKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HealthOrganisationsServiceBase.GetByDescription(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_HEORG_DESCRIPTION index.
            </summary>
            <param name="_description"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HealthOrganisationsServiceBase.GetByDescription(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_HEORG_DESCRIPTION index.
            </summary>
            <param name="_description"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HealthOrganisationsServiceBase.GetByParntRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_HEORG_PARNT index.
            </summary>
            <param name="_parntRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HealthOrganisationsServiceBase.GetByParntRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_HEORG_PARNT index.
            </summary>
            <param name="_parntRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HealthOrganisationsServiceBase.GetByHeorgRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_HEALTH_ORGANISATIONS index.
            </summary>
            <param name="_heorgRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.HealthOrganisations"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HealthOrganisationsServiceBase.GetByHeorgRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_HEALTH_ORGANISATIONS index.
            </summary>
            <param name="_heorgRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.HealthOrganisations"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HealthOrganisationsServiceBase.GetByHotypRefnoLocalFlag(System.Nullable{System.Decimal},System.String)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_HEORG_HOTYP_LOCAL index.
            </summary>
            <param name="_hotypRefno"></param>
            <param name="_localFlag"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HealthOrganisationsServiceBase.GetByHotypRefnoLocalFlag(System.Nullable{System.Decimal},System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_HEORG_HOTYP_LOCAL index.
            </summary>
            <param name="_hotypRefno"></param>
            <param name="_localFlag"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HealthOrganisationsServiceBase.GetByMainIdent(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_HEORG_MAIN_IDENT index.
            </summary>
            <param name="_mainIdent"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HealthOrganisationsServiceBase.GetByMainIdent(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_HEORG_MAIN_IDENT index.
            </summary>
            <param name="_mainIdent"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HealthOrganisationsServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.HealthOrganisations" /> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HealthOrganisationsServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.HealthOrganisations" /> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> </returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HealthOrganisationsServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>HealthOrganisations</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HealthOrganisationsServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>HealthOrganisations</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HealthOrganisationsServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>HealthOrganisations</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HealthOrganisationsServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HealthOrganisationsServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.HealthOrganisations)">
            <summary>
            public virtual method that Inserts a HealthOrganisations object into the datasource using a transaction.
            </summary>
            <param name="entity">HealthOrganisations object to Insert.</param>
            <remarks>After Inserting into the datasource, the HealthOrganisations object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            HealthOrganisations entity = new HealthOrganisations();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	HealthOrganisationsService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HealthOrganisationsServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.HealthOrganisations})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>HealthOrganisations</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>HealthOrganisations</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of HealthOrganisations.
             <code><![CDATA[
             TList<HealthOrganisations> list = new TList<HealthOrganisations>();
             HealthOrganisations entity = new HealthOrganisations();
             entity.StringProperty = "foo";
             HealthOrganisations entity2 = new HealthOrganisations();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	HealthOrganisationsService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HealthOrganisationsServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.HealthOrganisations)">
            <summary>
            public virtual method that Updates a HealthOrganisations object into the datasource using a transaction.
            </summary>
            <param name="entity">HealthOrganisations object to Update.</param>
            <remarks>After Updateing into the datasource, the HealthOrganisations object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            HealthOrganisations entity = HealthOrganisationsService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	HealthOrganisationsService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HealthOrganisationsServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.HealthOrganisations})">
             <summary>
             public virtual method that Updates rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>HealthOrganisations</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>HealthOrganisations</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of HealthOrganisations.
             <code><![CDATA[
             TList<HealthOrganisations> list = new TList<HealthOrganisations>();
             HealthOrganisations entity = new HealthOrganisations();
             entity.StringProperty = "foo";
             HealthOrganisations entity2 = new HealthOrganisations();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	HealthOrganisationsService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HealthOrganisationsServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.HealthOrganisations)">
            <summary>
            public virtual method that Deletes a HealthOrganisations object into the datasource using a transaction.
            </summary>
            <param name="entity">HealthOrganisations object to Delete.</param>
            <remarks>After Deleteing into the datasource, the HealthOrganisations object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            HealthOrganisations entity = HealthOrganisationsService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	HealthOrganisationsService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HealthOrganisationsServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.HealthOrganisations})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>HealthOrganisations</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>HealthOrganisations</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of HealthOrganisations.
             <code><![CDATA[
             TList<HealthOrganisations> list = new TList<HealthOrganisations>();
             HealthOrganisations entity = new HealthOrganisations();
             entity.StringProperty = "foo";
             HealthOrganisations entity2 = new HealthOrganisations();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	HealthOrganisationsService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HealthOrganisationsServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.HealthOrganisationsKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HealthOrganisationsServiceBase.Delete(System.Decimal)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Decimal _heorgRefno
            </summary>
            <param name="_heorgRefno">HealthOrganisations pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.ProfCarersService">
            <summary>
            An component type implementation of the 'PROF_CARERS' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarersService.#ctor">
            <summary>
            Initializes a new instance of the ProfCarersService class.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarersService.GetByRoleMainCode(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource with the Carer Role Reference Value Dependancies linked to Reference Value with RITYP Main code.
            </summary>
            <param name="_ritypCode"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarersService.GetByRoleIdentifierType(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource with the Carer Role Reference Value Dependancies linked to Reference Value with RITYP code.
            </summary>
            <param name="_ritypCode"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarersService.GetBySpectRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource with the Carer Role Reference Value Dependancies linked to Reference Value with RITYP code.
            </summary>
            <param name="_ritypCode"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.ProfCarersServiceBase">
            <summary>
             An object representation of the 'PROF_CARERS' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ProfCarers.cs file instead.
             All custom implementations should be done in the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ProfCarers"/> class.
             </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarersServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ProfCarers"/> instance .
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarersServiceBase.CreateProfCarers(System.Decimal,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.DateTime},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.String,System.DateTime,System.Nullable{System.DateTime},System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.String,System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ProfCarers"/> instance.
            </summary>
            <param name="_procaRefno"></param>
            <param name="_prtypRefno"></param>
            <param name="_titleRefno"></param>
            <param name="_forename"></param>
            <param name="_gradeRefno"></param>
            <param name="_sexxxRefno"></param>
            <param name="_cartpRefno"></param>
            <param name="_surname"></param>
            <param name="_dateOfBirth"></param>
            <param name="_contrHours"></param>
            <param name="_leaveEntitlement"></param>
            <param name="_placeOfBirth"></param>
            <param name="_qualifications"></param>
            <param name="_startDttm"></param>
            <param name="_endDttm"></param>
            <param name="_description"></param>
            <param name="_curntFlag"></param>
            <param name="_localFlag"></param>
            <param name="_mainIdent"></param>
            <param name="_archvFlag"></param>
            <param name="_stranRefno"></param>
            <param name="_priorPointer"></param>
            <param name="_externalKey"></param>
            <param name="_sndexForename"></param>
            <param name="_sndexSurname"></param>
            <param name="_upperForename"></param>
            <param name="_upperSurname"></param>
            <param name="_userCreatedFlag"></param>
            <param name="_reportCliniFlag"></param>
            <param name="_ownerHeorgRefno"></param>
            <param name="_gloveInitmRefno"></param>
            <param name="_sknprInitmRefno"></param>
            <param name="_defPathSpontRefno"></param>
            <param name="_primarySteamRefno"></param>
            <param name="_authoriseFlag"></param>
            <param name="_maoAgrSigned"></param>
            <param name="_maoIndivSignflag"></param>
            <param name="_vocRegdFlag"></param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.ProfCarersServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarersServiceBase.GetByCartpRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PROCA_CARTP key.
            	CNA_PROCA_CARTP Description: 
            </summary>
            <param name="_cartpRefno"></param>
            <returns>Returns a generic collection of ProfCarers objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarersServiceBase.GetByCartpRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PROCA_CARTP key.
            	CNA_PROCA_CARTP Description: 
            </summary>
            <param name="_cartpRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>ProfCarers</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarersServiceBase.GetByGradeRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PROCA_GRADE key.
            	CNA_PROCA_GRADE Description: 
            </summary>
            <param name="_gradeRefno"></param>
            <returns>Returns a generic collection of ProfCarers objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarersServiceBase.GetByGradeRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PROCA_GRADE key.
            	CNA_PROCA_GRADE Description: 
            </summary>
            <param name="_gradeRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>ProfCarers</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarersServiceBase.GetBySexxxRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PROCA_SEXXX key.
            	CNA_PROCA_SEXXX Description: 
            </summary>
            <param name="_sexxxRefno"></param>
            <returns>Returns a generic collection of ProfCarers objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarersServiceBase.GetBySexxxRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PROCA_SEXXX key.
            	CNA_PROCA_SEXXX Description: 
            </summary>
            <param name="_sexxxRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>ProfCarers</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarersServiceBase.GetByTitleRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PROCA_TITLE key.
            	CNA_PROCA_TITLE Description: 
            </summary>
            <param name="_titleRefno"></param>
            <returns>Returns a generic collection of ProfCarers objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarersServiceBase.GetByTitleRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PROCA_TITLE key.
            	CNA_PROCA_TITLE Description: 
            </summary>
            <param name="_titleRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>ProfCarers</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarersServiceBase.Get(iSOFT.ANZ.PatientManagerService.Entities.ProfCarersKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarersServiceBase.GetBySurnameForenamePrtypRefno(System.String,System.String,System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_PROF_CARERS index.
            </summary>
            <param name="_surname"></param>
            <param name="_forename"></param>
            <param name="_prtypRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarersServiceBase.GetBySurnameForenamePrtypRefno(System.String,System.String,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_PROF_CARERS index.
            </summary>
            <param name="_surname"></param>
            <param name="_forename"></param>
            <param name="_prtypRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarersServiceBase.GetByLocalFlag(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_PROCA_LOCAL index.
            </summary>
            <param name="_localFlag"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarersServiceBase.GetByLocalFlag(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_PROCA_LOCAL index.
            </summary>
            <param name="_localFlag"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarersServiceBase.GetByMainIdent(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key NZ_PROCA_MAIN index.
            </summary>
            <param name="_mainIdent"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarersServiceBase.GetByMainIdent(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key NZ_PROCA_MAIN index.
            </summary>
            <param name="_mainIdent"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarersServiceBase.GetByUpperSurnameUpperForename(System.String,System.String)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_PROF_CARERS_UPPER index.
            </summary>
            <param name="_upperSurname"></param>
            <param name="_upperForename"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarersServiceBase.GetByUpperSurnameUpperForename(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_PROF_CARERS_UPPER index.
            </summary>
            <param name="_upperSurname"></param>
            <param name="_upperForename"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarersServiceBase.GetBySndexSurnameSndexForename(System.String,System.String)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_PROF_CARERS_SNDEX index.
            </summary>
            <param name="_sndexSurname"></param>
            <param name="_sndexForename"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarersServiceBase.GetBySndexSurnameSndexForename(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_PROF_CARERS_SNDEX index.
            </summary>
            <param name="_sndexSurname"></param>
            <param name="_sndexForename"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarersServiceBase.GetByProcaRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_PROF_CARERS index.
            </summary>
            <param name="_procaRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ProfCarers"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarersServiceBase.GetByProcaRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_PROF_CARERS index.
            </summary>
            <param name="_procaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ProfCarers"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarersServiceBase.GetByUpperSurnameLocalFlag(System.String,System.String)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CLU_PROCA_UPP_SURNAME_LOCAL index.
            </summary>
            <param name="_upperSurname"></param>
            <param name="_localFlag"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarersServiceBase.GetByUpperSurnameLocalFlag(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CLU_PROCA_UPP_SURNAME_LOCAL index.
            </summary>
            <param name="_upperSurname"></param>
            <param name="_localFlag"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarersServiceBase.GetByPrtypRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key SAH_PROCA_PRTYP index.
            </summary>
            <param name="_prtypRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarersServiceBase.GetByPrtypRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key SAH_PROCA_PRTYP index.
            </summary>
            <param name="_prtypRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarersServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ProfCarers" /> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarersServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ProfCarers" /> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> </returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarersServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ProfCarers</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarersServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ProfCarers</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarersServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ProfCarers</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarersServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarersServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.ProfCarers)">
            <summary>
            public virtual method that Inserts a ProfCarers object into the datasource using a transaction.
            </summary>
            <param name="entity">ProfCarers object to Insert.</param>
            <remarks>After Inserting into the datasource, the ProfCarers object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            ProfCarers entity = new ProfCarers();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ProfCarersService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarersServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.ProfCarers})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProfCarers</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>ProfCarers</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of ProfCarers.
             <code><![CDATA[
             TList<ProfCarers> list = new TList<ProfCarers>();
             ProfCarers entity = new ProfCarers();
             entity.StringProperty = "foo";
             ProfCarers entity2 = new ProfCarers();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProfCarersService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarersServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.ProfCarers)">
            <summary>
            public virtual method that Updates a ProfCarers object into the datasource using a transaction.
            </summary>
            <param name="entity">ProfCarers object to Update.</param>
            <remarks>After Updateing into the datasource, the ProfCarers object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            ProfCarers entity = ProfCarersService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ProfCarersService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarersServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.ProfCarers})">
             <summary>
             public virtual method that Updates rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProfCarers</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>ProfCarers</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of ProfCarers.
             <code><![CDATA[
             TList<ProfCarers> list = new TList<ProfCarers>();
             ProfCarers entity = new ProfCarers();
             entity.StringProperty = "foo";
             ProfCarers entity2 = new ProfCarers();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProfCarersService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarersServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.ProfCarers)">
            <summary>
            public virtual method that Deletes a ProfCarers object into the datasource using a transaction.
            </summary>
            <param name="entity">ProfCarers object to Delete.</param>
            <remarks>After Deleteing into the datasource, the ProfCarers object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            ProfCarers entity = ProfCarersService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ProfCarersService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarersServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.ProfCarers})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProfCarers</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>ProfCarers</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of ProfCarers.
             <code><![CDATA[
             TList<ProfCarers> list = new TList<ProfCarers>();
             ProfCarers entity = new ProfCarers();
             entity.StringProperty = "foo";
             ProfCarers entity2 = new ProfCarers();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProfCarersService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarersServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.ProfCarersKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarersServiceBase.Delete(System.Decimal)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Decimal _procaRefno
            </summary>
            <param name="_procaRefno">ProfCarers pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.SpecialtiesService">
            <summary>
            An component type implementation of the 'SPECIALTIES' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SpecialtiesService.#ctor">
            <summary>
            Initializes a new instance of the SpecialtiesService class.
            </summary>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.SpecialtiesServiceBase">
            <summary>
             An object representation of the 'SPECIALTIES' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Specialties.cs file instead.
             All custom implementations should be done in the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Specialties"/> class.
             </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SpecialtiesServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Specialties"/> instance .
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SpecialtiesServiceBase.CreateSpecialties(System.Decimal,System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.DateTime,System.Nullable{System.DateTime},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Specialties"/> instance.
            </summary>
            <param name="_spectRefno"></param>
            <param name="_mainIdent"></param>
            <param name="_description"></param>
            <param name="_parntRefno"></param>
            <param name="_divsnRefno"></param>
            <param name="_smodeValue"></param>
            <param name="_archvFlag"></param>
            <param name="_stranRefno"></param>
            <param name="_priorPointer"></param>
            <param name="_externalKey"></param>
            <param name="_startDttm"></param>
            <param name="_endDttm"></param>
            <param name="_ownerHeorgRefno"></param>
            <param name="_sclvlRefno"></param>
            <param name="_synCode"></param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.SpecialtiesServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SpecialtiesServiceBase.Get(iSOFT.ANZ.PatientManagerService.Entities.SpecialtiesKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SpecialtiesServiceBase.GetByDivsnRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SPECT_DIVSN index.
            </summary>
            <param name="_divsnRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SpecialtiesServiceBase.GetByDivsnRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SPECT_DIVSN index.
            </summary>
            <param name="_divsnRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SpecialtiesServiceBase.GetByParntRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SPECT_PARNT index.
            </summary>
            <param name="_parntRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SpecialtiesServiceBase.GetByParntRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SPECT_PARNT index.
            </summary>
            <param name="_parntRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SpecialtiesServiceBase.GetByMainIdent(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_SPECT_MAIN_IDENT index.
            </summary>
            <param name="_mainIdent"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SpecialtiesServiceBase.GetByMainIdent(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_SPECT_MAIN_IDENT index.
            </summary>
            <param name="_mainIdent"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SpecialtiesServiceBase.GetBySpectRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_SPECIALTIES index.
            </summary>
            <param name="_spectRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Specialties"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SpecialtiesServiceBase.GetBySpectRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_SPECIALTIES index.
            </summary>
            <param name="_spectRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Specialties"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SpecialtiesServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Specialties" /> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SpecialtiesServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Specialties" /> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> </returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SpecialtiesServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Specialties</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SpecialtiesServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Specialties</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SpecialtiesServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Specialties</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SpecialtiesServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SpecialtiesServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.Specialties)">
            <summary>
            public virtual method that Inserts a Specialties object into the datasource using a transaction.
            </summary>
            <param name="entity">Specialties object to Insert.</param>
            <remarks>After Inserting into the datasource, the Specialties object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Specialties entity = new Specialties();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	SpecialtiesService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SpecialtiesServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.Specialties})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>Specialties</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Specialties</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Specialties.
             <code><![CDATA[
             TList<Specialties> list = new TList<Specialties>();
             Specialties entity = new Specialties();
             entity.StringProperty = "foo";
             Specialties entity2 = new Specialties();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SpecialtiesService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SpecialtiesServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.Specialties)">
            <summary>
            public virtual method that Updates a Specialties object into the datasource using a transaction.
            </summary>
            <param name="entity">Specialties object to Update.</param>
            <remarks>After Updateing into the datasource, the Specialties object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Specialties entity = SpecialtiesService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	SpecialtiesService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SpecialtiesServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.Specialties})">
             <summary>
             public virtual method that Updates rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>Specialties</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Specialties</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Specialties.
             <code><![CDATA[
             TList<Specialties> list = new TList<Specialties>();
             Specialties entity = new Specialties();
             entity.StringProperty = "foo";
             Specialties entity2 = new Specialties();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SpecialtiesService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SpecialtiesServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.Specialties)">
            <summary>
            public virtual method that Deletes a Specialties object into the datasource using a transaction.
            </summary>
            <param name="entity">Specialties object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Specialties object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Specialties entity = SpecialtiesService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	SpecialtiesService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SpecialtiesServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.Specialties})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>Specialties</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Specialties</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Specialties.
             <code><![CDATA[
             TList<Specialties> list = new TList<Specialties>();
             Specialties entity = new Specialties();
             entity.StringProperty = "foo";
             Specialties entity2 = new Specialties();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SpecialtiesService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SpecialtiesServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.SpecialtiesKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SpecialtiesServiceBase.Delete(System.Decimal)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Decimal _spectRefno
            </summary>
            <param name="_spectRefno">Specialties pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.BedsService">
            <summary>
            An component type implementation of the 'BEDS' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.BedsService.#ctor">
            <summary>
            Initializes a new instance of the BedsService class.
            </summary>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.BedsServiceBase">
            <summary>
             An object representation of the 'BEDS' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Beds.cs file instead.
             All custom implementations should be done in the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Beds"/> class.
             </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.BedsServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Beds"/> instance .
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.BedsServiceBase.CreateBeds(System.Decimal,System.String,System.String,System.DateTime,System.Nullable{System.DateTime},System.String,System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
            <summary>
             A simple factory method to create a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Beds"/> instance.
            </summary>
            <param name="_bedssRefno"></param>
            <param name="_code"></param>
            <param name="_description"></param>
            <param name="_startDttm"></param>
            <param name="_endDttm"></param>
            <param name="_archvFlag"></param>
            <param name="_stranRefno"></param>
            <param name="_externalKey"></param>
            <param name="_bdcatRefno"></param>
            <param name="_spectRefno"></param>
            <param name="_telExtension"></param>
            <param name="_sutypRefno"></param>
            <param name="_ownerHeorgRefno"></param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.BedsServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.BedsServiceBase.Get(iSOFT.ANZ.PatientManagerService.Entities.BedsKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.BedsServiceBase.GetBySpectRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_BEDSS_SPECT index.
            </summary>
            <param name="_spectRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.BedsServiceBase.GetBySpectRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_BEDSS_SPECT index.
            </summary>
            <param name="_spectRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.BedsServiceBase.GetByBedssRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_BEDS index.
            </summary>
            <param name="_bedssRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Beds"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.BedsServiceBase.GetByBedssRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_BEDS index.
            </summary>
            <param name="_bedssRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Beds"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.BedsServiceBase.GetByCode(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_BEDSS_CODE index.
            </summary>
            <param name="_code"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.BedsServiceBase.GetByCode(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_BEDSS_CODE index.
            </summary>
            <param name="_code"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.BedsServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Beds" /> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.BedsServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Beds" /> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> </returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.BedsServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Beds</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.BedsServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Beds</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.BedsServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Beds</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.BedsServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.BedsServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.Beds)">
            <summary>
            public virtual method that Inserts a Beds object into the datasource using a transaction.
            </summary>
            <param name="entity">Beds object to Insert.</param>
            <remarks>After Inserting into the datasource, the Beds object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Beds entity = new Beds();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	BedsService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.BedsServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.Beds})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>Beds</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Beds</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Beds.
             <code><![CDATA[
             TList<Beds> list = new TList<Beds>();
             Beds entity = new Beds();
             entity.StringProperty = "foo";
             Beds entity2 = new Beds();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	BedsService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.BedsServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.Beds)">
            <summary>
            public virtual method that Updates a Beds object into the datasource using a transaction.
            </summary>
            <param name="entity">Beds object to Update.</param>
            <remarks>After Updateing into the datasource, the Beds object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Beds entity = BedsService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	BedsService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.BedsServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.Beds})">
             <summary>
             public virtual method that Updates rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>Beds</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Beds</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Beds.
             <code><![CDATA[
             TList<Beds> list = new TList<Beds>();
             Beds entity = new Beds();
             entity.StringProperty = "foo";
             Beds entity2 = new Beds();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	BedsService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.BedsServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.Beds)">
            <summary>
            public virtual method that Deletes a Beds object into the datasource using a transaction.
            </summary>
            <param name="entity">Beds object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Beds object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Beds entity = BedsService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	BedsService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.BedsServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.Beds})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>Beds</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Beds</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Beds.
             <code><![CDATA[
             TList<Beds> list = new TList<Beds>();
             Beds entity = new Beds();
             entity.StringProperty = "foo";
             Beds entity2 = new Beds();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	BedsService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.BedsServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.BedsKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.BedsServiceBase.Delete(System.Decimal)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Decimal _bedssRefno
            </summary>
            <param name="_bedssRefno">Beds pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.ReferenceValueLinksService">
            <summary>
            An component type implementation of the 'REFERENCE_VALUE_LINKS' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValueLinksService.#ctor">
            <summary>
            Initializes a new instance of the ReferenceValueLinksService class.
            </summary>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.ReferenceValueLinksServiceBase">
            <summary>
             An object representation of the 'REFERENCE_VALUE_LINKS' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ReferenceValueLinks.cs file instead.
             All custom implementations should be done in the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueLinks"/> class.
             </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValueLinksServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueLinks"/> instance .
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValueLinksServiceBase.CreateReferenceValueLinks(System.Decimal,System.Decimal,System.Decimal,System.DateTime,System.Nullable{System.DateTime},System.Nullable{System.Decimal},System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueLinks"/> instance.
            </summary>
            <param name="_refliRefno"></param>
            <param name="_fromRfvalRefno"></param>
            <param name="_toRfvalRefno"></param>
            <param name="_startDttm"></param>
            <param name="_endDttm"></param>
            <param name="_stranRefno"></param>
            <param name="_archvFlag"></param>
            <param name="_externalKey"></param>
            <param name="_rfltpRefno"></param>
            <param name="_ownerHeorgRefno"></param>
            <param name="_synCode"></param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.ReferenceValueLinksServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValueLinksServiceBase.Get(iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueLinksKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValueLinksServiceBase.GetByFromRfvalRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_REFLI_FROM_RFVAL index.
            </summary>
            <param name="_fromRfvalRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValueLinksServiceBase.GetByFromRfvalRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_REFLI_FROM_RFVAL index.
            </summary>
            <param name="_fromRfvalRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValueLinksServiceBase.GetByToRfvalRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_REFLI_TO_RFVAL index.
            </summary>
            <param name="_toRfvalRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValueLinksServiceBase.GetByToRfvalRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_REFLI_TO_RFVAL index.
            </summary>
            <param name="_toRfvalRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValueLinksServiceBase.GetByRefliRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_REFERENCE_VALUE_LINKS index.
            </summary>
            <param name="_refliRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueLinks"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValueLinksServiceBase.GetByRefliRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_REFERENCE_VALUE_LINKS index.
            </summary>
            <param name="_refliRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueLinks"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValueLinksServiceBase.GetByFromRfvalRefnoToRfvalRefno(System.Decimal,System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_REFLI_RFVAL_FROM_TO index.
            </summary>
            <param name="_fromRfvalRefno"></param>
            <param name="_toRfvalRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValueLinksServiceBase.GetByFromRfvalRefnoToRfvalRefno(System.Decimal,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_REFLI_RFVAL_FROM_TO index.
            </summary>
            <param name="_fromRfvalRefno"></param>
            <param name="_toRfvalRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValueLinksServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueLinks" /> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValueLinksServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueLinks" /> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> </returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValueLinksServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ReferenceValueLinks</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValueLinksServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ReferenceValueLinks</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValueLinksServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ReferenceValueLinks</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValueLinksServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValueLinksServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueLinks)">
            <summary>
            public virtual method that Inserts a ReferenceValueLinks object into the datasource using a transaction.
            </summary>
            <param name="entity">ReferenceValueLinks object to Insert.</param>
            <remarks>After Inserting into the datasource, the ReferenceValueLinks object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            ReferenceValueLinks entity = new ReferenceValueLinks();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ReferenceValueLinksService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValueLinksServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueLinks})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>ReferenceValueLinks</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>ReferenceValueLinks</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of ReferenceValueLinks.
             <code><![CDATA[
             TList<ReferenceValueLinks> list = new TList<ReferenceValueLinks>();
             ReferenceValueLinks entity = new ReferenceValueLinks();
             entity.StringProperty = "foo";
             ReferenceValueLinks entity2 = new ReferenceValueLinks();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ReferenceValueLinksService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValueLinksServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueLinks)">
            <summary>
            public virtual method that Updates a ReferenceValueLinks object into the datasource using a transaction.
            </summary>
            <param name="entity">ReferenceValueLinks object to Update.</param>
            <remarks>After Updateing into the datasource, the ReferenceValueLinks object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            ReferenceValueLinks entity = ReferenceValueLinksService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ReferenceValueLinksService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValueLinksServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueLinks})">
             <summary>
             public virtual method that Updates rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>ReferenceValueLinks</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>ReferenceValueLinks</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of ReferenceValueLinks.
             <code><![CDATA[
             TList<ReferenceValueLinks> list = new TList<ReferenceValueLinks>();
             ReferenceValueLinks entity = new ReferenceValueLinks();
             entity.StringProperty = "foo";
             ReferenceValueLinks entity2 = new ReferenceValueLinks();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ReferenceValueLinksService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValueLinksServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueLinks)">
            <summary>
            public virtual method that Deletes a ReferenceValueLinks object into the datasource using a transaction.
            </summary>
            <param name="entity">ReferenceValueLinks object to Delete.</param>
            <remarks>After Deleteing into the datasource, the ReferenceValueLinks object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            ReferenceValueLinks entity = ReferenceValueLinksService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ReferenceValueLinksService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValueLinksServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueLinks})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>ReferenceValueLinks</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>ReferenceValueLinks</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of ReferenceValueLinks.
             <code><![CDATA[
             TList<ReferenceValueLinks> list = new TList<ReferenceValueLinks>();
             ReferenceValueLinks entity = new ReferenceValueLinks();
             entity.StringProperty = "foo";
             ReferenceValueLinks entity2 = new ReferenceValueLinks();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ReferenceValueLinksService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValueLinksServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueLinksKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValueLinksServiceBase.Delete(System.Decimal)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Decimal _refliRefno
            </summary>
            <param name="_refliRefno">ReferenceValueLinks pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.PersonalCarersService">
            <summary>
            An component type implementation of the 'PERSONAL_CARERS' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PersonalCarersService.#ctor">
            <summary>
            Initializes a new instance of the PersonalCarersService class.
            </summary>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.PersonalCarersServiceBase">
            <summary>
             An object representation of the 'PERSONAL_CARERS' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the PersonalCarers.cs file instead.
             All custom implementations should be done in the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.PersonalCarers"/> class.
             </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PersonalCarersServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.PersonalCarers"/> instance .
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PersonalCarersServiceBase.CreatePersonalCarers(System.Decimal,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.String,System.Nullable{System.DateTime},System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.PersonalCarers"/> instance.
            </summary>
            <param name="_percaRefno"></param>
            <param name="_titleRefno"></param>
            <param name="_spoklRefno"></param>
            <param name="_sexxxRefno"></param>
            <param name="_patntRefno"></param>
            <param name="_forename"></param>
            <param name="_surname"></param>
            <param name="_dateOfBirth"></param>
            <param name="_archvFlag"></param>
            <param name="_stranRefno"></param>
            <param name="_priorPointer"></param>
            <param name="_externalKey"></param>
            <param name="_intrpReqdFlag"></param>
            <param name="_sndexForename"></param>
            <param name="_sndexSurname"></param>
            <param name="_upperForename"></param>
            <param name="_upperSurname"></param>
            <param name="_prefrdForename"></param>
            <param name="_upperPrefrdForename"></param>
            <param name="_sndexPrefrdForename"></param>
            <param name="_secondForename"></param>
            <param name="_upperSecondForename"></param>
            <param name="_sndexSecondForename"></param>
            <param name="_thirdForename"></param>
            <param name="_upperThirdForename"></param>
            <param name="_sndexThirdForename"></param>
            <param name="_mpicrRefno"></param>
            <param name="_isCarerFlag"></param>
            <param name="_ownerHeorgRefno"></param>
            <param name="_upperFourthForename"></param>
            <param name="_upperFifthForename"></param>
            <param name="_fifthForename"></param>
            <param name="_sndexFifthForename"></param>
            <param name="_fourthForename"></param>
            <param name="_sndexFourthForename"></param>
            <param name="_birthDttmEstimateFlag"></param>
            <param name="_cntryRefno"></param>
            <param name="_ethgrRefno"></param>
            <param name="_caavlRefno"></param>
            <param name="_carerOfmoreYnunkRefno"></param>
            <param name="_intrpRefno"></param>
            <param name="_occupRefno"></param>
            <param name="_occupDescription"></param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.PersonalCarersServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PersonalCarersServiceBase.GetBySexxxRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PERCA_SEXXX key.
            	CNA_PERCA_SEXXX Description: 
            </summary>
            <param name="_sexxxRefno"></param>
            <returns>Returns a generic collection of PersonalCarers objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PersonalCarersServiceBase.GetBySexxxRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PERCA_SEXXX key.
            	CNA_PERCA_SEXXX Description: 
            </summary>
            <param name="_sexxxRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>PersonalCarers</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PersonalCarersServiceBase.GetBySpoklRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PERCA_SPOKL key.
            	CNA_PERCA_SPOKL Description: 
            </summary>
            <param name="_spoklRefno"></param>
            <returns>Returns a generic collection of PersonalCarers objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PersonalCarersServiceBase.GetBySpoklRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PERCA_SPOKL key.
            	CNA_PERCA_SPOKL Description: 
            </summary>
            <param name="_spoklRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>PersonalCarers</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PersonalCarersServiceBase.Get(iSOFT.ANZ.PatientManagerService.Entities.PersonalCarersKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PersonalCarersServiceBase.GetByUpperSurnameUpperPrefrdForename(System.String,System.String)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_PERCA_PREFRD index.
            </summary>
            <param name="_upperSurname"></param>
            <param name="_upperPrefrdForename"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PersonalCarersServiceBase.GetByUpperSurnameUpperPrefrdForename(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_PERCA_PREFRD index.
            </summary>
            <param name="_upperSurname"></param>
            <param name="_upperPrefrdForename"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PersonalCarersServiceBase.GetBySndexSurnameSndexPrefrdForename(System.String,System.String)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_PERCA_PREFRD_SOUNDEX index.
            </summary>
            <param name="_sndexSurname"></param>
            <param name="_sndexPrefrdForename"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PersonalCarersServiceBase.GetBySndexSurnameSndexPrefrdForename(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_PERCA_PREFRD_SOUNDEX index.
            </summary>
            <param name="_sndexSurname"></param>
            <param name="_sndexPrefrdForename"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PersonalCarersServiceBase.GetByUpperSurnameUpperSecondForename(System.String,System.String)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_PERCA_SECOND index.
            </summary>
            <param name="_upperSurname"></param>
            <param name="_upperSecondForename"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PersonalCarersServiceBase.GetByUpperSurnameUpperSecondForename(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_PERCA_SECOND index.
            </summary>
            <param name="_upperSurname"></param>
            <param name="_upperSecondForename"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PersonalCarersServiceBase.GetBySndexSurnameSndexSecondForename(System.String,System.String)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_PERCA_SECOND_SNDEX index.
            </summary>
            <param name="_sndexSurname"></param>
            <param name="_sndexSecondForename"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PersonalCarersServiceBase.GetBySndexSurnameSndexSecondForename(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_PERCA_SECOND_SNDEX index.
            </summary>
            <param name="_sndexSurname"></param>
            <param name="_sndexSecondForename"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PersonalCarersServiceBase.GetByUpperSurnameUpperThirdForename(System.String,System.String)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_PERCA_THIRD index.
            </summary>
            <param name="_upperSurname"></param>
            <param name="_upperThirdForename"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PersonalCarersServiceBase.GetByUpperSurnameUpperThirdForename(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_PERCA_THIRD index.
            </summary>
            <param name="_upperSurname"></param>
            <param name="_upperThirdForename"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PersonalCarersServiceBase.GetBySndexSurnameSndexThirdForename(System.String,System.String)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_PERCA_THIRD_SNDEX index.
            </summary>
            <param name="_sndexSurname"></param>
            <param name="_sndexThirdForename"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PersonalCarersServiceBase.GetBySndexSurnameSndexThirdForename(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_PERCA_THIRD_SNDEX index.
            </summary>
            <param name="_sndexSurname"></param>
            <param name="_sndexThirdForename"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PersonalCarersServiceBase.GetByPercaRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_PERSONAL_CARERS index.
            </summary>
            <param name="_percaRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.PersonalCarers"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PersonalCarersServiceBase.GetByPercaRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_PERSONAL_CARERS index.
            </summary>
            <param name="_percaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.PersonalCarers"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PersonalCarersServiceBase.GetByPatntRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PERCA_PATNT index.
            </summary>
            <param name="_patntRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PersonalCarersServiceBase.GetByPatntRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PERCA_PATNT index.
            </summary>
            <param name="_patntRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PersonalCarersServiceBase.GetBySurnameForename(System.String,System.String)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_PERSONAL_CARERS index.
            </summary>
            <param name="_surname"></param>
            <param name="_forename"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PersonalCarersServiceBase.GetBySurnameForename(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_PERSONAL_CARERS index.
            </summary>
            <param name="_surname"></param>
            <param name="_forename"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PersonalCarersServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.PersonalCarers" /> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PersonalCarersServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.PersonalCarers" /> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> </returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PersonalCarersServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>PersonalCarers</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PersonalCarersServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>PersonalCarers</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PersonalCarersServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>PersonalCarers</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PersonalCarersServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PersonalCarersServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.PersonalCarers)">
            <summary>
            public virtual method that Inserts a PersonalCarers object into the datasource using a transaction.
            </summary>
            <param name="entity">PersonalCarers object to Insert.</param>
            <remarks>After Inserting into the datasource, the PersonalCarers object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            PersonalCarers entity = new PersonalCarers();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	PersonalCarersService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PersonalCarersServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.PersonalCarers})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>PersonalCarers</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>PersonalCarers</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of PersonalCarers.
             <code><![CDATA[
             TList<PersonalCarers> list = new TList<PersonalCarers>();
             PersonalCarers entity = new PersonalCarers();
             entity.StringProperty = "foo";
             PersonalCarers entity2 = new PersonalCarers();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	PersonalCarersService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PersonalCarersServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.PersonalCarers)">
            <summary>
            public virtual method that Updates a PersonalCarers object into the datasource using a transaction.
            </summary>
            <param name="entity">PersonalCarers object to Update.</param>
            <remarks>After Updateing into the datasource, the PersonalCarers object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            PersonalCarers entity = PersonalCarersService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	PersonalCarersService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PersonalCarersServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.PersonalCarers})">
             <summary>
             public virtual method that Updates rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>PersonalCarers</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>PersonalCarers</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of PersonalCarers.
             <code><![CDATA[
             TList<PersonalCarers> list = new TList<PersonalCarers>();
             PersonalCarers entity = new PersonalCarers();
             entity.StringProperty = "foo";
             PersonalCarers entity2 = new PersonalCarers();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	PersonalCarersService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PersonalCarersServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.PersonalCarers)">
            <summary>
            public virtual method that Deletes a PersonalCarers object into the datasource using a transaction.
            </summary>
            <param name="entity">PersonalCarers object to Delete.</param>
            <remarks>After Deleteing into the datasource, the PersonalCarers object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            PersonalCarers entity = PersonalCarersService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	PersonalCarersService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PersonalCarersServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.PersonalCarers})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>PersonalCarers</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>PersonalCarers</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of PersonalCarers.
             <code><![CDATA[
             TList<PersonalCarers> list = new TList<PersonalCarers>();
             PersonalCarers entity = new PersonalCarers();
             entity.StringProperty = "foo";
             PersonalCarers entity2 = new PersonalCarers();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	PersonalCarersService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PersonalCarersServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.PersonalCarersKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PersonalCarersServiceBase.Delete(System.Decimal)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Decimal _percaRefno
            </summary>
            <param name="_percaRefno">PersonalCarers pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.ReferenceValueIdsService">
            <summary>
            An component type implementation of the 'REFERENCE_VALUE_IDS' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValueIdsService.#ctor">
            <summary>
            Initializes a new instance of the ReferenceValueIdsService class.
            </summary>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.ReferenceValueIdsServiceBase">
            <summary>
             An object representation of the 'REFERENCE_VALUE_IDS' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ReferenceValueIds.cs file instead.
             All custom implementations should be done in the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueIds"/> class.
             </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValueIdsServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueIds"/> instance .
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValueIdsServiceBase.CreateReferenceValueIds(System.Decimal,System.Decimal,System.String,System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal})">
            <summary>
             A simple factory method to create a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueIds"/> instance.
            </summary>
            <param name="_rfvliRefno"></param>
            <param name="_rfvalRefno"></param>
            <param name="_identifier"></param>
            <param name="_ritypCode"></param>
            <param name="_archvFlag"></param>
            <param name="_stranRefno"></param>
            <param name="_priorPointer"></param>
            <param name="_externalKey"></param>
            <param name="_ownerHeorgRefno"></param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.ReferenceValueIdsServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValueIdsServiceBase.Get(iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueIdsKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValueIdsServiceBase.GetByIdentifierRfvalRefno(System.String,System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_REFERENCE_VALUE_IDS index.
            </summary>
            <param name="_identifier"></param>
            <param name="_rfvalRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValueIdsServiceBase.GetByIdentifierRfvalRefno(System.String,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_REFERENCE_VALUE_IDS index.
            </summary>
            <param name="_identifier"></param>
            <param name="_rfvalRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValueIdsServiceBase.GetByRfvalRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_RFVLI_RFVAL index.
            </summary>
            <param name="_rfvalRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValueIdsServiceBase.GetByRfvalRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_RFVLI_RFVAL index.
            </summary>
            <param name="_rfvalRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValueIdsServiceBase.GetByRfvliRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_REFERENCE_VALUE_IDS index.
            </summary>
            <param name="_rfvliRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueIds"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValueIdsServiceBase.GetByRfvliRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_REFERENCE_VALUE_IDS index.
            </summary>
            <param name="_rfvliRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueIds"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValueIdsServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueIds" /> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValueIdsServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueIds" /> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> </returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValueIdsServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ReferenceValueIds</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValueIdsServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ReferenceValueIds</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValueIdsServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ReferenceValueIds</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValueIdsServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValueIdsServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueIds)">
            <summary>
            public virtual method that Inserts a ReferenceValueIds object into the datasource using a transaction.
            </summary>
            <param name="entity">ReferenceValueIds object to Insert.</param>
            <remarks>After Inserting into the datasource, the ReferenceValueIds object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            ReferenceValueIds entity = new ReferenceValueIds();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ReferenceValueIdsService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValueIdsServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueIds})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>ReferenceValueIds</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>ReferenceValueIds</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of ReferenceValueIds.
             <code><![CDATA[
             TList<ReferenceValueIds> list = new TList<ReferenceValueIds>();
             ReferenceValueIds entity = new ReferenceValueIds();
             entity.StringProperty = "foo";
             ReferenceValueIds entity2 = new ReferenceValueIds();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ReferenceValueIdsService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValueIdsServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueIds)">
            <summary>
            public virtual method that Updates a ReferenceValueIds object into the datasource using a transaction.
            </summary>
            <param name="entity">ReferenceValueIds object to Update.</param>
            <remarks>After Updateing into the datasource, the ReferenceValueIds object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            ReferenceValueIds entity = ReferenceValueIdsService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ReferenceValueIdsService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValueIdsServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueIds})">
             <summary>
             public virtual method that Updates rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>ReferenceValueIds</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>ReferenceValueIds</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of ReferenceValueIds.
             <code><![CDATA[
             TList<ReferenceValueIds> list = new TList<ReferenceValueIds>();
             ReferenceValueIds entity = new ReferenceValueIds();
             entity.StringProperty = "foo";
             ReferenceValueIds entity2 = new ReferenceValueIds();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ReferenceValueIdsService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValueIdsServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueIds)">
            <summary>
            public virtual method that Deletes a ReferenceValueIds object into the datasource using a transaction.
            </summary>
            <param name="entity">ReferenceValueIds object to Delete.</param>
            <remarks>After Deleteing into the datasource, the ReferenceValueIds object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            ReferenceValueIds entity = ReferenceValueIdsService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ReferenceValueIdsService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValueIdsServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueIds})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>ReferenceValueIds</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>ReferenceValueIds</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of ReferenceValueIds.
             <code><![CDATA[
             TList<ReferenceValueIds> list = new TList<ReferenceValueIds>();
             ReferenceValueIds entity = new ReferenceValueIds();
             entity.StringProperty = "foo";
             ReferenceValueIds entity2 = new ReferenceValueIds();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ReferenceValueIdsService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValueIdsServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueIdsKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValueIdsServiceBase.Delete(System.Decimal)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Decimal _rfvliRefno
            </summary>
            <param name="_rfvliRefno">ReferenceValueIds pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.PatientsService">
            <summary>
            An component type implementation of the 'PATIENTS' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientsService.#ctor">
            <summary>
            Initializes a new instance of the PatientsService class.
            </summary>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.PatientsServiceBase">
            <summary>
             An object representation of the 'PATIENTS' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Patients.cs file instead.
             All custom implementations should be done in the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Patients"/> class.
             </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientsServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Patients"/> instance .
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientsServiceBase.CreatePatients(System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.DateTime},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.DateTime},System.String,System.String,System.Nullable{System.Decimal},System.String,System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.DateTime},System.String,System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.DateTime},System.Nullable{System.Decimal},System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.DateTime},System.Nullable{System.Decimal},System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.String,System.String,System.String,System.Nullable{System.Decimal},System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Decimal},System.String,System.String,System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.DateTime})">
            <summary>
             A simple factory method to create a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Patients"/> instance.
            </summary>
            <param name="_sexxxRefno"></param>
            <param name="_titleRefno"></param>
            <param name="_forename"></param>
            <param name="_marryRefno"></param>
            <param name="_cntryRefno"></param>
            <param name="_surname"></param>
            <param name="_ethgrRefno"></param>
            <param name="_occupRefno"></param>
            <param name="_spoklRefno"></param>
            <param name="_dttmOfBirth"></param>
            <param name="_bloodRefno"></param>
            <param name="_rebesRefno"></param>
            <param name="_multbRefno"></param>
            <param name="_sndexForename"></param>
            <param name="_sndexSurname"></param>
            <param name="_upperForename"></param>
            <param name="_upperSurname"></param>
            <param name="_chronSick"></param>
            <param name="_disabled"></param>
            <param name="_decsdFlag"></param>
            <param name="_confidential"></param>
            <param name="_dttmOfDeath"></param>
            <param name="_placeOfBirth"></param>
            <param name="_placeOfDeath"></param>
            <param name="_religRefno"></param>
            <param name="_occupDescription"></param>
            <param name="_fastTrack"></param>
            <param name="_pasid"></param>
            <param name="_dateOfBirth"></param>
            <param name="_dateOfDeath"></param>
            <param name="_comments"></param>
            <param name="_archvFlag"></param>
            <param name="_stranRefno"></param>
            <param name="_priorPointer"></param>
            <param name="_externalKey"></param>
            <param name="_tempPasId"></param>
            <param name="_birthDttmEstimateFlag"></param>
            <param name="_intrpReqdFlag"></param>
            <param name="_localFlag"></param>
            <param name="_pctIdealBodyWeght"></param>
            <param name="_regisDttm"></param>
            <param name="_privateIdentifier"></param>
            <param name="_nhsIdentifier"></param>
            <param name="_lastSpellIdentifier"></param>
            <param name="_cntstRefno"></param>
            <param name="_apdthRefno"></param>
            <param name="_casltRefno"></param>
            <param name="_deathDttmEstimateFlag"></param>
            <param name="_nnntsCode"></param>
            <param name="_prefrdForename"></param>
            <param name="_upperPrefrdForename"></param>
            <param name="_sndexPrefrdForename"></param>
            <param name="_secondForename"></param>
            <param name="_upperSecondForename"></param>
            <param name="_sndexSecondForename"></param>
            <param name="_thirdForename"></param>
            <param name="_upperThirdForename"></param>
            <param name="_sndexThirdForename"></param>
            <param name="_secondEthgrRefno"></param>
            <param name="_thirdEthgrRefno"></param>
            <param name="_natnlRefno"></param>
            <param name="_cfuUpdateDttm"></param>
            <param name="_residentYnunkRefno"></param>
            <param name="_multilingualName"></param>
            <param name="_searchSurname"></param>
            <param name="_aclevRefno"></param>
            <param name="_insrcRefno"></param>
            <param name="_ownerHeorgRefno"></param>
            <param name="_deathNotifiedDttm"></param>
            <param name="_idsufRefno"></param>
            <param name="_restrictedAccess"></param>
            <param name="_restrictedVip"></param>
            <param name="_restrictionStartDttm"></param>
            <param name="_restrictionEndDttm"></param>
            <param name="_rsttpRefno"></param>
            <param name="_dietyRefno"></param>
            <param name="_restrictionRequestby"></param>
            <param name="_reltnRefno"></param>
            <param name="_rstlvRefno"></param>
            <param name="_sundryDebtor"></param>
            <param name="_pldthRefno"></param>
            <param name="_dcestRefno"></param>
            <param name="_ccdthRefno"></param>
            <param name="_immedCodthOdpcdRefno"></param>
            <param name="_condtCodthOdpcdRefno"></param>
            <param name="_unconCodthOdpcdRefno"></param>
            <param name="_sgnifCodthOdpcdRefno"></param>
            <param name="_codthDiscrepancy"></param>
            <param name="_mergeMinorFlag"></param>
            <param name="_staffFlag"></param>
            <param name="_payeeOnly"></param>
            <param name="_fourthEthgrRefno"></param>
            <param name="_upperFourthForename"></param>
            <param name="_fourthForename"></param>
            <param name="_fifthForename"></param>
            <param name="_sndexFourthForename"></param>
            <param name="_sndexFifthForename"></param>
            <param name="_fifthEthgrRefno"></param>
            <param name="_upperFifthForename"></param>
            <param name="_medicareMiddlenames"></param>
            <param name="_medicareForename"></param>
            <param name="_exclMlist"></param>
            <param name="_intrpRefno"></param>
            <param name="_adtacRefno"></param>
            <param name="_consentConfbRefno"></param>
            <param name="_consentDttm"></param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.PatientsServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientsServiceBase.GetByApdthRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PATNT_APDTH key.
            	CNA_PATNT_APDTH Description: 
            </summary>
            <param name="_apdthRefno"></param>
            <returns>Returns a generic collection of Patients objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientsServiceBase.GetByApdthRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PATNT_APDTH key.
            	CNA_PATNT_APDTH Description: 
            </summary>
            <param name="_apdthRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>Patients</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientsServiceBase.GetByBloodRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PATNT_BLOOD key.
            	CNA_PATNT_BLOOD Description: 
            </summary>
            <param name="_bloodRefno"></param>
            <returns>Returns a generic collection of Patients objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientsServiceBase.GetByBloodRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PATNT_BLOOD key.
            	CNA_PATNT_BLOOD Description: 
            </summary>
            <param name="_bloodRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>Patients</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientsServiceBase.GetByCasltRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PATNT_CASLT key.
            	CNA_PATNT_CASLT Description: 
            </summary>
            <param name="_casltRefno"></param>
            <returns>Returns a generic collection of Patients objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientsServiceBase.GetByCasltRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PATNT_CASLT key.
            	CNA_PATNT_CASLT Description: 
            </summary>
            <param name="_casltRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>Patients</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientsServiceBase.GetByCntstRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PATNT_CNTST key.
            	CNA_PATNT_CNTST Description: 
            </summary>
            <param name="_cntstRefno"></param>
            <returns>Returns a generic collection of Patients objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientsServiceBase.GetByCntstRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PATNT_CNTST key.
            	CNA_PATNT_CNTST Description: 
            </summary>
            <param name="_cntstRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>Patients</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientsServiceBase.GetByEthgrRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PATNT_ETHGR key.
            	CNA_PATNT_ETHGR Description: 
            </summary>
            <param name="_ethgrRefno"></param>
            <returns>Returns a generic collection of Patients objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientsServiceBase.GetByEthgrRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PATNT_ETHGR key.
            	CNA_PATNT_ETHGR Description: 
            </summary>
            <param name="_ethgrRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>Patients</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientsServiceBase.GetByMarryRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PATNT_MARRY key.
            	CNA_PATNT_MARRY Description: 
            </summary>
            <param name="_marryRefno"></param>
            <returns>Returns a generic collection of Patients objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientsServiceBase.GetByMarryRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PATNT_MARRY key.
            	CNA_PATNT_MARRY Description: 
            </summary>
            <param name="_marryRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>Patients</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientsServiceBase.GetByMultbRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PATNT_MULTB key.
            	CNA_PATNT_MULTB Description: 
            </summary>
            <param name="_multbRefno"></param>
            <returns>Returns a generic collection of Patients objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientsServiceBase.GetByMultbRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PATNT_MULTB key.
            	CNA_PATNT_MULTB Description: 
            </summary>
            <param name="_multbRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>Patients</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientsServiceBase.GetByOccupRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PATNT_OCCUP key.
            	CNA_PATNT_OCCUP Description: 
            </summary>
            <param name="_occupRefno"></param>
            <returns>Returns a generic collection of Patients objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientsServiceBase.GetByOccupRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PATNT_OCCUP key.
            	CNA_PATNT_OCCUP Description: 
            </summary>
            <param name="_occupRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>Patients</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientsServiceBase.GetByRebesRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PATNT_REBES key.
            	CNA_PATNT_REBES Description: 
            </summary>
            <param name="_rebesRefno"></param>
            <returns>Returns a generic collection of Patients objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientsServiceBase.GetByRebesRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PATNT_REBES key.
            	CNA_PATNT_REBES Description: 
            </summary>
            <param name="_rebesRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>Patients</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientsServiceBase.GetByReligRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PATNT_RELIG key.
            	CNA_PATNT_RELIG Description: 
            </summary>
            <param name="_religRefno"></param>
            <returns>Returns a generic collection of Patients objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientsServiceBase.GetByReligRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PATNT_RELIG key.
            	CNA_PATNT_RELIG Description: 
            </summary>
            <param name="_religRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>Patients</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientsServiceBase.GetBySexxxRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PATNT_SEXXX key.
            	CNA_PATNT_SEXXX Description: 
            </summary>
            <param name="_sexxxRefno"></param>
            <returns>Returns a generic collection of Patients objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientsServiceBase.GetBySexxxRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PATNT_SEXXX key.
            	CNA_PATNT_SEXXX Description: 
            </summary>
            <param name="_sexxxRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>Patients</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientsServiceBase.GetBySpoklRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PATNT_SPOKL key.
            	CNA_PATNT_SPOKL Description: 
            </summary>
            <param name="_spoklRefno"></param>
            <returns>Returns a generic collection of Patients objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientsServiceBase.GetBySpoklRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PATNT_SPOKL key.
            	CNA_PATNT_SPOKL Description: 
            </summary>
            <param name="_spoklRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>Patients</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientsServiceBase.GetByTitleRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PATNT_TITLE key.
            	CNA_PATNT_TITLE Description: 
            </summary>
            <param name="_titleRefno"></param>
            <returns>Returns a generic collection of Patients objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientsServiceBase.GetByTitleRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PATNT_TITLE key.
            	CNA_PATNT_TITLE Description: 
            </summary>
            <param name="_titleRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>Patients</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientsServiceBase.Get(iSOFT.ANZ.PatientManagerService.Entities.PatientsKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientsServiceBase.GetBySndexForenameSndexSurname(System.String,System.String)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_PATNT_SNDEX index.
            </summary>
            <param name="_sndexForename"></param>
            <param name="_sndexSurname"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientsServiceBase.GetBySndexForenameSndexSurname(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_PATNT_SNDEX index.
            </summary>
            <param name="_sndexForename"></param>
            <param name="_sndexSurname"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientsServiceBase.GetByPasid(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key UK_PATNT_PASID index.
            </summary>
            <param name="_pasid"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientsServiceBase.GetByPasid(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key UK_PATNT_PASID index.
            </summary>
            <param name="_pasid"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientsServiceBase.GetByPrivateIdentifier(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key UK_PATNT_PRIVATE_ID index.
            </summary>
            <param name="_privateIdentifier"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientsServiceBase.GetByPrivateIdentifier(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key UK_PATNT_PRIVATE_ID index.
            </summary>
            <param name="_privateIdentifier"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientsServiceBase.GetBySndexSurnameSndexPrefrdForename(System.String,System.String)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_PATNT_PREFRD_SOUNDEX index.
            </summary>
            <param name="_sndexSurname"></param>
            <param name="_sndexPrefrdForename"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientsServiceBase.GetBySndexSurnameSndexPrefrdForename(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_PATNT_PREFRD_SOUNDEX index.
            </summary>
            <param name="_sndexSurname"></param>
            <param name="_sndexPrefrdForename"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientsServiceBase.GetBySndexSurnameSndexThirdForename(System.String,System.String)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_PATNT_THIRD_SNDEX index.
            </summary>
            <param name="_sndexSurname"></param>
            <param name="_sndexThirdForename"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientsServiceBase.GetBySndexSurnameSndexThirdForename(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_PATNT_THIRD_SNDEX index.
            </summary>
            <param name="_sndexSurname"></param>
            <param name="_sndexThirdForename"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientsServiceBase.GetByUpperSurnameUpperPrefrdForename(System.String,System.String)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_PATNT_PREFRD index.
            </summary>
            <param name="_upperSurname"></param>
            <param name="_upperPrefrdForename"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientsServiceBase.GetByUpperSurnameUpperPrefrdForename(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_PATNT_PREFRD index.
            </summary>
            <param name="_upperSurname"></param>
            <param name="_upperPrefrdForename"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientsServiceBase.GetByUpperSurnameUpperSecondForename(System.String,System.String)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_PATNT_SECOND index.
            </summary>
            <param name="_upperSurname"></param>
            <param name="_upperSecondForename"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientsServiceBase.GetByUpperSurnameUpperSecondForename(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_PATNT_SECOND index.
            </summary>
            <param name="_upperSurname"></param>
            <param name="_upperSecondForename"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientsServiceBase.GetBySndexSurnameSndexSecondForename(System.String,System.String)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_PATNT_SECOND_SNDEX index.
            </summary>
            <param name="_sndexSurname"></param>
            <param name="_sndexSecondForename"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientsServiceBase.GetBySndexSurnameSndexSecondForename(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_PATNT_SECOND_SNDEX index.
            </summary>
            <param name="_sndexSurname"></param>
            <param name="_sndexSecondForename"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientsServiceBase.GetByUpperSurnameUpperThirdForename(System.String,System.String)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_PATNT_THIRD index.
            </summary>
            <param name="_upperSurname"></param>
            <param name="_upperThirdForename"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientsServiceBase.GetByUpperSurnameUpperThirdForename(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_PATNT_THIRD index.
            </summary>
            <param name="_upperSurname"></param>
            <param name="_upperThirdForename"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientsServiceBase.GetByPatntRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_PATIENTS index.
            </summary>
            <param name="_patntRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Patients"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientsServiceBase.GetByPatntRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_PATIENTS index.
            </summary>
            <param name="_patntRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Patients"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientsServiceBase.GetBySearchSurname(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_PATNT_SEARCH_SURNAME index.
            </summary>
            <param name="_searchSurname"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientsServiceBase.GetBySearchSurname(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_PATNT_SEARCH_SURNAME index.
            </summary>
            <param name="_searchSurname"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientsServiceBase.GetByCntryRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PATNT_CNTRY index.
            </summary>
            <param name="_cntryRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientsServiceBase.GetByCntryRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PATNT_CNTRY index.
            </summary>
            <param name="_cntryRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientsServiceBase.GetByUpperSurnameUpperForename(System.String,System.String)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_PATNT_UPPER index.
            </summary>
            <param name="_upperSurname"></param>
            <param name="_upperForename"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientsServiceBase.GetByUpperSurnameUpperForename(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_PATNT_UPPER index.
            </summary>
            <param name="_upperSurname"></param>
            <param name="_upperForename"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientsServiceBase.GetByDecsdFlag(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_PATNT_DECSD index.
            </summary>
            <param name="_decsdFlag"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientsServiceBase.GetByDecsdFlag(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_PATNT_DECSD index.
            </summary>
            <param name="_decsdFlag"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientsServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Patients" /> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientsServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Patients" /> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> </returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientsServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Patients</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientsServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Patients</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientsServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Patients</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientsServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientsServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.Patients)">
            <summary>
            public virtual method that Inserts a Patients object into the datasource using a transaction.
            </summary>
            <param name="entity">Patients object to Insert.</param>
            <remarks>After Inserting into the datasource, the Patients object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Patients entity = new Patients();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	PatientsService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientsServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.Patients})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>Patients</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Patients</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Patients.
             <code><![CDATA[
             TList<Patients> list = new TList<Patients>();
             Patients entity = new Patients();
             entity.StringProperty = "foo";
             Patients entity2 = new Patients();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	PatientsService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientsServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.Patients)">
            <summary>
            public virtual method that Updates a Patients object into the datasource using a transaction.
            </summary>
            <param name="entity">Patients object to Update.</param>
            <remarks>After Updateing into the datasource, the Patients object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Patients entity = PatientsService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	PatientsService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientsServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.Patients})">
             <summary>
             public virtual method that Updates rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>Patients</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Patients</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Patients.
             <code><![CDATA[
             TList<Patients> list = new TList<Patients>();
             Patients entity = new Patients();
             entity.StringProperty = "foo";
             Patients entity2 = new Patients();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	PatientsService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientsServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.Patients)">
            <summary>
            public virtual method that Deletes a Patients object into the datasource using a transaction.
            </summary>
            <param name="entity">Patients object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Patients object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Patients entity = PatientsService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	PatientsService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientsServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.Patients})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>Patients</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Patients</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Patients.
             <code><![CDATA[
             TList<Patients> list = new TList<Patients>();
             Patients entity = new Patients();
             entity.StringProperty = "foo";
             Patients entity2 = new Patients();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	PatientsService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientsServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.PatientsKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientsServiceBase.Delete(System.Decimal)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Decimal _patntRefno
            </summary>
            <param name="_patntRefno">Patients pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.ServicePointsService">
            <summary>
            An component type implementation of the 'SERVICE_POINTS' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointsService.#ctor">
            <summary>
            Initializes a new instance of the ServicePointsService class.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointsService.GetByHeorgRefnoSptypRefnoHitypCode(System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key SERVICE_POINTS_INDEX1 index.
            </summary>
            <param name="_heorgRefno"></param>
            <param name="_sptypRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.ServicePointsServiceBase">
            <summary>
             An object representation of the 'SERVICE_POINTS' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ServicePoints.cs file instead.
             All custom implementations should be done in the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ServicePoints"/> class.
             </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointsServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ServicePoints"/> instance .
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointsServiceBase.CreateServicePoints(System.Decimal,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.String,System.String,System.DateTime,System.Nullable{System.DateTime},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.String,System.Nullable{System.Decimal},System.String,System.String,System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.String,System.String,System.String,System.Nullable{System.Decimal},System.String,System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ServicePoints"/> instance.
            </summary>
            <param name="_spontRefno"></param>
            <param name="_stranRefno"></param>
            <param name="_spectRefno"></param>
            <param name="_steamRefno"></param>
            <param name="_procaRefno"></param>
            <param name="_heorgRefno"></param>
            <param name="_code"></param>
            <param name="_description"></param>
            <param name="_name"></param>
            <param name="_startDttm"></param>
            <param name="_endDttm"></param>
            <param name="_purpsRefno"></param>
            <param name="_sptypRefno"></param>
            <param name="_curntFlag"></param>
            <param name="_archvFlag"></param>
            <param name="_priorPointer"></param>
            <param name="_externalKey"></param>
            <param name="_useBedManagement"></param>
            <param name="_horizValue"></param>
            <param name="_aeFlag"></param>
            <param name="_pdtypRefno"></param>
            <param name="_thtypRefno"></param>
            <param name="_sepAnaesRoom"></param>
            <param name="_sepRecovRoom"></param>
            <param name="_nominalDeptCode"></param>
            <param name="_instructions"></param>
            <param name="_groupClinicFlag"></param>
            <param name="_warnLevel"></param>
            <param name="_maxLevel"></param>
            <param name="_fcpurRefno"></param>
            <param name="_excludeHols"></param>
            <param name="_contactFlag"></param>
            <param name="_ownerHeorgRefno"></param>
            <param name="_reschMaxDiff"></param>
            <param name="_ageType"></param>
            <param name="_ageQualifier"></param>
            <param name="_autoDepartFlag"></param>
            <param name="_chgAcAuto"></param>
            <param name="_pbkFlag"></param>
            <param name="_pbkLeadTime"></param>
            <param name="_pbkLeadTimeUnits"></param>
            <param name="_leadTimeClinFlag"></param>
            <param name="_telephoneExt"></param>
            <param name="_biconRefno"></param>
            <param name="_pyagrRefno"></param>
            <param name="_eqitms"></param>
            <param name="_lccId"></param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.ServicePointsServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointsServiceBase.GetByPurpsRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_SPONT_PURPS key.
            	CNA_SPONT_PURPS Description: 
            </summary>
            <param name="_purpsRefno"></param>
            <returns>Returns a generic collection of ServicePoints objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointsServiceBase.GetByPurpsRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_SPONT_PURPS key.
            	CNA_SPONT_PURPS Description: 
            </summary>
            <param name="_purpsRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>ServicePoints</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointsServiceBase.Get(iSOFT.ANZ.PatientManagerService.Entities.ServicePointsKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointsServiceBase.GetBySptypRefnoHeorgRefno(System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key SERVICE_POINTS_INDEX1 index.
            </summary>
            <param name="_sptypRefno"></param>
            <param name="_heorgRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointsServiceBase.GetBySptypRefnoHeorgRefno(System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key SERVICE_POINTS_INDEX1 index.
            </summary>
            <param name="_sptypRefno"></param>
            <param name="_heorgRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointsServiceBase.GetBySteamRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SPONT_STEAM index.
            </summary>
            <param name="_steamRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointsServiceBase.GetBySteamRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SPONT_STEAM index.
            </summary>
            <param name="_steamRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointsServiceBase.GetBySpontRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_SERVICE_POINTS index.
            </summary>
            <param name="_spontRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ServicePoints"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointsServiceBase.GetBySpontRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_SERVICE_POINTS index.
            </summary>
            <param name="_spontRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ServicePoints"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointsServiceBase.GetByName(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_SPONT_NAME index.
            </summary>
            <param name="_name"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointsServiceBase.GetByName(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_SPONT_NAME index.
            </summary>
            <param name="_name"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointsServiceBase.GetBySptypRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SPONT_SPTYP index.
            </summary>
            <param name="_sptypRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointsServiceBase.GetBySptypRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SPONT_SPTYP index.
            </summary>
            <param name="_sptypRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointsServiceBase.GetByProcaRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SPONT_PROCA index.
            </summary>
            <param name="_procaRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointsServiceBase.GetByProcaRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SPONT_PROCA index.
            </summary>
            <param name="_procaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointsServiceBase.GetBySpectRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SPONT_SPECT index.
            </summary>
            <param name="_spectRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointsServiceBase.GetBySpectRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SPONT_SPECT index.
            </summary>
            <param name="_spectRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointsServiceBase.GetByHeorgRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SPONT_HEORG index.
            </summary>
            <param name="_heorgRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointsServiceBase.GetByHeorgRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SPONT_HEORG index.
            </summary>
            <param name="_heorgRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointsServiceBase.GetByCodeSptypRefno(System.String,System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_SPONT_CODE index.
            </summary>
            <param name="_code"></param>
            <param name="_sptypRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointsServiceBase.GetByCodeSptypRefno(System.String,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_SPONT_CODE index.
            </summary>
            <param name="_code"></param>
            <param name="_sptypRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointsServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ServicePoints" /> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointsServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ServicePoints" /> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> </returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointsServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ServicePoints</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointsServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ServicePoints</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointsServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ServicePoints</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointsServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointsServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.ServicePoints)">
            <summary>
            public virtual method that Inserts a ServicePoints object into the datasource using a transaction.
            </summary>
            <param name="entity">ServicePoints object to Insert.</param>
            <remarks>After Inserting into the datasource, the ServicePoints object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            ServicePoints entity = new ServicePoints();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ServicePointsService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointsServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.ServicePoints})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>ServicePoints</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>ServicePoints</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of ServicePoints.
             <code><![CDATA[
             TList<ServicePoints> list = new TList<ServicePoints>();
             ServicePoints entity = new ServicePoints();
             entity.StringProperty = "foo";
             ServicePoints entity2 = new ServicePoints();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ServicePointsService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointsServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.ServicePoints)">
            <summary>
            public virtual method that Updates a ServicePoints object into the datasource using a transaction.
            </summary>
            <param name="entity">ServicePoints object to Update.</param>
            <remarks>After Updateing into the datasource, the ServicePoints object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            ServicePoints entity = ServicePointsService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ServicePointsService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointsServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.ServicePoints})">
             <summary>
             public virtual method that Updates rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>ServicePoints</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>ServicePoints</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of ServicePoints.
             <code><![CDATA[
             TList<ServicePoints> list = new TList<ServicePoints>();
             ServicePoints entity = new ServicePoints();
             entity.StringProperty = "foo";
             ServicePoints entity2 = new ServicePoints();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ServicePointsService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointsServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.ServicePoints)">
            <summary>
            public virtual method that Deletes a ServicePoints object into the datasource using a transaction.
            </summary>
            <param name="entity">ServicePoints object to Delete.</param>
            <remarks>After Deleteing into the datasource, the ServicePoints object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            ServicePoints entity = ServicePointsService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ServicePointsService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointsServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.ServicePoints})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>ServicePoints</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>ServicePoints</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of ServicePoints.
             <code><![CDATA[
             TList<ServicePoints> list = new TList<ServicePoints>();
             ServicePoints entity = new ServicePoints();
             entity.StringProperty = "foo";
             ServicePoints entity2 = new ServicePoints();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ServicePointsService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointsServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.ServicePointsKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointsServiceBase.Delete(System.Decimal)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Decimal _spontRefno
            </summary>
            <param name="_spontRefno">ServicePoints pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.UsersService">
            <summary>
            An component type implementation of the 'USERS' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.UsersService.#ctor">
            <summary>
            Initializes a new instance of the UsersService class.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.UsersService.GetBySearch(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key UK_USERS_CODE index.
            </summary>
            <param name="_code"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.UsersServiceBase">
            <summary>
             An object representation of the 'USERS' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Users.cs file instead.
             All custom implementations should be done in the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Users"/> class.
             </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.UsersServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Users"/> instance .
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.UsersServiceBase.CreateUsers(System.Nullable{System.Decimal},System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.DateTime},System.String,System.String,System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Users"/> instance.
            </summary>
            <param name="_procaRefno"></param>
            <param name="_code"></param>
            <param name="_userName"></param>
            <param name="_department"></param>
            <param name="_externalKey"></param>
            <param name="_archvFlag"></param>
            <param name="_stranRefno"></param>
            <param name="_alterDttm"></param>
            <param name="_lockedFlag"></param>
            <param name="_lockedComments"></param>
            <param name="_email"></param>
            <param name="_eventsExistFlag"></param>
            <param name="_lastLogonDttm"></param>
            <param name="_loggedOn"></param>
            <param name="_changePasswordFlag"></param>
            <param name="_aclevRefno"></param>
            <param name="_ownerHeorgRefno"></param>
            <param name="_phoneNumber"></param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.UsersServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.UsersServiceBase.Get(iSOFT.ANZ.PatientManagerService.Entities.UsersKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.UsersServiceBase.GetByProcaRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_USERS_PROCA index.
            </summary>
            <param name="_procaRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.UsersServiceBase.GetByProcaRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_USERS_PROCA index.
            </summary>
            <param name="_procaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.UsersServiceBase.GetByUsersRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_USERS index.
            </summary>
            <param name="_usersRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Users"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.UsersServiceBase.GetByUsersRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_USERS index.
            </summary>
            <param name="_usersRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Users"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.UsersServiceBase.GetByAclevRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key UK_ACLEV index.
            </summary>
            <param name="_aclevRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.UsersServiceBase.GetByAclevRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key UK_ACLEV index.
            </summary>
            <param name="_aclevRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.UsersServiceBase.GetByCode(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key UK_USERS_CODE index.
            </summary>
            <param name="_code"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.UsersServiceBase.GetByCode(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key UK_USERS_CODE index.
            </summary>
            <param name="_code"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.UsersServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Users" /> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.UsersServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Users" /> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> </returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.UsersServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Users</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.UsersServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Users</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.UsersServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Users</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.UsersServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.UsersServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.Users)">
            <summary>
            public virtual method that Inserts a Users object into the datasource using a transaction.
            </summary>
            <param name="entity">Users object to Insert.</param>
            <remarks>After Inserting into the datasource, the Users object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Users entity = new Users();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	UsersService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.UsersServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.Users})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>Users</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Users</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Users.
             <code><![CDATA[
             TList<Users> list = new TList<Users>();
             Users entity = new Users();
             entity.StringProperty = "foo";
             Users entity2 = new Users();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	UsersService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.UsersServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.Users)">
            <summary>
            public virtual method that Updates a Users object into the datasource using a transaction.
            </summary>
            <param name="entity">Users object to Update.</param>
            <remarks>After Updateing into the datasource, the Users object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Users entity = UsersService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	UsersService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.UsersServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.Users})">
             <summary>
             public virtual method that Updates rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>Users</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Users</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Users.
             <code><![CDATA[
             TList<Users> list = new TList<Users>();
             Users entity = new Users();
             entity.StringProperty = "foo";
             Users entity2 = new Users();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	UsersService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.UsersServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.Users)">
            <summary>
            public virtual method that Deletes a Users object into the datasource using a transaction.
            </summary>
            <param name="entity">Users object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Users object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Users entity = UsersService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	UsersService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.UsersServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.Users})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>Users</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Users</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Users.
             <code><![CDATA[
             TList<Users> list = new TList<Users>();
             Users entity = new Users();
             entity.StringProperty = "foo";
             Users entity2 = new Users();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	UsersService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.UsersServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.UsersKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.UsersServiceBase.Delete(System.Decimal)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Decimal _usersRefno
            </summary>
            <param name="_usersRefno">Users pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.StaffTeamsService">
            <summary>
            An component type implementation of the 'STAFF_TEAMS' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.StaffTeamsService.#ctor">
            <summary>
            Initializes a new instance of the StaffTeamsService class.
            </summary>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.StaffTeamsServiceBase">
            <summary>
             An object representation of the 'STAFF_TEAMS' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the StaffTeams.cs file instead.
             All custom implementations should be done in the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.StaffTeams"/> class.
             </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.StaffTeamsServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.StaffTeams"/> instance .
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.StaffTeamsServiceBase.CreateStaffTeams(System.Decimal,System.DateTime,System.Nullable{System.DateTime},System.String,System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal})">
            <summary>
             A simple factory method to create a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.StaffTeams"/> instance.
            </summary>
            <param name="_steamRefno"></param>
            <param name="_startDttm"></param>
            <param name="_endDttm"></param>
            <param name="_description"></param>
            <param name="_name"></param>
            <param name="_code"></param>
            <param name="_sttypRefno"></param>
            <param name="_heorgRefno"></param>
            <param name="_spectRefno"></param>
            <param name="_leadrProcaRefno"></param>
            <param name="_archvFlag"></param>
            <param name="_stranRefno"></param>
            <param name="_externalKey"></param>
            <param name="_ownerHeorgRefno"></param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.StaffTeamsServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.StaffTeamsServiceBase.Get(iSOFT.ANZ.PatientManagerService.Entities.StaffTeamsKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.StaffTeamsServiceBase.GetByLeadrProcaRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_STEAM_LEADR_PROCA index.
            </summary>
            <param name="_leadrProcaRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.StaffTeamsServiceBase.GetByLeadrProcaRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_STEAM_LEADR_PROCA index.
            </summary>
            <param name="_leadrProcaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.StaffTeamsServiceBase.GetBySteamRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_STAFF_TEAMS index.
            </summary>
            <param name="_steamRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.StaffTeams"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.StaffTeamsServiceBase.GetBySteamRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_STAFF_TEAMS index.
            </summary>
            <param name="_steamRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.StaffTeams"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.StaffTeamsServiceBase.GetByHeorgRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_STEAM_HEORG index.
            </summary>
            <param name="_heorgRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.StaffTeamsServiceBase.GetByHeorgRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_STEAM_HEORG index.
            </summary>
            <param name="_heorgRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.StaffTeamsServiceBase.GetBySpectRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_STEAM_SPECT index.
            </summary>
            <param name="_spectRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.StaffTeamsServiceBase.GetBySpectRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_STEAM_SPECT index.
            </summary>
            <param name="_spectRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.StaffTeamsServiceBase.GetByCode(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key IDX_STEAM_CODE index.
            </summary>
            <param name="_code"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.StaffTeamsServiceBase.GetByCode(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key IDX_STEAM_CODE index.
            </summary>
            <param name="_code"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.StaffTeamsServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.StaffTeams" /> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.StaffTeamsServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.StaffTeams" /> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> </returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.StaffTeamsServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>StaffTeams</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.StaffTeamsServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>StaffTeams</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.StaffTeamsServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>StaffTeams</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.StaffTeamsServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.StaffTeamsServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.StaffTeams)">
            <summary>
            public virtual method that Inserts a StaffTeams object into the datasource using a transaction.
            </summary>
            <param name="entity">StaffTeams object to Insert.</param>
            <remarks>After Inserting into the datasource, the StaffTeams object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            StaffTeams entity = new StaffTeams();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	StaffTeamsService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.StaffTeamsServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.StaffTeams})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>StaffTeams</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>StaffTeams</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of StaffTeams.
             <code><![CDATA[
             TList<StaffTeams> list = new TList<StaffTeams>();
             StaffTeams entity = new StaffTeams();
             entity.StringProperty = "foo";
             StaffTeams entity2 = new StaffTeams();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	StaffTeamsService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.StaffTeamsServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.StaffTeams)">
            <summary>
            public virtual method that Updates a StaffTeams object into the datasource using a transaction.
            </summary>
            <param name="entity">StaffTeams object to Update.</param>
            <remarks>After Updateing into the datasource, the StaffTeams object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            StaffTeams entity = StaffTeamsService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	StaffTeamsService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.StaffTeamsServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.StaffTeams})">
             <summary>
             public virtual method that Updates rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>StaffTeams</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>StaffTeams</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of StaffTeams.
             <code><![CDATA[
             TList<StaffTeams> list = new TList<StaffTeams>();
             StaffTeams entity = new StaffTeams();
             entity.StringProperty = "foo";
             StaffTeams entity2 = new StaffTeams();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	StaffTeamsService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.StaffTeamsServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.StaffTeams)">
            <summary>
            public virtual method that Deletes a StaffTeams object into the datasource using a transaction.
            </summary>
            <param name="entity">StaffTeams object to Delete.</param>
            <remarks>After Deleteing into the datasource, the StaffTeams object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            StaffTeams entity = StaffTeamsService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	StaffTeamsService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.StaffTeamsServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.StaffTeams})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>StaffTeams</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>StaffTeams</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of StaffTeams.
             <code><![CDATA[
             TList<StaffTeams> list = new TList<StaffTeams>();
             StaffTeams entity = new StaffTeams();
             entity.StringProperty = "foo";
             StaffTeams entity2 = new StaffTeams();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	StaffTeamsService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.StaffTeamsServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.StaffTeamsKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.StaffTeamsServiceBase.Delete(System.Decimal)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Decimal _steamRefno
            </summary>
            <param name="_steamRefno">StaffTeams pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.ReferralsService">
            <summary>
            An component type implementation of the 'REFERRALS' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferralsService.#ctor">
            <summary>
            Initializes a new instance of the ReferralsService class.
            </summary>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.ReferralsServiceBase">
            <summary>
             An object representation of the 'REFERRALS' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Referrals.cs file instead.
             All custom implementations should be done in the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Referrals"/> class.
             </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferralsServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Referrals"/> instance .
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferralsServiceBase.CreateReferrals(System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Decimal,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.DateTime},System.Nullable{System.Decimal},System.Nullable{System.DateTime},System.Nullable{System.Decimal},System.String,System.Nullable{System.DateTime},System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.DateTime},System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.String,System.Nullable{System.DateTime},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.DateTime},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.DateTime},System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Referrals"/> instance.
            </summary>
            <param name="_refbySpectRefno"></param>
            <param name="_reftoSpectRefno"></param>
            <param name="_respSpectRefno"></param>
            <param name="_provdRefno"></param>
            <param name="_reftoSteamRefno"></param>
            <param name="_contrRefno"></param>
            <param name="_refbySteamRefno"></param>
            <param name="_purchRefno"></param>
            <param name="_patntRefno"></param>
            <param name="_respSteamRefno"></param>
            <param name="_priorRefno"></param>
            <param name="_sorrfRefno"></param>
            <param name="_recvdDttm"></param>
            <param name="_reasnRefno"></param>
            <param name="_cancdDttm"></param>
            <param name="_canrsRefno"></param>
            <param name="_comments"></param>
            <param name="_sentDttm"></param>
            <param name="_refbyReference"></param>
            <param name="_urgncRefno"></param>
            <param name="_prityRefno"></param>
            <param name="_authrRefno"></param>
            <param name="_authrDttm"></param>
            <param name="_letterSentFlag"></param>
            <param name="_otherHorscDttm"></param>
            <param name="_waitEndDttm"></param>
            <param name="_authrFlag"></param>
            <param name="_closrDate"></param>
            <param name="_ordtaDttm"></param>
            <param name="_refbyProcaRefno"></param>
            <param name="_refbyHeorgRefno"></param>
            <param name="_reftoProcaRefno"></param>
            <param name="_reftoHeorgRefno"></param>
            <param name="_reftoReference"></param>
            <param name="_rfocmRefno"></param>
            <param name="_archvFlag"></param>
            <param name="_stranRefno"></param>
            <param name="_priorPointer"></param>
            <param name="_externalKey"></param>
            <param name="_rstatRefno"></param>
            <param name="_rjectRefno"></param>
            <param name="_authrProcaRefno"></param>
            <param name="_authrHeorgRefno"></param>
            <param name="_authrSteamRefno"></param>
            <param name="_authrSpectRefno"></param>
            <param name="_respProcaRefno"></param>
            <param name="_respHeorgRefno"></param>
            <param name="_mhcepRefno"></param>
            <param name="_ctrsvRefno"></param>
            <param name="_retypRefno"></param>
            <param name="_pocarRefno"></param>
            <param name="_parntRefno"></param>
            <param name="_lastContactDttm"></param>
            <param name="_nextContactDttm"></param>
            <param name="_suspStartDttm"></param>
            <param name="_suspEndDttm"></param>
            <param name="_susrsRefno"></param>
            <param name="_rqurgRefno"></param>
            <param name="_austsRefno"></param>
            <param name="_aurqsDttm"></param>
            <param name="_cnsltDttm"></param>
            <param name="_cstatRefno"></param>
            <param name="_adcatRefno"></param>
            <param name="_actypRefno"></param>
            <param name="_clinicalPriority"></param>
            <param name="_accrlRefno"></param>
            <param name="_acctyRefno"></param>
            <param name="_accNumber"></param>
            <param name="_accasRefno"></param>
            <param name="_accClaimNumber"></param>
            <param name="_expiryDttm"></param>
            <param name="_reftoWardSpontRefno"></param>
            <param name="_reftoClinicSpontRefno"></param>
            <param name="_description"></param>
            <param name="_clmasRefno"></param>
            <param name="_clorsRefno"></param>
            <param name="_aclevRefno"></param>
            <param name="_ownerHeorgRefno"></param>
            <param name="_campusRefno"></param>
            <param name="_nonAppsvrModifDttm"></param>
            <param name="_userRefno"></param>
            <param name="_reftoRefno"></param>
            <param name="_consentGiven"></param>
            <param name="_conseRefno"></param>
            <param name="_prevEpid"></param>
            <param name="_rfvpdRefno"></param>
            <param name="_rfotyRefno"></param>
            <param name="_fundaRefno"></param>
            <param name="_progrRefno"></param>
            <param name="_subprRefno"></param>
            <param name="_repakDttm"></param>
            <param name="_reftoCntname"></param>
            <param name="_refbyCntname"></param>
            <param name="_steamProcaRefno"></param>
            <param name="_refbyPercaRefno"></param>
            <param name="_arfcxRefno"></param>
            <param name="_accicRefno"></param>
            <param name="_accLinkFlag"></param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.ReferralsServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferralsServiceBase.GetByAustsRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_REFRL_AUSTS key.
            	CNA_REFRL_AUSTS Description: 
            </summary>
            <param name="_austsRefno"></param>
            <returns>Returns a generic collection of Referrals objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferralsServiceBase.GetByAustsRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_REFRL_AUSTS key.
            	CNA_REFRL_AUSTS Description: 
            </summary>
            <param name="_austsRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>Referrals</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferralsServiceBase.GetByCanrsRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_REFRL_CANRS key.
            	CNA_REFRL_CANRS Description: 
            </summary>
            <param name="_canrsRefno"></param>
            <returns>Returns a generic collection of Referrals objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferralsServiceBase.GetByCanrsRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_REFRL_CANRS key.
            	CNA_REFRL_CANRS Description: 
            </summary>
            <param name="_canrsRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>Referrals</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferralsServiceBase.GetByCstatRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_REFRL_CSTAT key.
            	CNA_REFRL_CSTAT Description: 
            </summary>
            <param name="_cstatRefno"></param>
            <returns>Returns a generic collection of Referrals objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferralsServiceBase.GetByCstatRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_REFRL_CSTAT key.
            	CNA_REFRL_CSTAT Description: 
            </summary>
            <param name="_cstatRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>Referrals</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferralsServiceBase.GetByPrityRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_REFRL_PRITY key.
            	CNA_REFRL_PRITY Description: 
            </summary>
            <param name="_prityRefno"></param>
            <returns>Returns a generic collection of Referrals objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferralsServiceBase.GetByPrityRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_REFRL_PRITY key.
            	CNA_REFRL_PRITY Description: 
            </summary>
            <param name="_prityRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>Referrals</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferralsServiceBase.GetByReasnRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_REFRL_REASN key.
            	CNA_REFRL_REASN Description: 
            </summary>
            <param name="_reasnRefno"></param>
            <returns>Returns a generic collection of Referrals objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferralsServiceBase.GetByReasnRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_REFRL_REASN key.
            	CNA_REFRL_REASN Description: 
            </summary>
            <param name="_reasnRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>Referrals</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferralsServiceBase.GetByRfocmRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_REFRL_RFOCM key.
            	CNA_REFRL_RFOCM Description: 
            </summary>
            <param name="_rfocmRefno"></param>
            <returns>Returns a generic collection of Referrals objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferralsServiceBase.GetByRfocmRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_REFRL_RFOCM key.
            	CNA_REFRL_RFOCM Description: 
            </summary>
            <param name="_rfocmRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>Referrals</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferralsServiceBase.GetByRjectRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_REFRL_RJECT key.
            	CNA_REFRL_RJECT Description: 
            </summary>
            <param name="_rjectRefno"></param>
            <returns>Returns a generic collection of Referrals objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferralsServiceBase.GetByRjectRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_REFRL_RJECT key.
            	CNA_REFRL_RJECT Description: 
            </summary>
            <param name="_rjectRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>Referrals</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferralsServiceBase.GetByRqurgRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_REFRL_RQURG key.
            	CNA_REFRL_RQURG Description: 
            </summary>
            <param name="_rqurgRefno"></param>
            <returns>Returns a generic collection of Referrals objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferralsServiceBase.GetByRqurgRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_REFRL_RQURG key.
            	CNA_REFRL_RQURG Description: 
            </summary>
            <param name="_rqurgRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>Referrals</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferralsServiceBase.GetByRstatRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_REFRL_RSTAT key.
            	CNA_REFRL_RSTAT Description: 
            </summary>
            <param name="_rstatRefno"></param>
            <returns>Returns a generic collection of Referrals objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferralsServiceBase.GetByRstatRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_REFRL_RSTAT key.
            	CNA_REFRL_RSTAT Description: 
            </summary>
            <param name="_rstatRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>Referrals</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferralsServiceBase.GetBySorrfRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_REFRL_SORRF key.
            	CNA_REFRL_SORRF Description: 
            </summary>
            <param name="_sorrfRefno"></param>
            <returns>Returns a generic collection of Referrals objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferralsServiceBase.GetBySorrfRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_REFRL_SORRF key.
            	CNA_REFRL_SORRF Description: 
            </summary>
            <param name="_sorrfRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>Referrals</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferralsServiceBase.GetBySusrsRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_REFRL_SUSRS key.
            	CNA_REFRL_SUSRS Description: 
            </summary>
            <param name="_susrsRefno"></param>
            <returns>Returns a generic collection of Referrals objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferralsServiceBase.GetBySusrsRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_REFRL_SUSRS key.
            	CNA_REFRL_SUSRS Description: 
            </summary>
            <param name="_susrsRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>Referrals</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferralsServiceBase.GetByUrgncRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_REFRL_URGNC key.
            	CNA_REFRL_URGNC Description: 
            </summary>
            <param name="_urgncRefno"></param>
            <returns>Returns a generic collection of Referrals objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferralsServiceBase.GetByUrgncRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_REFRL_URGNC key.
            	CNA_REFRL_URGNC Description: 
            </summary>
            <param name="_urgncRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>Referrals</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferralsServiceBase.Get(iSOFT.ANZ.PatientManagerService.Entities.ReferralsKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferralsServiceBase.GetByRefrlRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_REFERRALS index.
            </summary>
            <param name="_refrlRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Referrals"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferralsServiceBase.GetByRefrlRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_REFERRALS index.
            </summary>
            <param name="_refrlRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Referrals"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferralsServiceBase.GetByAuthrRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_REFRL_AUTHR index.
            </summary>
            <param name="_authrRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferralsServiceBase.GetByAuthrRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_REFRL_AUTHR index.
            </summary>
            <param name="_authrRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferralsServiceBase.GetByAuthrHeorgRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_REFRL_AUTHR_HEORG index.
            </summary>
            <param name="_authrHeorgRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferralsServiceBase.GetByAuthrHeorgRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_REFRL_AUTHR_HEORG index.
            </summary>
            <param name="_authrHeorgRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferralsServiceBase.GetByAuthrProcaRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_REFRL_AUTHR_PROCA index.
            </summary>
            <param name="_authrProcaRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferralsServiceBase.GetByAuthrProcaRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_REFRL_AUTHR_PROCA index.
            </summary>
            <param name="_authrProcaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferralsServiceBase.GetByAuthrSpectRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_REFRL_AUTHR_SPECT index.
            </summary>
            <param name="_authrSpectRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferralsServiceBase.GetByAuthrSpectRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_REFRL_AUTHR_SPECT index.
            </summary>
            <param name="_authrSpectRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferralsServiceBase.GetByAuthrSteamRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_REFRL_AUTHR_STEAM index.
            </summary>
            <param name="_authrSteamRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferralsServiceBase.GetByAuthrSteamRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_REFRL_AUTHR_STEAM index.
            </summary>
            <param name="_authrSteamRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferralsServiceBase.GetByContrRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_REFRL_CONTR index.
            </summary>
            <param name="_contrRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferralsServiceBase.GetByContrRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_REFRL_CONTR index.
            </summary>
            <param name="_contrRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferralsServiceBase.GetByCtrsvRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_REFRL_CTRSV index.
            </summary>
            <param name="_ctrsvRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferralsServiceBase.GetByCtrsvRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_REFRL_CTRSV index.
            </summary>
            <param name="_ctrsvRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferralsServiceBase.GetByMhcepRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_REFRL_MHCEP index.
            </summary>
            <param name="_mhcepRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferralsServiceBase.GetByMhcepRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_REFRL_MHCEP index.
            </summary>
            <param name="_mhcepRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferralsServiceBase.GetByParntRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_REFRL_PARNT index.
            </summary>
            <param name="_parntRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferralsServiceBase.GetByParntRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_REFRL_PARNT index.
            </summary>
            <param name="_parntRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferralsServiceBase.GetByPatntRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_REFRL_PATNT index.
            </summary>
            <param name="_patntRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferralsServiceBase.GetByPatntRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_REFRL_PATNT index.
            </summary>
            <param name="_patntRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferralsServiceBase.GetByPocarRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_REFRL_POCAR index.
            </summary>
            <param name="_pocarRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferralsServiceBase.GetByPocarRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_REFRL_POCAR index.
            </summary>
            <param name="_pocarRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferralsServiceBase.GetByPriorRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_REFRL_PRIOR index.
            </summary>
            <param name="_priorRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferralsServiceBase.GetByPriorRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_REFRL_PRIOR index.
            </summary>
            <param name="_priorRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferralsServiceBase.GetByProvdRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_REFRL_PROVD index.
            </summary>
            <param name="_provdRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferralsServiceBase.GetByProvdRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_REFRL_PROVD index.
            </summary>
            <param name="_provdRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferralsServiceBase.GetByPurchRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_REFRL_PURCH index.
            </summary>
            <param name="_purchRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferralsServiceBase.GetByPurchRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_REFRL_PURCH index.
            </summary>
            <param name="_purchRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferralsServiceBase.GetByRefbyHeorgRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_REFRL_REFBY_HEORG index.
            </summary>
            <param name="_refbyHeorgRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferralsServiceBase.GetByRefbyHeorgRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_REFRL_REFBY_HEORG index.
            </summary>
            <param name="_refbyHeorgRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferralsServiceBase.GetByRefbyProcaRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_REFRL_REFBY_PROCA index.
            </summary>
            <param name="_refbyProcaRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferralsServiceBase.GetByRefbyProcaRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_REFRL_REFBY_PROCA index.
            </summary>
            <param name="_refbyProcaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferralsServiceBase.GetByRefbySpectRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_REFRL_REFBY_SPECT index.
            </summary>
            <param name="_refbySpectRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferralsServiceBase.GetByRefbySpectRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_REFRL_REFBY_SPECT index.
            </summary>
            <param name="_refbySpectRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferralsServiceBase.GetByRefbySteamRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_REFRL_REFBY_STEAM index.
            </summary>
            <param name="_refbySteamRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferralsServiceBase.GetByRefbySteamRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_REFRL_REFBY_STEAM index.
            </summary>
            <param name="_refbySteamRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferralsServiceBase.GetByReftoClinicSpontRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_REFRL_REFTO_CLINIC_SPONT index.
            </summary>
            <param name="_reftoClinicSpontRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferralsServiceBase.GetByReftoClinicSpontRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_REFRL_REFTO_CLINIC_SPONT index.
            </summary>
            <param name="_reftoClinicSpontRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferralsServiceBase.GetByReftoHeorgRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_REFRL_REFTO_HEORG index.
            </summary>
            <param name="_reftoHeorgRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferralsServiceBase.GetByReftoHeorgRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_REFRL_REFTO_HEORG index.
            </summary>
            <param name="_reftoHeorgRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferralsServiceBase.GetByReftoProcaRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_REFRL_REFTO_PROCA index.
            </summary>
            <param name="_reftoProcaRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferralsServiceBase.GetByReftoProcaRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_REFRL_REFTO_PROCA index.
            </summary>
            <param name="_reftoProcaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferralsServiceBase.GetByReftoSpectRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_REFRL_REFTO_SPECT index.
            </summary>
            <param name="_reftoSpectRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferralsServiceBase.GetByReftoSpectRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_REFRL_REFTO_SPECT index.
            </summary>
            <param name="_reftoSpectRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferralsServiceBase.GetByReftoSteamRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_REFRL_REFTO_STEAM index.
            </summary>
            <param name="_reftoSteamRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferralsServiceBase.GetByReftoSteamRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_REFRL_REFTO_STEAM index.
            </summary>
            <param name="_reftoSteamRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferralsServiceBase.GetByReftoWardSpontRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_REFRL_REFTO_WARD_SPONT index.
            </summary>
            <param name="_reftoWardSpontRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferralsServiceBase.GetByReftoWardSpontRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_REFRL_REFTO_WARD_SPONT index.
            </summary>
            <param name="_reftoWardSpontRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferralsServiceBase.GetByRespHeorgRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_REFRL_RESP_HEORG index.
            </summary>
            <param name="_respHeorgRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferralsServiceBase.GetByRespHeorgRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_REFRL_RESP_HEORG index.
            </summary>
            <param name="_respHeorgRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferralsServiceBase.GetByRespProcaRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_REFRL_RESP_PROCA index.
            </summary>
            <param name="_respProcaRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferralsServiceBase.GetByRespProcaRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_REFRL_RESP_PROCA index.
            </summary>
            <param name="_respProcaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferralsServiceBase.GetByRespSpectRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_REFRL_RESP_SPECT index.
            </summary>
            <param name="_respSpectRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferralsServiceBase.GetByRespSpectRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_REFRL_RESP_SPECT index.
            </summary>
            <param name="_respSpectRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferralsServiceBase.GetByRespSteamRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_REFRL_RESP_STEAM index.
            </summary>
            <param name="_respSteamRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferralsServiceBase.GetByRespSteamRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_REFRL_RESP_STEAM index.
            </summary>
            <param name="_respSteamRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferralsServiceBase.GetByRetypRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key REFERRALS_RETYP index.
            </summary>
            <param name="_retypRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferralsServiceBase.GetByRetypRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key REFERRALS_RETYP index.
            </summary>
            <param name="_retypRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferralsServiceBase.GetByAccrlRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key SAH_ACCRL_REFERRAL index.
            </summary>
            <param name="_accrlRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferralsServiceBase.GetByAccrlRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key SAH_ACCRL_REFERRAL index.
            </summary>
            <param name="_accrlRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferralsServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Referrals" /> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferralsServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Referrals" /> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> </returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferralsServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Referrals</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferralsServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Referrals</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferralsServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Referrals</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferralsServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferralsServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.Referrals)">
            <summary>
            public virtual method that Inserts a Referrals object into the datasource using a transaction.
            </summary>
            <param name="entity">Referrals object to Insert.</param>
            <remarks>After Inserting into the datasource, the Referrals object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Referrals entity = new Referrals();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ReferralsService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferralsServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.Referrals})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>Referrals</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Referrals</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Referrals.
             <code><![CDATA[
             TList<Referrals> list = new TList<Referrals>();
             Referrals entity = new Referrals();
             entity.StringProperty = "foo";
             Referrals entity2 = new Referrals();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ReferralsService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferralsServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.Referrals)">
            <summary>
            public virtual method that Updates a Referrals object into the datasource using a transaction.
            </summary>
            <param name="entity">Referrals object to Update.</param>
            <remarks>After Updateing into the datasource, the Referrals object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Referrals entity = ReferralsService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ReferralsService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferralsServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.Referrals})">
             <summary>
             public virtual method that Updates rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>Referrals</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Referrals</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Referrals.
             <code><![CDATA[
             TList<Referrals> list = new TList<Referrals>();
             Referrals entity = new Referrals();
             entity.StringProperty = "foo";
             Referrals entity2 = new Referrals();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ReferralsService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferralsServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.Referrals)">
            <summary>
            public virtual method that Deletes a Referrals object into the datasource using a transaction.
            </summary>
            <param name="entity">Referrals object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Referrals object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Referrals entity = ReferralsService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ReferralsService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferralsServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.Referrals})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>Referrals</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Referrals</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Referrals.
             <code><![CDATA[
             TList<Referrals> list = new TList<Referrals>();
             Referrals entity = new Referrals();
             entity.StringProperty = "foo";
             Referrals entity2 = new Referrals();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ReferralsService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferralsServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.ReferralsKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferralsServiceBase.Delete(System.Decimal)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Decimal _refrlRefno
            </summary>
            <param name="_refrlRefno">Referrals pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.ServicePointSessionsService">
            <summary>
            An component type implementation of the 'SERVICE_POINT_SESSIONS' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointSessionsService.#ctor">
            <summary>
            Initializes a new instance of the ServicePointSessionsService class.
            </summary>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.ServicePointSessionsServiceBase">
            <summary>
             An object representation of the 'SERVICE_POINT_SESSIONS' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ServicePointSessions.cs file instead.
             All custom implementations should be done in the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ServicePointSessions"/> class.
             </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointSessionsServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ServicePointSessions"/> instance .
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointSessionsServiceBase.CreateServicePointSessions(System.Decimal,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Decimal,System.DateTime,System.Nullable{System.DateTime},System.Decimal,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Decimal,System.String,System.Nullable{System.Decimal},System.String,System.String,System.String,System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Decimal,System.Decimal,System.Decimal,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.DateTime},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.DateTime},System.String,System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.DateTime},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.String,System.String,System.Nullable{System.Decimal},System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ServicePointSessions"/> instance.
            </summary>
            <param name="_spssnRefno"></param>
            <param name="_spectRefno"></param>
            <param name="_stranRefno"></param>
            <param name="_steamRefno"></param>
            <param name="_heorgRefno"></param>
            <param name="_procaRefno"></param>
            <param name="_spontRefno"></param>
            <param name="_startDttm"></param>
            <param name="_endDttm"></param>
            <param name="_slotDuration"></param>
            <param name="_dayowRefno"></param>
            <param name="_sstatRefno"></param>
            <param name="_sessionDuration"></param>
            <param name="_archvFlag"></param>
            <param name="_priorPointer"></param>
            <param name="_dirtyFlag"></param>
            <param name="_templateFlag"></param>
            <param name="_externalKey"></param>
            <param name="_code"></param>
            <param name="_description"></param>
            <param name="_cancelDttm"></param>
            <param name="_freqnRefno"></param>
            <param name="_freofRefno"></param>
            <param name="_freof2Refno"></param>
            <param name="_freof3Refno"></param>
            <param name="_freof4Refno"></param>
            <param name="_tmpltRefno"></param>
            <param name="_purpsRefno"></param>
            <param name="_comments"></param>
            <param name="_sschrRefno"></param>
            <param name="_daysAhead"></param>
            <param name="_daysBehind"></param>
            <param name="_ssstsRefno"></param>
            <param name="_ssensRefno"></param>
            <param name="_sssrsRefno"></param>
            <param name="_ssersRefno"></param>
            <param name="_stcrbRefno"></param>
            <param name="_sestyRefno"></param>
            <param name="_overbookTol"></param>
            <param name="_closingDttm"></param>
            <param name="_maxPatients"></param>
            <param name="_slateRefno"></param>
            <param name="_instructions"></param>
            <param name="_actualProcaRefno"></param>
            <param name="_procaArrivedDttm"></param>
            <param name="_procaDepartedDttm"></param>
            <param name="_groupClinicFlag"></param>
            <param name="_warnLevel"></param>
            <param name="_fcpurRefno"></param>
            <param name="_ownerHeorgRefno"></param>
            <param name="_finalFlag"></param>
            <param name="_varSlotsFlag"></param>
            <param name="_sdlrsRefno"></param>
            <param name="_sfrqnRefno"></param>
            <param name="_sfrofRefno"></param>
            <param name="_onWeeks"></param>
            <param name="_onDays"></param>
            <param name="_daysInWeek1"></param>
            <param name="_daysInWeek2"></param>
            <param name="_daysInWeek3"></param>
            <param name="_daysInWeek4"></param>
            <param name="_daysInWeek5"></param>
            <param name="_daysInWeekl"></param>
            <param name="_excludeHols"></param>
            <param name="_reschFromDttm"></param>
            <param name="_copyOverbookFlag"></param>
            <param name="_reschEarlier"></param>
            <param name="_useOverbookFlag"></param>
            <param name="_reschMaxDiff"></param>
            <param name="_restuFromDttm"></param>
            <param name="_startDelay"></param>
            <param name="_pbkFlag"></param>
            <param name="_pbkLeadTime"></param>
            <param name="_pbkLeadTimeUnits"></param>
            <param name="_leadTimeClinFlag"></param>
            <param name="_biconRefno"></param>
            <param name="_defltPayeeProvFlag"></param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.ServicePointSessionsServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointSessionsServiceBase.GetByDayowRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_SPSSN_DAYOW key.
            	CNA_SPSSN_DAYOW Description: 
            </summary>
            <param name="_dayowRefno"></param>
            <returns>Returns a generic collection of ServicePointSessions objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointSessionsServiceBase.GetByDayowRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_SPSSN_DAYOW key.
            	CNA_SPSSN_DAYOW Description: 
            </summary>
            <param name="_dayowRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>ServicePointSessions</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointSessionsServiceBase.GetByFreofRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_SPSSN_FREOF key.
            	CNA_SPSSN_FREOF Description: 
            </summary>
            <param name="_freofRefno"></param>
            <returns>Returns a generic collection of ServicePointSessions objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointSessionsServiceBase.GetByFreofRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_SPSSN_FREOF key.
            	CNA_SPSSN_FREOF Description: 
            </summary>
            <param name="_freofRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>ServicePointSessions</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointSessionsServiceBase.GetByFreof2Refno(System.Decimal)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_SPSSN_FREOF2 key.
            	CNA_SPSSN_FREOF2 Description: 
            </summary>
            <param name="_freof2Refno"></param>
            <returns>Returns a generic collection of ServicePointSessions objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointSessionsServiceBase.GetByFreof2Refno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_SPSSN_FREOF2 key.
            	CNA_SPSSN_FREOF2 Description: 
            </summary>
            <param name="_freof2Refno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>ServicePointSessions</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointSessionsServiceBase.GetByFreof3Refno(System.Decimal)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_SPSSN_FREOF3 key.
            	CNA_SPSSN_FREOF3 Description: 
            </summary>
            <param name="_freof3Refno"></param>
            <returns>Returns a generic collection of ServicePointSessions objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointSessionsServiceBase.GetByFreof3Refno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_SPSSN_FREOF3 key.
            	CNA_SPSSN_FREOF3 Description: 
            </summary>
            <param name="_freof3Refno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>ServicePointSessions</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointSessionsServiceBase.GetByFreof4Refno(System.Decimal)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_SPSSN_FREOF4 key.
            	CNA_SPSSN_FREOF4 Description: 
            </summary>
            <param name="_freof4Refno"></param>
            <returns>Returns a generic collection of ServicePointSessions objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointSessionsServiceBase.GetByFreof4Refno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_SPSSN_FREOF4 key.
            	CNA_SPSSN_FREOF4 Description: 
            </summary>
            <param name="_freof4Refno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>ServicePointSessions</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointSessionsServiceBase.GetByFreqnRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_SPSSN_FREQN key.
            	CNA_SPSSN_FREQN Description: 
            </summary>
            <param name="_freqnRefno"></param>
            <returns>Returns a generic collection of ServicePointSessions objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointSessionsServiceBase.GetByFreqnRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_SPSSN_FREQN key.
            	CNA_SPSSN_FREQN Description: 
            </summary>
            <param name="_freqnRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>ServicePointSessions</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointSessionsServiceBase.GetByPurpsRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_SPSSN_PURPS key.
            	CNA_SPSSN_PURPS Description: 
            </summary>
            <param name="_purpsRefno"></param>
            <returns>Returns a generic collection of ServicePointSessions objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointSessionsServiceBase.GetByPurpsRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_SPSSN_PURPS key.
            	CNA_SPSSN_PURPS Description: 
            </summary>
            <param name="_purpsRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>ServicePointSessions</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointSessionsServiceBase.GetBySschrRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_SPSSN_SSCHR key.
            	CNA_SPSSN_SSCHR Description: 
            </summary>
            <param name="_sschrRefno"></param>
            <returns>Returns a generic collection of ServicePointSessions objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointSessionsServiceBase.GetBySschrRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_SPSSN_SSCHR key.
            	CNA_SPSSN_SSCHR Description: 
            </summary>
            <param name="_sschrRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>ServicePointSessions</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointSessionsServiceBase.GetBySsensRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_SPSSN_SSENS key.
            	CNA_SPSSN_SSENS Description: 
            </summary>
            <param name="_ssensRefno"></param>
            <returns>Returns a generic collection of ServicePointSessions objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointSessionsServiceBase.GetBySsensRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_SPSSN_SSENS key.
            	CNA_SPSSN_SSENS Description: 
            </summary>
            <param name="_ssensRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>ServicePointSessions</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointSessionsServiceBase.GetBySsersRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_SPSSN_SSERS key.
            	CNA_SPSSN_SSERS Description: 
            </summary>
            <param name="_ssersRefno"></param>
            <returns>Returns a generic collection of ServicePointSessions objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointSessionsServiceBase.GetBySsersRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_SPSSN_SSERS key.
            	CNA_SPSSN_SSERS Description: 
            </summary>
            <param name="_ssersRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>ServicePointSessions</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointSessionsServiceBase.GetBySssrsRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_SPSSN_SSSRS key.
            	CNA_SPSSN_SSSRS Description: 
            </summary>
            <param name="_sssrsRefno"></param>
            <returns>Returns a generic collection of ServicePointSessions objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointSessionsServiceBase.GetBySssrsRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_SPSSN_SSSRS key.
            	CNA_SPSSN_SSSRS Description: 
            </summary>
            <param name="_sssrsRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>ServicePointSessions</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointSessionsServiceBase.GetBySsstsRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_SPSSN_SSSTS key.
            	CNA_SPSSN_SSSTS Description: 
            </summary>
            <param name="_ssstsRefno"></param>
            <returns>Returns a generic collection of ServicePointSessions objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointSessionsServiceBase.GetBySsstsRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_SPSSN_SSSTS key.
            	CNA_SPSSN_SSSTS Description: 
            </summary>
            <param name="_ssstsRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>ServicePointSessions</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointSessionsServiceBase.GetBySstatRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_SPSSN_SSTAT key.
            	CNA_SPSSN_SSTAT Description: 
            </summary>
            <param name="_sstatRefno"></param>
            <returns>Returns a generic collection of ServicePointSessions objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointSessionsServiceBase.GetBySstatRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_SPSSN_SSTAT key.
            	CNA_SPSSN_SSTAT Description: 
            </summary>
            <param name="_sstatRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>ServicePointSessions</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointSessionsServiceBase.GetByStcrbRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_SPSSN_STCRB key.
            	CNA_SPSSN_STCRB Description: 
            </summary>
            <param name="_stcrbRefno"></param>
            <returns>Returns a generic collection of ServicePointSessions objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointSessionsServiceBase.GetByStcrbRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_SPSSN_STCRB key.
            	CNA_SPSSN_STCRB Description: 
            </summary>
            <param name="_stcrbRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>ServicePointSessions</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointSessionsServiceBase.Get(iSOFT.ANZ.PatientManagerService.Entities.ServicePointSessionsKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointSessionsServiceBase.GetByTemplateFlagDirtyFlag(System.String,System.String)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key SAH_SPSSN_TMPLT_DIRTY index.
            </summary>
            <param name="_templateFlag"></param>
            <param name="_dirtyFlag"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointSessionsServiceBase.GetByTemplateFlagDirtyFlag(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key SAH_SPSSN_TMPLT_DIRTY index.
            </summary>
            <param name="_templateFlag"></param>
            <param name="_dirtyFlag"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointSessionsServiceBase.GetByActualProcaRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SPSSN_ACTUAL_PROCA index.
            </summary>
            <param name="_actualProcaRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointSessionsServiceBase.GetByActualProcaRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SPSSN_ACTUAL_PROCA index.
            </summary>
            <param name="_actualProcaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointSessionsServiceBase.GetByCode(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_SPSSN_CODE index.
            </summary>
            <param name="_code"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointSessionsServiceBase.GetByCode(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_SPSSN_CODE index.
            </summary>
            <param name="_code"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointSessionsServiceBase.GetBySpontRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SPSSN_SPONT index.
            </summary>
            <param name="_spontRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointSessionsServiceBase.GetBySpontRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SPSSN_SPONT index.
            </summary>
            <param name="_spontRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointSessionsServiceBase.GetByTmpltRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SPSSN_TMPLT index.
            </summary>
            <param name="_tmpltRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointSessionsServiceBase.GetByTmpltRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SPSSN_TMPLT index.
            </summary>
            <param name="_tmpltRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointSessionsServiceBase.GetByTmpltRefnoSpssnRefno(System.Nullable{System.Decimal},System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SPSSN_TMPLT_SPSSN index.
            </summary>
            <param name="_tmpltRefno"></param>
            <param name="_spssnRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointSessionsServiceBase.GetByTmpltRefnoSpssnRefno(System.Nullable{System.Decimal},System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SPSSN_TMPLT_SPSSN index.
            </summary>
            <param name="_tmpltRefno"></param>
            <param name="_spssnRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointSessionsServiceBase.GetBySpectRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SPSSN_SPECT index.
            </summary>
            <param name="_spectRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointSessionsServiceBase.GetBySpectRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SPSSN_SPECT index.
            </summary>
            <param name="_spectRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointSessionsServiceBase.GetByHeorgRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SPSSN_HEORG index.
            </summary>
            <param name="_heorgRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointSessionsServiceBase.GetByHeorgRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SPSSN_HEORG index.
            </summary>
            <param name="_heorgRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointSessionsServiceBase.GetByProcaRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SPSSN_PROCA index.
            </summary>
            <param name="_procaRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointSessionsServiceBase.GetByProcaRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SPSSN_PROCA index.
            </summary>
            <param name="_procaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointSessionsServiceBase.GetBySteamRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SPSSN_STEAM index.
            </summary>
            <param name="_steamRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointSessionsServiceBase.GetBySteamRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SPSSN_STEAM index.
            </summary>
            <param name="_steamRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointSessionsServiceBase.GetBySpssnRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_SERVICE_POINT_SESSIONS index.
            </summary>
            <param name="_spssnRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ServicePointSessions"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointSessionsServiceBase.GetBySpssnRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_SERVICE_POINT_SESSIONS index.
            </summary>
            <param name="_spssnRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ServicePointSessions"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointSessionsServiceBase.GetByArchvFlag(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_SPSSN_ARCH index.
            </summary>
            <param name="_archvFlag"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointSessionsServiceBase.GetByArchvFlag(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_SPSSN_ARCH index.
            </summary>
            <param name="_archvFlag"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointSessionsServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ServicePointSessions" /> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointSessionsServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ServicePointSessions" /> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> </returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointSessionsServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ServicePointSessions</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointSessionsServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ServicePointSessions</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointSessionsServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ServicePointSessions</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointSessionsServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointSessionsServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.ServicePointSessions)">
            <summary>
            public virtual method that Inserts a ServicePointSessions object into the datasource using a transaction.
            </summary>
            <param name="entity">ServicePointSessions object to Insert.</param>
            <remarks>After Inserting into the datasource, the ServicePointSessions object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            ServicePointSessions entity = new ServicePointSessions();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ServicePointSessionsService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointSessionsServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.ServicePointSessions})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>ServicePointSessions</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>ServicePointSessions</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of ServicePointSessions.
             <code><![CDATA[
             TList<ServicePointSessions> list = new TList<ServicePointSessions>();
             ServicePointSessions entity = new ServicePointSessions();
             entity.StringProperty = "foo";
             ServicePointSessions entity2 = new ServicePointSessions();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ServicePointSessionsService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointSessionsServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.ServicePointSessions)">
            <summary>
            public virtual method that Updates a ServicePointSessions object into the datasource using a transaction.
            </summary>
            <param name="entity">ServicePointSessions object to Update.</param>
            <remarks>After Updateing into the datasource, the ServicePointSessions object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            ServicePointSessions entity = ServicePointSessionsService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ServicePointSessionsService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointSessionsServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.ServicePointSessions})">
             <summary>
             public virtual method that Updates rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>ServicePointSessions</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>ServicePointSessions</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of ServicePointSessions.
             <code><![CDATA[
             TList<ServicePointSessions> list = new TList<ServicePointSessions>();
             ServicePointSessions entity = new ServicePointSessions();
             entity.StringProperty = "foo";
             ServicePointSessions entity2 = new ServicePointSessions();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ServicePointSessionsService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointSessionsServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.ServicePointSessions)">
            <summary>
            public virtual method that Deletes a ServicePointSessions object into the datasource using a transaction.
            </summary>
            <param name="entity">ServicePointSessions object to Delete.</param>
            <remarks>After Deleteing into the datasource, the ServicePointSessions object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            ServicePointSessions entity = ServicePointSessionsService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ServicePointSessionsService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointSessionsServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.ServicePointSessions})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>ServicePointSessions</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>ServicePointSessions</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of ServicePointSessions.
             <code><![CDATA[
             TList<ServicePointSessions> list = new TList<ServicePointSessions>();
             ServicePointSessions entity = new ServicePointSessions();
             entity.StringProperty = "foo";
             ServicePointSessions entity2 = new ServicePointSessions();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ServicePointSessionsService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointSessionsServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.ServicePointSessionsKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointSessionsServiceBase.Delete(System.Decimal)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Decimal _spssnRefno
            </summary>
            <param name="_spssnRefno">ServicePointSessions pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.ServicePointBedsService">
            <summary>
            An component type implementation of the 'SERVICE_POINT_BEDS' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointBedsService.#ctor">
            <summary>
            Initializes a new instance of the ServicePointBedsService class.
            </summary>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.ServicePointBedsServiceBase">
            <summary>
             An object representation of the 'SERVICE_POINT_BEDS' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ServicePointBeds.cs file instead.
             All custom implementations should be done in the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ServicePointBeds"/> class.
             </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointBedsServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ServicePointBeds"/> instance .
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointBedsServiceBase.CreateServicePointBeds(System.Decimal,System.Decimal,System.Decimal,System.DateTime,System.Nullable{System.DateTime},System.String,System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
            <summary>
             A simple factory method to create a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ServicePointBeds"/> instance.
            </summary>
            <param name="_spbedRefno"></param>
            <param name="_spontRefno"></param>
            <param name="_bedssRefno"></param>
            <param name="_startDttm"></param>
            <param name="_endDttm"></param>
            <param name="_archvFlag"></param>
            <param name="_stranRefno"></param>
            <param name="_externalKey"></param>
            <param name="_wdproRefno"></param>
            <param name="_ownerHeorgRefno"></param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.ServicePointBedsServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointBedsServiceBase.Get(iSOFT.ANZ.PatientManagerService.Entities.ServicePointBedsKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointBedsServiceBase.GetByBedssRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SPBED_BEDSS index.
            </summary>
            <param name="_bedssRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointBedsServiceBase.GetByBedssRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SPBED_BEDSS index.
            </summary>
            <param name="_bedssRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointBedsServiceBase.GetByWdproRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SPBED_WDPRO index.
            </summary>
            <param name="_wdproRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointBedsServiceBase.GetByWdproRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SPBED_WDPRO index.
            </summary>
            <param name="_wdproRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointBedsServiceBase.GetBySpontRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SPBED_SPONT index.
            </summary>
            <param name="_spontRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointBedsServiceBase.GetBySpontRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SPBED_SPONT index.
            </summary>
            <param name="_spontRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointBedsServiceBase.GetBySpbedRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_SERVICE_POINT_BEDS index.
            </summary>
            <param name="_spbedRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ServicePointBeds"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointBedsServiceBase.GetBySpbedRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_SERVICE_POINT_BEDS index.
            </summary>
            <param name="_spbedRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ServicePointBeds"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointBedsServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ServicePointBeds" /> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointBedsServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ServicePointBeds" /> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> </returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointBedsServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ServicePointBeds</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointBedsServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ServicePointBeds</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointBedsServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ServicePointBeds</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointBedsServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointBedsServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.ServicePointBeds)">
            <summary>
            public virtual method that Inserts a ServicePointBeds object into the datasource using a transaction.
            </summary>
            <param name="entity">ServicePointBeds object to Insert.</param>
            <remarks>After Inserting into the datasource, the ServicePointBeds object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            ServicePointBeds entity = new ServicePointBeds();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ServicePointBedsService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointBedsServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.ServicePointBeds})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>ServicePointBeds</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>ServicePointBeds</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of ServicePointBeds.
             <code><![CDATA[
             TList<ServicePointBeds> list = new TList<ServicePointBeds>();
             ServicePointBeds entity = new ServicePointBeds();
             entity.StringProperty = "foo";
             ServicePointBeds entity2 = new ServicePointBeds();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ServicePointBedsService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointBedsServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.ServicePointBeds)">
            <summary>
            public virtual method that Updates a ServicePointBeds object into the datasource using a transaction.
            </summary>
            <param name="entity">ServicePointBeds object to Update.</param>
            <remarks>After Updateing into the datasource, the ServicePointBeds object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            ServicePointBeds entity = ServicePointBedsService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ServicePointBedsService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointBedsServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.ServicePointBeds})">
             <summary>
             public virtual method that Updates rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>ServicePointBeds</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>ServicePointBeds</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of ServicePointBeds.
             <code><![CDATA[
             TList<ServicePointBeds> list = new TList<ServicePointBeds>();
             ServicePointBeds entity = new ServicePointBeds();
             entity.StringProperty = "foo";
             ServicePointBeds entity2 = new ServicePointBeds();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ServicePointBedsService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointBedsServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.ServicePointBeds)">
            <summary>
            public virtual method that Deletes a ServicePointBeds object into the datasource using a transaction.
            </summary>
            <param name="entity">ServicePointBeds object to Delete.</param>
            <remarks>After Deleteing into the datasource, the ServicePointBeds object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            ServicePointBeds entity = ServicePointBedsService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ServicePointBedsService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointBedsServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.ServicePointBeds})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>ServicePointBeds</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>ServicePointBeds</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of ServicePointBeds.
             <code><![CDATA[
             TList<ServicePointBeds> list = new TList<ServicePointBeds>();
             ServicePointBeds entity = new ServicePointBeds();
             entity.StringProperty = "foo";
             ServicePointBeds entity2 = new ServicePointBeds();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ServicePointBedsService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointBedsServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.ServicePointBedsKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointBedsServiceBase.Delete(System.Decimal)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Decimal _spbedRefno
            </summary>
            <param name="_spbedRefno">ServicePointBeds pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.BedStaysService">
            <summary>
            An component type implementation of the 'BED_STAYS' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.BedStaysService.#ctor">
            <summary>
            Initializes a new instance of the BedStaysService class.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.BedStaysService.GetBySpontRefnoOnDttm(System.DateTime,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key HSS_BEDST_START index.
            </summary>
            <param name="_startDttm"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.BedStaysService.GetBySpbedRefnoAfterDttm(System.Decimal,System.DateTime,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key HSS_BEDST_START index.
            </summary>
            <param name="_startDttm"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.BedStaysService.GetByOwnerHeorgWithinDttmRange(System.Decimal,System.DateTime,System.DateTime,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key HSS_BEDST_START index.
            </summary>
            <param name="_startDttm"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.BedStaysService.GetBySpontRefnoWithinDttmRange(System.Decimal,System.DateTime,System.DateTime,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key HSS_BEDST_START index.
            </summary>
            <param name="_startDttm"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.BedStaysService.GetBedHistory(System.Decimal,System.Decimal)">
            <summary>
            This method wrap the 'GetBedHistory' stored procedure. 
            </summary>
            <remark></remark>
            <returns>A <see cref="T:System.Data.IDataReader"/> instance.</returns>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.BedStaysServiceBase">
            <summary>
             An object representation of the 'BED_STAYS' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the BedStays.cs file instead.
             All custom implementations should be done in the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.BedStays"/> class.
             </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.BedStaysServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.BedStays"/> instance .
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.BedStaysServiceBase.CreateBedStays(System.Decimal,System.Decimal,System.Decimal,System.DateTime,System.Nullable{System.DateTime},System.String,System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
            <summary>
             A simple factory method to create a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.BedStays"/> instance.
            </summary>
            <param name="_sstayRefno"></param>
            <param name="_spbedRefno"></param>
            <param name="_patntRefno"></param>
            <param name="_startDttm"></param>
            <param name="_endDttm"></param>
            <param name="_archvFlag"></param>
            <param name="_stranRefno"></param>
            <param name="_externalKey"></param>
            <param name="_bdtrrRefno"></param>
            <param name="_percaRefno"></param>
            <param name="_prvsnFlag"></param>
            <param name="_priorPointer"></param>
            <param name="_rehscRefno"></param>
            <param name="_billBdcatRefno"></param>
            <param name="_ownerHeorgRefno"></param>
            <param name="_sorceCode"></param>
            <param name="_sorceRefno"></param>
            <param name="_adtpsRefno"></param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.BedStaysServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.BedStaysServiceBase.Get(iSOFT.ANZ.PatientManagerService.Entities.BedStaysKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.BedStaysServiceBase.GetByPatntRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_BEDST_PATNT index.
            </summary>
            <param name="_patntRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.BedStaysServiceBase.GetByPatntRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_BEDST_PATNT index.
            </summary>
            <param name="_patntRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.BedStaysServiceBase.GetByPercaRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_BEDST_PERCA index.
            </summary>
            <param name="_percaRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.BedStaysServiceBase.GetByPercaRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_BEDST_PERCA index.
            </summary>
            <param name="_percaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.BedStaysServiceBase.GetBySstayRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_BEDST_SSTAY index.
            </summary>
            <param name="_sstayRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.BedStaysServiceBase.GetBySstayRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_BEDST_SSTAY index.
            </summary>
            <param name="_sstayRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.BedStaysServiceBase.GetBySpbedRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_BEDST_SPBED index.
            </summary>
            <param name="_spbedRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.BedStaysServiceBase.GetBySpbedRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_BEDST_SPBED index.
            </summary>
            <param name="_spbedRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.BedStaysServiceBase.GetByBedstRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_BED_STAYS index.
            </summary>
            <param name="_bedstRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.BedStays"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.BedStaysServiceBase.GetByBedstRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_BED_STAYS index.
            </summary>
            <param name="_bedstRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.BedStays"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.BedStaysServiceBase.GetByPriorPointer(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_PRIOR_POINTER index.
            </summary>
            <param name="_priorPointer"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.BedStaysServiceBase.GetByPriorPointer(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_PRIOR_POINTER index.
            </summary>
            <param name="_priorPointer"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.BedStaysServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.BedStays" /> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.BedStaysServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.BedStays" /> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> </returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.BedStaysServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>BedStays</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.BedStaysServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>BedStays</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.BedStaysServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>BedStays</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.BedStaysServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.BedStaysServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.BedStays)">
            <summary>
            public virtual method that Inserts a BedStays object into the datasource using a transaction.
            </summary>
            <param name="entity">BedStays object to Insert.</param>
            <remarks>After Inserting into the datasource, the BedStays object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            BedStays entity = new BedStays();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	BedStaysService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.BedStaysServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.BedStays})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>BedStays</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>BedStays</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of BedStays.
             <code><![CDATA[
             TList<BedStays> list = new TList<BedStays>();
             BedStays entity = new BedStays();
             entity.StringProperty = "foo";
             BedStays entity2 = new BedStays();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	BedStaysService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.BedStaysServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.BedStays)">
            <summary>
            public virtual method that Updates a BedStays object into the datasource using a transaction.
            </summary>
            <param name="entity">BedStays object to Update.</param>
            <remarks>After Updateing into the datasource, the BedStays object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            BedStays entity = BedStaysService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	BedStaysService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.BedStaysServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.BedStays})">
             <summary>
             public virtual method that Updates rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>BedStays</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>BedStays</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of BedStays.
             <code><![CDATA[
             TList<BedStays> list = new TList<BedStays>();
             BedStays entity = new BedStays();
             entity.StringProperty = "foo";
             BedStays entity2 = new BedStays();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	BedStaysService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.BedStaysServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.BedStays)">
            <summary>
            public virtual method that Deletes a BedStays object into the datasource using a transaction.
            </summary>
            <param name="entity">BedStays object to Delete.</param>
            <remarks>After Deleteing into the datasource, the BedStays object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            BedStays entity = BedStaysService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	BedStaysService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.BedStaysServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.BedStays})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>BedStays</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>BedStays</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of BedStays.
             <code><![CDATA[
             TList<BedStays> list = new TList<BedStays>();
             BedStays entity = new BedStays();
             entity.StringProperty = "foo";
             BedStays entity2 = new BedStays();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	BedStaysService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.BedStaysServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.BedStaysKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.BedStaysServiceBase.Delete(System.Decimal)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Decimal _bedstRefno
            </summary>
            <param name="_bedstRefno">BedStays pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.WaitingListEntriesService">
            <summary>
            An component type implementation of the 'WAITING_LIST_ENTRIES' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.WaitingListEntriesService.#ctor">
            <summary>
            Initializes a new instance of the WaitingListEntriesService class.
            </summary>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.WaitingListEntriesServiceBase">
            <summary>
             An object representation of the 'WAITING_LIST_ENTRIES' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the WaitingListEntries.cs file instead.
             All custom implementations should be done in the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.WaitingListEntries"/> class.
             </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.WaitingListEntriesServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.WaitingListEntries"/> instance .
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.WaitingListEntriesServiceBase.CreateWaitingListEntries(System.Decimal,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Decimal,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.String,System.Nullable{System.DateTime},System.DateTime,System.Nullable{System.DateTime},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.DateTime},System.Nullable{System.Decimal},System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.DateTime},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.DateTime},System.Nullable{System.Decimal},System.Nullable{System.DateTime},System.Nullable{System.Decimal},System.Nullable{System.DateTime},System.Nullable{System.Decimal},System.Nullable{System.DateTime},System.Nullable{System.Decimal},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Decimal},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.DateTime},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.DateTime},System.Nullable{System.Decimal},System.Nullable{System.DateTime},System.Nullable{System.Decimal})">
            <summary>
             A simple factory method to create a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.WaitingListEntries"/> instance.
            </summary>
            <param name="_wlistRefno"></param>
            <param name="_wlrulRefno"></param>
            <param name="_admdcRefno"></param>
            <param name="_refrlRefno"></param>
            <param name="_spectRefno"></param>
            <param name="_procaRefno"></param>
            <param name="_heorgRefno"></param>
            <param name="_patntRefno"></param>
            <param name="_admetRefno"></param>
            <param name="_adcatRefno"></param>
            <param name="_inmgtRefno"></param>
            <param name="_prityRefno"></param>
            <param name="_urgncRefno"></param>
            <param name="_description"></param>
            <param name="_shortNoticeFlag"></param>
            <param name="_ordtaDttm"></param>
            <param name="_wlistDttm"></param>
            <param name="_remvlDttm"></param>
            <param name="_remvlRefno"></param>
            <param name="_priorRefno"></param>
            <param name="_guadmDttm"></param>
            <param name="_transRefno"></param>
            <param name="_hotelStayFlag"></param>
            <param name="_archvFlag"></param>
            <param name="_stranRefno"></param>
            <param name="_priorPointer"></param>
            <param name="_externalKey"></param>
            <param name="_admitDttm"></param>
            <param name="_svtypRefno"></param>
            <param name="_spontRefno"></param>
            <param name="_dayowRefno"></param>
            <param name="_theatTime"></param>
            <param name="_whocoRefno"></param>
            <param name="_clptyRefno"></param>
            <param name="_noFundsFlag"></param>
            <param name="_contrRefno"></param>
            <param name="_purchRefno"></param>
            <param name="_provdRefno"></param>
            <param name="_localWlrulRefno"></param>
            <param name="_cstatRefno"></param>
            <param name="_xferSpontRefno"></param>
            <param name="_lengthStay"></param>
            <param name="_xferLengthStay"></param>
            <param name="_antypRefno"></param>
            <param name="_waitingStartDttm"></param>
            <param name="_waitingSuspStartDttm"></param>
            <param name="_waitingSuspTotal"></param>
            <param name="_admitReadyFlag"></param>
            <param name="_activeIndicator"></param>
            <param name="_thvisitYnunkRefno"></param>
            <param name="_deposit"></param>
            <param name="_spssnRefno"></param>
            <param name="_dycepRefno"></param>
            <param name="_aclevRefno"></param>
            <param name="_steamRefno"></param>
            <param name="_contpRefno"></param>
            <param name="_waitingListNumber"></param>
            <param name="_ownerHeorgRefno"></param>
            <param name="_remvlHeorgRefno"></param>
            <param name="_plannedProc"></param>
            <param name="_pbkNumber"></param>
            <param name="_visitRefno"></param>
            <param name="_bktypRefno"></param>
            <param name="_stageRefno"></param>
            <param name="_acknwDttm"></param>
            <param name="_acknwLetstRefno"></param>
            <param name="_invitDttm"></param>
            <param name="_invitLetstRefno"></param>
            <param name="_remndDttm"></param>
            <param name="_remndLetstRefno"></param>
            <param name="_canclDttm"></param>
            <param name="_canclLetstRefno"></param>
            <param name="_acasDttm"></param>
            <param name="_accrAppDttm"></param>
            <param name="_accrExpDttm"></param>
            <param name="_accrLocRefno"></param>
            <param name="_famMeetDttm"></param>
            <param name="_admCareDttm"></param>
            <param name="_tcareReqRefno"></param>
            <param name="_wstusRefno"></param>
            <param name="_rdcareRefno"></param>
            <param name="_careProcaRefno"></param>
            <param name="_resProviderRefno"></param>
            <param name="_informDttm"></param>
            <param name="_wthrwlReasonRefno"></param>
            <param name="_acprtRefno"></param>
            <param name="_certaintyDttm"></param>
            <param name="_acbksRefno"></param>
            <param name="_bookStatusDttm"></param>
            <param name="_activNbrsdRefno"></param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.WaitingListEntriesServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.WaitingListEntriesServiceBase.GetByAdcatRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_WLIST_ADCAT key.
            	CNA_WLIST_ADCAT Description: 
            </summary>
            <param name="_adcatRefno"></param>
            <returns>Returns a generic collection of WaitingListEntries objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.WaitingListEntriesServiceBase.GetByAdcatRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_WLIST_ADCAT key.
            	CNA_WLIST_ADCAT Description: 
            </summary>
            <param name="_adcatRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>WaitingListEntries</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.WaitingListEntriesServiceBase.GetByClptyRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_WLIST_CLPTY key.
            	CNA_WLIST_CLPTY Description: 
            </summary>
            <param name="_clptyRefno"></param>
            <returns>Returns a generic collection of WaitingListEntries objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.WaitingListEntriesServiceBase.GetByClptyRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_WLIST_CLPTY key.
            	CNA_WLIST_CLPTY Description: 
            </summary>
            <param name="_clptyRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>WaitingListEntries</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.WaitingListEntriesServiceBase.GetByCstatRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_WLIST_CSTAT key.
            	CNA_WLIST_CSTAT Description: 
            </summary>
            <param name="_cstatRefno"></param>
            <returns>Returns a generic collection of WaitingListEntries objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.WaitingListEntriesServiceBase.GetByCstatRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_WLIST_CSTAT key.
            	CNA_WLIST_CSTAT Description: 
            </summary>
            <param name="_cstatRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>WaitingListEntries</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.WaitingListEntriesServiceBase.GetByDayowRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_WLIST_DAYOW key.
            	CNA_WLIST_DAYOW Description: 
            </summary>
            <param name="_dayowRefno"></param>
            <returns>Returns a generic collection of WaitingListEntries objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.WaitingListEntriesServiceBase.GetByDayowRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_WLIST_DAYOW key.
            	CNA_WLIST_DAYOW Description: 
            </summary>
            <param name="_dayowRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>WaitingListEntries</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.WaitingListEntriesServiceBase.GetByInmgtRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_WLIST_INMGT key.
            	CNA_WLIST_INMGT Description: 
            </summary>
            <param name="_inmgtRefno"></param>
            <returns>Returns a generic collection of WaitingListEntries objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.WaitingListEntriesServiceBase.GetByInmgtRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_WLIST_INMGT key.
            	CNA_WLIST_INMGT Description: 
            </summary>
            <param name="_inmgtRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>WaitingListEntries</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.WaitingListEntriesServiceBase.GetByPrityRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_WLIST_PRITY key.
            	CNA_WLIST_PRITY Description: 
            </summary>
            <param name="_prityRefno"></param>
            <returns>Returns a generic collection of WaitingListEntries objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.WaitingListEntriesServiceBase.GetByPrityRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_WLIST_PRITY key.
            	CNA_WLIST_PRITY Description: 
            </summary>
            <param name="_prityRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>WaitingListEntries</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.WaitingListEntriesServiceBase.GetByRemvlRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_WLIST_REMVL key.
            	CNA_WLIST_REMVL Description: 
            </summary>
            <param name="_remvlRefno"></param>
            <returns>Returns a generic collection of WaitingListEntries objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.WaitingListEntriesServiceBase.GetByRemvlRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_WLIST_REMVL key.
            	CNA_WLIST_REMVL Description: 
            </summary>
            <param name="_remvlRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>WaitingListEntries</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.WaitingListEntriesServiceBase.GetBySvtypRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_WLIST_SVTYP key.
            	CNA_WLIST_SVTYP Description: 
            </summary>
            <param name="_svtypRefno"></param>
            <returns>Returns a generic collection of WaitingListEntries objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.WaitingListEntriesServiceBase.GetBySvtypRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_WLIST_SVTYP key.
            	CNA_WLIST_SVTYP Description: 
            </summary>
            <param name="_svtypRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>WaitingListEntries</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.WaitingListEntriesServiceBase.GetByTransRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_WLIST_TRANS key.
            	CNA_WLIST_TRANS Description: 
            </summary>
            <param name="_transRefno"></param>
            <returns>Returns a generic collection of WaitingListEntries objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.WaitingListEntriesServiceBase.GetByTransRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_WLIST_TRANS key.
            	CNA_WLIST_TRANS Description: 
            </summary>
            <param name="_transRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>WaitingListEntries</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.WaitingListEntriesServiceBase.GetByUrgncRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_WLIST_URGNC key.
            	CNA_WLIST_URGNC Description: 
            </summary>
            <param name="_urgncRefno"></param>
            <returns>Returns a generic collection of WaitingListEntries objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.WaitingListEntriesServiceBase.GetByUrgncRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_WLIST_URGNC key.
            	CNA_WLIST_URGNC Description: 
            </summary>
            <param name="_urgncRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>WaitingListEntries</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.WaitingListEntriesServiceBase.GetByWhocoRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_WLIST_WHOCO key.
            	CNA_WLIST_WHOCO Description: 
            </summary>
            <param name="_whocoRefno"></param>
            <returns>Returns a generic collection of WaitingListEntries objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.WaitingListEntriesServiceBase.GetByWhocoRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_WLIST_WHOCO key.
            	CNA_WLIST_WHOCO Description: 
            </summary>
            <param name="_whocoRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>WaitingListEntries</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.WaitingListEntriesServiceBase.Get(iSOFT.ANZ.PatientManagerService.Entities.WaitingListEntriesKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.WaitingListEntriesServiceBase.GetByPatntRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_WLIST_PATNT index.
            </summary>
            <param name="_patntRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.WaitingListEntriesServiceBase.GetByPatntRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_WLIST_PATNT index.
            </summary>
            <param name="_patntRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.WaitingListEntriesServiceBase.GetByAdmdcRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_WLIST_ADMDC index.
            </summary>
            <param name="_admdcRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.WaitingListEntriesServiceBase.GetByAdmdcRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_WLIST_ADMDC index.
            </summary>
            <param name="_admdcRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.WaitingListEntriesServiceBase.GetByRefrlRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_WLIST_REFRL index.
            </summary>
            <param name="_refrlRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.WaitingListEntriesServiceBase.GetByRefrlRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_WLIST_REFRL index.
            </summary>
            <param name="_refrlRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.WaitingListEntriesServiceBase.GetByWlrulRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_WLIST_WLRUL index.
            </summary>
            <param name="_wlrulRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.WaitingListEntriesServiceBase.GetByWlrulRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_WLIST_WLRUL index.
            </summary>
            <param name="_wlrulRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.WaitingListEntriesServiceBase.GetByWlistRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_WAITING_LIST_ENTRIES index.
            </summary>
            <param name="_wlistRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.WaitingListEntries"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.WaitingListEntriesServiceBase.GetByWlistRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_WAITING_LIST_ENTRIES index.
            </summary>
            <param name="_wlistRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.WaitingListEntries"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.WaitingListEntriesServiceBase.GetByPrityRefnoWlistRefno(System.Nullable{System.Decimal},System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_WLIST_PRITY_WLIST index.
            </summary>
            <param name="_prityRefno"></param>
            <param name="_wlistRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.WaitingListEntriesServiceBase.GetByPrityRefnoWlistRefno(System.Nullable{System.Decimal},System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_WLIST_PRITY_WLIST index.
            </summary>
            <param name="_prityRefno"></param>
            <param name="_wlistRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.WaitingListEntriesServiceBase.GetByBktypRefnoStageRefno(System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key SAH_WLE_BKTYP_STAGE index.
            </summary>
            <param name="_bktypRefno"></param>
            <param name="_stageRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.WaitingListEntriesServiceBase.GetByBktypRefnoStageRefno(System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key SAH_WLE_BKTYP_STAGE index.
            </summary>
            <param name="_bktypRefno"></param>
            <param name="_stageRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.WaitingListEntriesServiceBase.GetByLocalWlrulRefnoPrityRefno(System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key SAH_WLE_LCAT_PRITY index.
            </summary>
            <param name="_localWlrulRefno"></param>
            <param name="_prityRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.WaitingListEntriesServiceBase.GetByLocalWlrulRefnoPrityRefno(System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key SAH_WLE_LCAT_PRITY index.
            </summary>
            <param name="_localWlrulRefno"></param>
            <param name="_prityRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.WaitingListEntriesServiceBase.GetByProcaRefnoSpectRefnoPrityRefno(System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key SAH_WLIST_PROCA_SPECT_PRITY index.
            </summary>
            <param name="_procaRefno"></param>
            <param name="_spectRefno"></param>
            <param name="_prityRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.WaitingListEntriesServiceBase.GetByProcaRefnoSpectRefnoPrityRefno(System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key SAH_WLIST_PROCA_SPECT_PRITY index.
            </summary>
            <param name="_procaRefno"></param>
            <param name="_spectRefno"></param>
            <param name="_prityRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.WaitingListEntriesServiceBase.GetBySpectRefnoPrityRefnoSvtypRefno(System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key SAH_WLIST_SPECT_PRITY index.
            </summary>
            <param name="_spectRefno"></param>
            <param name="_prityRefno"></param>
            <param name="_svtypRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.WaitingListEntriesServiceBase.GetBySpectRefnoPrityRefnoSvtypRefno(System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key SAH_WLIST_SPECT_PRITY index.
            </summary>
            <param name="_spectRefno"></param>
            <param name="_prityRefno"></param>
            <param name="_svtypRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.WaitingListEntriesServiceBase.GetByProcaRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_WLIST_PROCA index.
            </summary>
            <param name="_procaRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.WaitingListEntriesServiceBase.GetByProcaRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_WLIST_PROCA index.
            </summary>
            <param name="_procaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.WaitingListEntriesServiceBase.GetByHeorgRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_WLIST_HEORG index.
            </summary>
            <param name="_heorgRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.WaitingListEntriesServiceBase.GetByHeorgRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_WLIST_HEORG index.
            </summary>
            <param name="_heorgRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.WaitingListEntriesServiceBase.GetByPriorRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_WLIST_PRIOR index.
            </summary>
            <param name="_priorRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.WaitingListEntriesServiceBase.GetByPriorRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_WLIST_PRIOR index.
            </summary>
            <param name="_priorRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.WaitingListEntriesServiceBase.GetBySpontRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_WLIST_SPONT index.
            </summary>
            <param name="_spontRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.WaitingListEntriesServiceBase.GetBySpontRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_WLIST_SPONT index.
            </summary>
            <param name="_spontRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.WaitingListEntriesServiceBase.GetByContrRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_WLIST_CONTR index.
            </summary>
            <param name="_contrRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.WaitingListEntriesServiceBase.GetByContrRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_WLIST_CONTR index.
            </summary>
            <param name="_contrRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.WaitingListEntriesServiceBase.GetByPurchRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_WLIST_PURCH index.
            </summary>
            <param name="_purchRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.WaitingListEntriesServiceBase.GetByPurchRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_WLIST_PURCH index.
            </summary>
            <param name="_purchRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.WaitingListEntriesServiceBase.GetByLocalWlrulRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_WLIST_LOCAL_WLRUL index.
            </summary>
            <param name="_localWlrulRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.WaitingListEntriesServiceBase.GetByLocalWlrulRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_WLIST_LOCAL_WLRUL index.
            </summary>
            <param name="_localWlrulRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.WaitingListEntriesServiceBase.GetByXferSpontRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_WLIST_XFER_SPONT index.
            </summary>
            <param name="_xferSpontRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.WaitingListEntriesServiceBase.GetByXferSpontRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_WLIST_XFER_SPONT index.
            </summary>
            <param name="_xferSpontRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.WaitingListEntriesServiceBase.GetByProvdRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_WLIST_PROVD index.
            </summary>
            <param name="_provdRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.WaitingListEntriesServiceBase.GetByProvdRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_WLIST_PROVD index.
            </summary>
            <param name="_provdRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.WaitingListEntriesServiceBase.GetByProcaRefnoSpectRefno(System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_WAITING_LIST_ENTRIES index.
            </summary>
            <param name="_procaRefno"></param>
            <param name="_spectRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.WaitingListEntriesServiceBase.GetByProcaRefnoSpectRefno(System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_WAITING_LIST_ENTRIES index.
            </summary>
            <param name="_procaRefno"></param>
            <param name="_spectRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.WaitingListEntriesServiceBase.GetBySpectRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_WLIST_SPECT index.
            </summary>
            <param name="_spectRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.WaitingListEntriesServiceBase.GetBySpectRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_WLIST_SPECT index.
            </summary>
            <param name="_spectRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.WaitingListEntriesServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.WaitingListEntries" /> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.WaitingListEntriesServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.WaitingListEntries" /> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> </returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.WaitingListEntriesServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>WaitingListEntries</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.WaitingListEntriesServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>WaitingListEntries</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.WaitingListEntriesServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>WaitingListEntries</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.WaitingListEntriesServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.WaitingListEntriesServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.WaitingListEntries)">
            <summary>
            public virtual method that Inserts a WaitingListEntries object into the datasource using a transaction.
            </summary>
            <param name="entity">WaitingListEntries object to Insert.</param>
            <remarks>After Inserting into the datasource, the WaitingListEntries object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            WaitingListEntries entity = new WaitingListEntries();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	WaitingListEntriesService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.WaitingListEntriesServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.WaitingListEntries})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>WaitingListEntries</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>WaitingListEntries</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of WaitingListEntries.
             <code><![CDATA[
             TList<WaitingListEntries> list = new TList<WaitingListEntries>();
             WaitingListEntries entity = new WaitingListEntries();
             entity.StringProperty = "foo";
             WaitingListEntries entity2 = new WaitingListEntries();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	WaitingListEntriesService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.WaitingListEntriesServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.WaitingListEntries)">
            <summary>
            public virtual method that Updates a WaitingListEntries object into the datasource using a transaction.
            </summary>
            <param name="entity">WaitingListEntries object to Update.</param>
            <remarks>After Updateing into the datasource, the WaitingListEntries object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            WaitingListEntries entity = WaitingListEntriesService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	WaitingListEntriesService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.WaitingListEntriesServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.WaitingListEntries})">
             <summary>
             public virtual method that Updates rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>WaitingListEntries</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>WaitingListEntries</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of WaitingListEntries.
             <code><![CDATA[
             TList<WaitingListEntries> list = new TList<WaitingListEntries>();
             WaitingListEntries entity = new WaitingListEntries();
             entity.StringProperty = "foo";
             WaitingListEntries entity2 = new WaitingListEntries();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	WaitingListEntriesService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.WaitingListEntriesServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.WaitingListEntries)">
            <summary>
            public virtual method that Deletes a WaitingListEntries object into the datasource using a transaction.
            </summary>
            <param name="entity">WaitingListEntries object to Delete.</param>
            <remarks>After Deleteing into the datasource, the WaitingListEntries object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            WaitingListEntries entity = WaitingListEntriesService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	WaitingListEntriesService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.WaitingListEntriesServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.WaitingListEntries})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>WaitingListEntries</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>WaitingListEntries</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of WaitingListEntries.
             <code><![CDATA[
             TList<WaitingListEntries> list = new TList<WaitingListEntries>();
             WaitingListEntries entity = new WaitingListEntries();
             entity.StringProperty = "foo";
             WaitingListEntries entity2 = new WaitingListEntries();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	WaitingListEntriesService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.WaitingListEntriesServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.WaitingListEntriesKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.WaitingListEntriesServiceBase.Delete(System.Decimal)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Decimal _wlistRefno
            </summary>
            <param name="_wlistRefno">WaitingListEntries pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.AdmissionOffersService">
            <summary>
            An component type implementation of the 'ADMISSION_OFFERS' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AdmissionOffersService.#ctor">
            <summary>
            Initializes a new instance of the AdmissionOffersService class.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AdmissionOffersService.GetTciBetween(System.DateTime,System.DateTime)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource with TCI Date prior to given Date.
            </summary>
            <param name="_tciDttm"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AdmissionOffersService.GetEventsInTimePeriod(System.Decimal,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.DateTime,System.DateTime,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key HSS_BEDST_START index.
            </summary>
            <param name="_startDttm"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AdmissionOffersService.GetEventsByWardOidInTimePeriod(System.Decimal,System.DateTime,System.DateTime,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key HSS_BEDST_START index.
            </summary>
            <param name="_startDttm"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.AdmissionOffersServiceBase">
            <summary>
             An object representation of the 'ADMISSION_OFFERS' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the AdmissionOffers.cs file instead.
             All custom implementations should be done in the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.AdmissionOffers"/> class.
             </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AdmissionOffersServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.AdmissionOffers"/> instance .
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AdmissionOffersServiceBase.CreateAdmissionOffers(System.Decimal,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.DateTime,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Decimal},System.Nullable{System.DateTime},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.DateTime},System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
            <summary>
             A simple factory method to create a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.AdmissionOffers"/> instance.
            </summary>
            <param name="_wlistRefno"></param>
            <param name="_xferSpontRefno"></param>
            <param name="_spbedRefno"></param>
            <param name="_deferRefno"></param>
            <param name="_ofocmRefno"></param>
            <param name="_admofDttm"></param>
            <param name="_ofocmDttm"></param>
            <param name="_tciDttm"></param>
            <param name="_cancelDttm"></param>
            <param name="_comments"></param>
            <param name="_deferFlag"></param>
            <param name="_deferDttm"></param>
            <param name="_spontRefno"></param>
            <param name="_archvFlag"></param>
            <param name="_stranRefno"></param>
            <param name="_priorPointer"></param>
            <param name="_externalKey"></param>
            <param name="_expdsDttm"></param>
            <param name="_xferDttm"></param>
            <param name="_tciToDttm"></param>
            <param name="_confmRefno"></param>
            <param name="_confmDttm"></param>
            <param name="_bdcatRefno"></param>
            <param name="_xferBdcatRefno"></param>
            <param name="_operationDttm"></param>
            <param name="_accompaniedFlag"></param>
            <param name="_lockedBedFlag"></param>
            <param name="_nilByMouthDttm"></param>
            <param name="_cancrRefno"></param>
            <param name="_adoftRefno"></param>
            <param name="_spbedOriRefno"></param>
            <param name="_ownerHeorgRefno"></param>
            <param name="_ipbktRefno"></param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.AdmissionOffersServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AdmissionOffersServiceBase.GetByConfmRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_ADMOF_CONFM key.
            	CNA_ADMOF_CONFM Description: 
            </summary>
            <param name="_confmRefno"></param>
            <returns>Returns a generic collection of AdmissionOffers objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AdmissionOffersServiceBase.GetByConfmRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_ADMOF_CONFM key.
            	CNA_ADMOF_CONFM Description: 
            </summary>
            <param name="_confmRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>AdmissionOffers</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AdmissionOffersServiceBase.GetByDeferRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_ADMOF_DEFER key.
            	CNA_ADMOF_DEFER Description: 
            </summary>
            <param name="_deferRefno"></param>
            <returns>Returns a generic collection of AdmissionOffers objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AdmissionOffersServiceBase.GetByDeferRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_ADMOF_DEFER key.
            	CNA_ADMOF_DEFER Description: 
            </summary>
            <param name="_deferRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>AdmissionOffers</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AdmissionOffersServiceBase.Get(iSOFT.ANZ.PatientManagerService.Entities.AdmissionOffersKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AdmissionOffersServiceBase.GetByOfocmRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_ADMOF_OFOCM index.
            </summary>
            <param name="_ofocmRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AdmissionOffersServiceBase.GetByOfocmRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_ADMOF_OFOCM index.
            </summary>
            <param name="_ofocmRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AdmissionOffersServiceBase.GetBySpbedRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_ADMOF_SPBED index.
            </summary>
            <param name="_spbedRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AdmissionOffersServiceBase.GetBySpbedRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_ADMOF_SPBED index.
            </summary>
            <param name="_spbedRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AdmissionOffersServiceBase.GetByXferSpontRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_ADMOF_XFER_SPONT index.
            </summary>
            <param name="_xferSpontRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AdmissionOffersServiceBase.GetByXferSpontRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_ADMOF_XFER_SPONT index.
            </summary>
            <param name="_xferSpontRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AdmissionOffersServiceBase.GetByAdmofRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_ADMISSION_OFFERS index.
            </summary>
            <param name="_admofRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.AdmissionOffers"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AdmissionOffersServiceBase.GetByAdmofRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_ADMISSION_OFFERS index.
            </summary>
            <param name="_admofRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.AdmissionOffers"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AdmissionOffersServiceBase.GetByWlistRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_ADMOF_WLIST index.
            </summary>
            <param name="_wlistRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AdmissionOffersServiceBase.GetByWlistRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_ADMOF_WLIST index.
            </summary>
            <param name="_wlistRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AdmissionOffersServiceBase.GetBySpontRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_ADMOF_SPONT index.
            </summary>
            <param name="_spontRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AdmissionOffersServiceBase.GetBySpontRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_ADMOF_SPONT index.
            </summary>
            <param name="_spontRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AdmissionOffersServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.AdmissionOffers" /> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AdmissionOffersServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.AdmissionOffers" /> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> </returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AdmissionOffersServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>AdmissionOffers</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AdmissionOffersServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>AdmissionOffers</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AdmissionOffersServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>AdmissionOffers</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AdmissionOffersServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AdmissionOffersServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.AdmissionOffers)">
            <summary>
            public virtual method that Inserts a AdmissionOffers object into the datasource using a transaction.
            </summary>
            <param name="entity">AdmissionOffers object to Insert.</param>
            <remarks>After Inserting into the datasource, the AdmissionOffers object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            AdmissionOffers entity = new AdmissionOffers();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	AdmissionOffersService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AdmissionOffersServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.AdmissionOffers})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>AdmissionOffers</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>AdmissionOffers</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of AdmissionOffers.
             <code><![CDATA[
             TList<AdmissionOffers> list = new TList<AdmissionOffers>();
             AdmissionOffers entity = new AdmissionOffers();
             entity.StringProperty = "foo";
             AdmissionOffers entity2 = new AdmissionOffers();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AdmissionOffersService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AdmissionOffersServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.AdmissionOffers)">
            <summary>
            public virtual method that Updates a AdmissionOffers object into the datasource using a transaction.
            </summary>
            <param name="entity">AdmissionOffers object to Update.</param>
            <remarks>After Updateing into the datasource, the AdmissionOffers object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            AdmissionOffers entity = AdmissionOffersService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	AdmissionOffersService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AdmissionOffersServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.AdmissionOffers})">
             <summary>
             public virtual method that Updates rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>AdmissionOffers</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>AdmissionOffers</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of AdmissionOffers.
             <code><![CDATA[
             TList<AdmissionOffers> list = new TList<AdmissionOffers>();
             AdmissionOffers entity = new AdmissionOffers();
             entity.StringProperty = "foo";
             AdmissionOffers entity2 = new AdmissionOffers();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AdmissionOffersService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AdmissionOffersServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.AdmissionOffers)">
            <summary>
            public virtual method that Deletes a AdmissionOffers object into the datasource using a transaction.
            </summary>
            <param name="entity">AdmissionOffers object to Delete.</param>
            <remarks>After Deleteing into the datasource, the AdmissionOffers object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            AdmissionOffers entity = AdmissionOffersService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	AdmissionOffersService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AdmissionOffersServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.AdmissionOffers})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>AdmissionOffers</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>AdmissionOffers</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of AdmissionOffers.
             <code><![CDATA[
             TList<AdmissionOffers> list = new TList<AdmissionOffers>();
             AdmissionOffers entity = new AdmissionOffers();
             entity.StringProperty = "foo";
             AdmissionOffers entity2 = new AdmissionOffers();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AdmissionOffersService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AdmissionOffersServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.AdmissionOffersKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AdmissionOffersServiceBase.Delete(System.Decimal)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Decimal _admofRefno
            </summary>
            <param name="_admofRefno">AdmissionOffers pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.ReferenceValueDependanciesService">
            <summary>
            An component type implementation of the 'REFERENCE_VALUE_DEPENDANCIES' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValueDependanciesService.#ctor">
            <summary>
            Initializes a new instance of the ReferenceValueDependanciesService class.
            </summary>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.ReferenceValueDependanciesServiceBase">
            <summary>
             An object representation of the 'REFERENCE_VALUE_DEPENDANCIES' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ReferenceValueDependancies.cs file instead.
             All custom implementations should be done in the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueDependancies"/> class.
             </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValueDependanciesServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueDependancies"/> instance .
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValueDependanciesServiceBase.CreateReferenceValueDependancies(System.Decimal,System.Decimal,System.String,System.Nullable{System.Decimal},System.DateTime,System.Nullable{System.DateTime},System.Nullable{System.Decimal},System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueDependancies"/> instance.
            </summary>
            <param name="_rfvldRefno"></param>
            <param name="_rfvalRefno"></param>
            <param name="_sorceCode"></param>
            <param name="_sorceRefno"></param>
            <param name="_startDttm"></param>
            <param name="_endDttm"></param>
            <param name="_stranRefno"></param>
            <param name="_archvFlag"></param>
            <param name="_externalKey"></param>
            <param name="_rfltpRefno"></param>
            <param name="_ownerHeorgRefno"></param>
            <param name="_value"></param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.ReferenceValueDependanciesServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValueDependanciesServiceBase.Get(iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueDependanciesKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValueDependanciesServiceBase.GetBySorceCodeRfvalRefnoSorceRefno(System.String,System.Decimal,System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key SAH_SRCE_CODE index.
            </summary>
            <param name="_sorceCode"></param>
            <param name="_rfvalRefno"></param>
            <param name="_sorceRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValueDependanciesServiceBase.GetBySorceCodeRfvalRefnoSorceRefno(System.String,System.Decimal,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key SAH_SRCE_CODE index.
            </summary>
            <param name="_sorceCode"></param>
            <param name="_rfvalRefno"></param>
            <param name="_sorceRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValueDependanciesServiceBase.GetByRfvalRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_RFVLD_RFVAL index.
            </summary>
            <param name="_rfvalRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValueDependanciesServiceBase.GetByRfvalRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_RFVLD_RFVAL index.
            </summary>
            <param name="_rfvalRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValueDependanciesServiceBase.GetByRfvldRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_RFVLD index.
            </summary>
            <param name="_rfvldRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueDependancies"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValueDependanciesServiceBase.GetByRfvldRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_RFVLD index.
            </summary>
            <param name="_rfvldRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueDependancies"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValueDependanciesServiceBase.GetBySorceRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_RFVLD_SORCE_REFNO index.
            </summary>
            <param name="_sorceRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValueDependanciesServiceBase.GetBySorceRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_RFVLD_SORCE_REFNO index.
            </summary>
            <param name="_sorceRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValueDependanciesServiceBase.GetBySorceCodeSorceRefnoRfvalRefno(System.String,System.Nullable{System.Decimal},System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key SAH_SRCE_CODE2 index.
            </summary>
            <param name="_sorceCode"></param>
            <param name="_sorceRefno"></param>
            <param name="_rfvalRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValueDependanciesServiceBase.GetBySorceCodeSorceRefnoRfvalRefno(System.String,System.Nullable{System.Decimal},System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key SAH_SRCE_CODE2 index.
            </summary>
            <param name="_sorceCode"></param>
            <param name="_sorceRefno"></param>
            <param name="_rfvalRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValueDependanciesServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueDependancies" /> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValueDependanciesServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueDependancies" /> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> </returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValueDependanciesServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ReferenceValueDependancies</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValueDependanciesServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ReferenceValueDependancies</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValueDependanciesServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ReferenceValueDependancies</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValueDependanciesServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValueDependanciesServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueDependancies)">
            <summary>
            public virtual method that Inserts a ReferenceValueDependancies object into the datasource using a transaction.
            </summary>
            <param name="entity">ReferenceValueDependancies object to Insert.</param>
            <remarks>After Inserting into the datasource, the ReferenceValueDependancies object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            ReferenceValueDependancies entity = new ReferenceValueDependancies();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ReferenceValueDependanciesService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValueDependanciesServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueDependancies})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>ReferenceValueDependancies</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>ReferenceValueDependancies</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of ReferenceValueDependancies.
             <code><![CDATA[
             TList<ReferenceValueDependancies> list = new TList<ReferenceValueDependancies>();
             ReferenceValueDependancies entity = new ReferenceValueDependancies();
             entity.StringProperty = "foo";
             ReferenceValueDependancies entity2 = new ReferenceValueDependancies();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ReferenceValueDependanciesService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValueDependanciesServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueDependancies)">
            <summary>
            public virtual method that Updates a ReferenceValueDependancies object into the datasource using a transaction.
            </summary>
            <param name="entity">ReferenceValueDependancies object to Update.</param>
            <remarks>After Updateing into the datasource, the ReferenceValueDependancies object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            ReferenceValueDependancies entity = ReferenceValueDependanciesService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ReferenceValueDependanciesService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValueDependanciesServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueDependancies})">
             <summary>
             public virtual method that Updates rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>ReferenceValueDependancies</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>ReferenceValueDependancies</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of ReferenceValueDependancies.
             <code><![CDATA[
             TList<ReferenceValueDependancies> list = new TList<ReferenceValueDependancies>();
             ReferenceValueDependancies entity = new ReferenceValueDependancies();
             entity.StringProperty = "foo";
             ReferenceValueDependancies entity2 = new ReferenceValueDependancies();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ReferenceValueDependanciesService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValueDependanciesServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueDependancies)">
            <summary>
            public virtual method that Deletes a ReferenceValueDependancies object into the datasource using a transaction.
            </summary>
            <param name="entity">ReferenceValueDependancies object to Delete.</param>
            <remarks>After Deleteing into the datasource, the ReferenceValueDependancies object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            ReferenceValueDependancies entity = ReferenceValueDependanciesService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ReferenceValueDependanciesService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValueDependanciesServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueDependancies})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>ReferenceValueDependancies</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>ReferenceValueDependancies</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of ReferenceValueDependancies.
             <code><![CDATA[
             TList<ReferenceValueDependancies> list = new TList<ReferenceValueDependancies>();
             ReferenceValueDependancies entity = new ReferenceValueDependancies();
             entity.StringProperty = "foo";
             ReferenceValueDependancies entity2 = new ReferenceValueDependancies();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ReferenceValueDependanciesService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValueDependanciesServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.ReferenceValueDependanciesKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ReferenceValueDependanciesServiceBase.Delete(System.Decimal)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Decimal _rfvldRefno
            </summary>
            <param name="_rfvldRefno">ReferenceValueDependancies pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.AeAttendancesService">
            <summary>
            An component type implementation of the 'AE_ATTENDANCES' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeAttendancesService.#ctor">
            <summary>
            Initializes a new instance of the AeAttendancesService class.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeAttendancesService.GetCurrent">
            <summary>
            Get a complete collection of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.AeAttendances" /> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeAttendancesService.GetCurrent(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.AeAttendances" /> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> </returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeAttendancesService.GetWithinTimeFrame(System.DateTime,System.DateTime,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key HSS_BEDST_START index.
            </summary>
            <param name="_startDttm"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.AeAttendancesServiceBase">
            <summary>
             An object representation of the 'AE_ATTENDANCES' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the AeAttendances.cs file instead.
             All custom implementations should be done in the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.AeAttendances"/> class.
             </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeAttendancesServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.AeAttendances"/> instance .
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeAttendancesServiceBase.CreateAeAttendances(System.String,System.Nullable{System.Decimal},System.DateTime,System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.String,System.Nullable{System.Decimal},System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.String,System.Nullable{System.DateTime},System.String,System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.DateTime},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.String,System.String,System.Nullable{System.DateTime},System.String,System.Nullable{System.DateTime},System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.Decimal},System.String,System.String,System.String,System.Nullable{System.Decimal})">
            <summary>
             A simple factory method to create a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.AeAttendances"/> instance.
            </summary>
            <param name="_identifier"></param>
            <param name="_refrlRefno"></param>
            <param name="_arrivedDttm"></param>
            <param name="_onMedication"></param>
            <param name="_allergies"></param>
            <param name="_spontRefno"></param>
            <param name="_patntRefno"></param>
            <param name="_conclDttm"></param>
            <param name="_departedDttm"></param>
            <param name="_tetnsRefno"></param>
            <param name="_stranRefno"></param>
            <param name="_externalKey"></param>
            <param name="_archvFlag"></param>
            <param name="_heorgRefno"></param>
            <param name="_childIndicator"></param>
            <param name="_accompaniedFlag"></param>
            <param name="_aetraRefno"></param>
            <param name="_bloodAlcoholLevel"></param>
            <param name="_restraintWorn"></param>
            <param name="_armodRefno"></param>
            <param name="_atcatRefno"></param>
            <param name="_atdisRefno"></param>
            <param name="_respProcaRefno"></param>
            <param name="_expectedFlag"></param>
            <param name="_lodgedFlag"></param>
            <param name="_lodgedStartDttm"></param>
            <param name="_ambulanceCalledBy"></param>
            <param name="_contactNumber"></param>
            <param name="_attendedByDoctor"></param>
            <param name="_seenDttm"></param>
            <param name="_aepgrRefno"></param>
            <param name="_provdRefno"></param>
            <param name="_contrRefno"></param>
            <param name="_purchRefno"></param>
            <param name="_allgyRefno"></param>
            <param name="_allgyComment"></param>
            <param name="_disrnRefno"></param>
            <param name="_dsinfRefno"></param>
            <param name="_idpapRefno"></param>
            <param name="_reservedFlag"></param>
            <param name="_disdeRefno"></param>
            <param name="_dischProcaRefno"></param>
            <param name="_incidentDttm"></param>
            <param name="_medDischDttm"></param>
            <param name="_dsinfText"></param>
            <param name="_prevAeattRefno"></param>
            <param name="_cstatRefno"></param>
            <param name="_incAttbydrYnunkRefno"></param>
            <param name="_rtaPrice"></param>
            <param name="_rtadtRefno"></param>
            <param name="_rtaSeatbeltYnunkRefno"></param>
            <param name="_rtaAttbydrYnunkRefno"></param>
            <param name="_treatedDttm"></param>
            <param name="_prvspRefno"></param>
            <param name="_aeppsRefno"></param>
            <param name="_schoolHeorgRefno"></param>
            <param name="_patpropFromDttm"></param>
            <param name="_patpropToDttm"></param>
            <param name="_patpropRemoveUsersRefno"></param>
            <param name="_patpropRemoveProcaRefno"></param>
            <param name="_patpropReturnProcaRefno"></param>
            <param name="_patpropReturnUsersRefno"></param>
            <param name="_croepRefno"></param>
            <param name="_inlocRefno"></param>
            <param name="_aclevRefno"></param>
            <param name="_intendProcaRefno"></param>
            <param name="_intendSpectRefno"></param>
            <param name="_intendSpontRefno"></param>
            <param name="_intendBeddsRefno"></param>
            <param name="_intendBdcatRefno"></param>
            <param name="_lstatRefno"></param>
            <param name="_ownerHeorgRefno"></param>
            <param name="_secProcaRefno"></param>
            <param name="_secSpectRefno"></param>
            <param name="_edbedRefno"></param>
            <param name="_lodgedBy"></param>
            <param name="_lodgeComment"></param>
            <param name="_lodgedReqAck"></param>
            <param name="_lodgeAckDttm"></param>
            <param name="_lodgedReqAlloc"></param>
            <param name="_lodgeAllocDttm"></param>
            <param name="_allocComment"></param>
            <param name="_lodgedReqCan"></param>
            <param name="_lodgeCanDttm"></param>
            <param name="_edcanRefno"></param>
            <param name="_canComment"></param>
            <param name="_harpFlag"></param>
            <param name="_aeCaseNumber"></param>
            <param name="_patstRefno"></param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.AeAttendancesServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeAttendancesServiceBase.Get(iSOFT.ANZ.PatientManagerService.Entities.AeAttendancesKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeAttendancesServiceBase.GetByAetraRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_AEATT_AETRA index.
            </summary>
            <param name="_aetraRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeAttendancesServiceBase.GetByAetraRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_AEATT_AETRA index.
            </summary>
            <param name="_aetraRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeAttendancesServiceBase.GetBySchoolHeorgRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_AEATT_SCHOOL_HEORG index.
            </summary>
            <param name="_schoolHeorgRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeAttendancesServiceBase.GetBySchoolHeorgRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_AEATT_SCHOOL_HEORG index.
            </summary>
            <param name="_schoolHeorgRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeAttendancesServiceBase.GetByPatpropRemoveProcaRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_AEATT_PATPROP_REMOVE_PROCA index.
            </summary>
            <param name="_patpropRemoveProcaRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeAttendancesServiceBase.GetByPatpropRemoveProcaRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_AEATT_PATPROP_REMOVE_PROCA index.
            </summary>
            <param name="_patpropRemoveProcaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeAttendancesServiceBase.GetByPatpropRemoveUsersRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_AEATT_PATPROP_REMOVE_USERS index.
            </summary>
            <param name="_patpropRemoveUsersRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeAttendancesServiceBase.GetByPatpropRemoveUsersRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_AEATT_PATPROP_REMOVE_USERS index.
            </summary>
            <param name="_patpropRemoveUsersRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeAttendancesServiceBase.GetByPatpropReturnProcaRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_AEATT_PATPROP_RETURN_PROCA index.
            </summary>
            <param name="_patpropReturnProcaRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeAttendancesServiceBase.GetByPatpropReturnProcaRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_AEATT_PATPROP_RETURN_PROCA index.
            </summary>
            <param name="_patpropReturnProcaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeAttendancesServiceBase.GetByPatpropReturnUsersRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_AEATT_PATPROP_RETURN_USERS index.
            </summary>
            <param name="_patpropReturnUsersRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeAttendancesServiceBase.GetByPatpropReturnUsersRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_AEATT_PATPROP_RETURN_USERS index.
            </summary>
            <param name="_patpropReturnUsersRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeAttendancesServiceBase.GetByPrvspRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_AEATT_PRVSP index.
            </summary>
            <param name="_prvspRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeAttendancesServiceBase.GetByPrvspRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_AEATT_PRVSP index.
            </summary>
            <param name="_prvspRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeAttendancesServiceBase.GetByProvdRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_AEATT_PROVD index.
            </summary>
            <param name="_provdRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeAttendancesServiceBase.GetByProvdRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_AEATT_PROVD index.
            </summary>
            <param name="_provdRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeAttendancesServiceBase.GetByRefrlRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_AEATT_REFRL index.
            </summary>
            <param name="_refrlRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeAttendancesServiceBase.GetByRefrlRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_AEATT_REFRL index.
            </summary>
            <param name="_refrlRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeAttendancesServiceBase.GetBySpontRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_AEATT_SPONT index.
            </summary>
            <param name="_spontRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeAttendancesServiceBase.GetBySpontRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_AEATT_SPONT index.
            </summary>
            <param name="_spontRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeAttendancesServiceBase.GetByPatntRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_AEATT_PATNT index.
            </summary>
            <param name="_patntRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeAttendancesServiceBase.GetByPatntRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_AEATT_PATNT index.
            </summary>
            <param name="_patntRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeAttendancesServiceBase.GetByHeorgRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_AEATT_HEORG index.
            </summary>
            <param name="_heorgRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeAttendancesServiceBase.GetByHeorgRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_AEATT_HEORG index.
            </summary>
            <param name="_heorgRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeAttendancesServiceBase.GetByContrRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_AEATT_CONTR index.
            </summary>
            <param name="_contrRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeAttendancesServiceBase.GetByContrRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_AEATT_CONTR index.
            </summary>
            <param name="_contrRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeAttendancesServiceBase.GetByPurchRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_AEATT_PURCH index.
            </summary>
            <param name="_purchRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeAttendancesServiceBase.GetByPurchRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_AEATT_PURCH index.
            </summary>
            <param name="_purchRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeAttendancesServiceBase.GetByPrevAeattRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_AEATT_PREV_AEATT index.
            </summary>
            <param name="_prevAeattRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeAttendancesServiceBase.GetByPrevAeattRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_AEATT_PREV_AEATT index.
            </summary>
            <param name="_prevAeattRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeAttendancesServiceBase.GetByDischProcaRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_AEATT_DISCH_PROCA index.
            </summary>
            <param name="_dischProcaRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeAttendancesServiceBase.GetByDischProcaRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_AEATT_DISCH_PROCA index.
            </summary>
            <param name="_dischProcaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeAttendancesServiceBase.GetByRtadtRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_AEATT_RTADT index.
            </summary>
            <param name="_rtadtRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeAttendancesServiceBase.GetByRtadtRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_AEATT_RTADT index.
            </summary>
            <param name="_rtadtRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeAttendancesServiceBase.GetByAeattRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_AE_ATTENDANCES index.
            </summary>
            <param name="_aeattRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.AeAttendances"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeAttendancesServiceBase.GetByAeattRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_AE_ATTENDANCES index.
            </summary>
            <param name="_aeattRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.AeAttendances"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeAttendancesServiceBase.GetByIdentifier(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key SAH_AEATT_IDENT index.
            </summary>
            <param name="_identifier"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeAttendancesServiceBase.GetByIdentifier(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key SAH_AEATT_IDENT index.
            </summary>
            <param name="_identifier"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeAttendancesServiceBase.GetByExpectedFlag(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key SAH_AE_EXPECTED index.
            </summary>
            <param name="_expectedFlag"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeAttendancesServiceBase.GetByExpectedFlag(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key SAH_AE_EXPECTED index.
            </summary>
            <param name="_expectedFlag"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeAttendancesServiceBase.GetByRespProcaRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_AEATT_RESP_PROCA index.
            </summary>
            <param name="_respProcaRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeAttendancesServiceBase.GetByRespProcaRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_AEATT_RESP_PROCA index.
            </summary>
            <param name="_respProcaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeAttendancesServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.AeAttendances" /> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeAttendancesServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.AeAttendances" /> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> </returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeAttendancesServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>AeAttendances</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeAttendancesServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>AeAttendances</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeAttendancesServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>AeAttendances</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeAttendancesServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeAttendancesServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.AeAttendances)">
            <summary>
            public virtual method that Inserts a AeAttendances object into the datasource using a transaction.
            </summary>
            <param name="entity">AeAttendances object to Insert.</param>
            <remarks>After Inserting into the datasource, the AeAttendances object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            AeAttendances entity = new AeAttendances();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	AeAttendancesService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeAttendancesServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.AeAttendances})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>AeAttendances</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>AeAttendances</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of AeAttendances.
             <code><![CDATA[
             TList<AeAttendances> list = new TList<AeAttendances>();
             AeAttendances entity = new AeAttendances();
             entity.StringProperty = "foo";
             AeAttendances entity2 = new AeAttendances();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AeAttendancesService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeAttendancesServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.AeAttendances)">
            <summary>
            public virtual method that Updates a AeAttendances object into the datasource using a transaction.
            </summary>
            <param name="entity">AeAttendances object to Update.</param>
            <remarks>After Updateing into the datasource, the AeAttendances object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            AeAttendances entity = AeAttendancesService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	AeAttendancesService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeAttendancesServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.AeAttendances})">
             <summary>
             public virtual method that Updates rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>AeAttendances</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>AeAttendances</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of AeAttendances.
             <code><![CDATA[
             TList<AeAttendances> list = new TList<AeAttendances>();
             AeAttendances entity = new AeAttendances();
             entity.StringProperty = "foo";
             AeAttendances entity2 = new AeAttendances();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AeAttendancesService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeAttendancesServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.AeAttendances)">
            <summary>
            public virtual method that Deletes a AeAttendances object into the datasource using a transaction.
            </summary>
            <param name="entity">AeAttendances object to Delete.</param>
            <remarks>After Deleteing into the datasource, the AeAttendances object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            AeAttendances entity = AeAttendancesService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	AeAttendancesService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeAttendancesServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.AeAttendances})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>AeAttendances</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>AeAttendances</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of AeAttendances.
             <code><![CDATA[
             TList<AeAttendances> list = new TList<AeAttendances>();
             AeAttendances entity = new AeAttendances();
             entity.StringProperty = "foo";
             AeAttendances entity2 = new AeAttendances();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AeAttendancesService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeAttendancesServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.AeAttendancesKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeAttendancesServiceBase.Delete(System.Decimal)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Decimal _aeattRefno
            </summary>
            <param name="_aeattRefno">AeAttendances pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.SchedulesService">
            <summary>
            An component type implementation of the 'SCHEDULES' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesService.#ctor">
            <summary>
            Initializes a new instance of the SchedulesService class.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesService.GetOutpatientEventsInTimePeriod(System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.DateTime,System.DateTime,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key HSS_BEDST_START index.
            </summary>
            <param name="_startDttm"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesService.GetWardAttenderEventsInTimePeriod(System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.DateTime,System.DateTime,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key HSS_BEDST_START index.
            </summary>
            <param name="_startDttm"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesService.GetContactEventsInTimePeriod(System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.DateTime,System.DateTime,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key HSS_BEDST_START index.
            </summary>
            <param name="_startDttm"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesService.GetTheatreEventsInTimePeriod(System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.DateTime,System.DateTime,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key HSS_BEDST_START index.
            </summary>
            <param name="_startDttm"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesService.GetTheatreEventsByPatntRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key HSS_BEDST_START index.
            </summary>
            <param name="_startDttm"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase">
            <summary>
             An object representation of the 'SCHEDULES' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Schedules.cs file instead.
             All custom implementations should be done in the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Schedules"/> class.
             </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Schedules"/> instance .
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.CreateSchedules(System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.DateTime},System.Nullable{System.Decimal},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{System.DateTime},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Decimal,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.DateTime},System.Nullable{System.Decimal},System.Nullable{System.DateTime},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
            <summary>
             A simple factory method to create a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Schedules"/> instance.
            </summary>
            <param name="_wlistRefno"></param>
            <param name="_sstayRefno"></param>
            <param name="_sstaySpontRefno"></param>
            <param name="_stranRefno"></param>
            <param name="_spectRefno"></param>
            <param name="_provdRefno"></param>
            <param name="_linkRefno"></param>
            <param name="_contrRefno"></param>
            <param name="_purchRefno"></param>
            <param name="_procaRefno"></param>
            <param name="_refrlRefno"></param>
            <param name="_prcaeRefno"></param>
            <param name="_patntRefno"></param>
            <param name="_reqstDttm"></param>
            <param name="_startDttm"></param>
            <param name="_endDttm"></param>
            <param name="_visitRefno"></param>
            <param name="_sctypRefno"></param>
            <param name="_reasnRefno"></param>
            <param name="_reasnComments"></param>
            <param name="_urgncRefno"></param>
            <param name="_prityRefno"></param>
            <param name="_transRefno"></param>
            <param name="_cancrRefno"></param>
            <param name="_cancrDttm"></param>
            <param name="_movrnRefno"></param>
            <param name="_moveDttm"></param>
            <param name="_arrivedDttm"></param>
            <param name="_seenDttm"></param>
            <param name="_departedDttm"></param>
            <param name="_attndRefno"></param>
            <param name="_dnarsRefno"></param>
            <param name="_scocmRefno"></param>
            <param name="_comments"></param>
            <param name="_priorRefno"></param>
            <param name="_calledDttm"></param>
            <param name="_spontRefno"></param>
            <param name="_duration"></param>
            <param name="_adcatRefno"></param>
            <param name="_archvFlag"></param>
            <param name="_priorPointer"></param>
            <param name="_externalKey"></param>
            <param name="_spssnRefno"></param>
            <param name="_moveCount"></param>
            <param name="_steamRefno"></param>
            <param name="_lotypRefno"></param>
            <param name="_location"></param>
            <param name="_actualDuration"></param>
            <param name="_outwdDuration"></param>
            <param name="_retrnDuration"></param>
            <param name="_plannedNumber"></param>
            <param name="_actualNumber"></param>
            <param name="_contpRefno"></param>
            <param name="_contyRefno"></param>
            <param name="_resourceUnits"></param>
            <param name="_resutRefno"></param>
            <param name="_satypRefno"></param>
            <param name="_outwdJrneyStartDttm"></param>
            <param name="_outwdJrneyEndDttm"></param>
            <param name="_retrnJrneyStartDttm"></param>
            <param name="_retrnJrneyEndDttm"></param>
            <param name="_approxFlag"></param>
            <param name="_scsdaRefno"></param>
            <param name="_pacacRefno"></param>
            <param name="_paassRefno"></param>
            <param name="_ctrsvRefno"></param>
            <param name="_allcnOverrideFlag"></param>
            <param name="_parntRefno"></param>
            <param name="_admofRefno"></param>
            <param name="_murqbRefno"></param>
            <param name="_cstatRefno"></param>
            <param name="_cccccRefno"></param>
            <param name="_lotypHeorgRefno"></param>
            <param name="_identifier"></param>
            <param name="_pconfRefno"></param>
            <param name="_operDuration"></param>
            <param name="_anaesDuration"></param>
            <param name="_intoTheatreDttm"></param>
            <param name="_intoPostopDttm"></param>
            <param name="_aeattRefno"></param>
            <param name="_bedstRefno"></param>
            <param name="_unplannedRet"></param>
            <param name="_invoiceTag"></param>
            <param name="_dnaSchdlRefno"></param>
            <param name="_oldScocmRefno"></param>
            <param name="_cancbRefno"></param>
            <param name="_anaesProcaRefno"></param>
            <param name="_scrcrRefno"></param>
            <param name="_slateRefno"></param>
            <param name="_seenbyProcaRefno"></param>
            <param name="_antypRefno"></param>
            <param name="_toSpontRefno"></param>
            <param name="_toBedRefno"></param>
            <param name="_aclevRefno"></param>
            <param name="_dlnkcRefno"></param>
            <param name="_prevScsdaRefno"></param>
            <param name="_newApptsDesc"></param>
            <param name="_ownerHeorgRefno"></param>
            <param name="_compsRefno"></param>
            <param name="_ptclsRefno"></param>
            <param name="_dycepRefno"></param>
            <param name="_dietyRefno"></param>
            <param name="_transRef"></param>
            <param name="_facSchdlRefno"></param>
            <param name="_plannedAttendees"></param>
            <param name="_actualAttendees"></param>
            <param name="_followupCount"></param>
            <param name="_nonAppsvrModifDttm"></param>
            <param name="_userRefno"></param>
            <param name="_anaesDttm"></param>
            <param name="_bktypRefno"></param>
            <param name="_overbookFlag"></param>
            <param name="_toBdcatRefno"></param>
            <param name="_pogrpRefno"></param>
            <param name="_caldlRefno"></param>
            <param name="_grpSession"></param>
            <param name="_indirectService"></param>
            <param name="_cancelComments"></param>
            <param name="_brkslRefno"></param>
            <param name="_fundaRefno"></param>
            <param name="_progrRefno"></param>
            <param name="_subprRefno"></param>
            <param name="_ropctRefno"></param>
            <param name="_patntAttnd"></param>
            <param name="_outwdDistance"></param>
            <param name="_inwrdDistance"></param>
            <param name="_schdlPriorRefno"></param>
            <param name="_grpStaffFlag"></param>
            <param name="_agpriRefno"></param>
            <param name="_intypRefno"></param>
            <param name="_sorceCode"></param>
            <param name="_sorceRefno"></param>
            <param name="_patinRefno"></param>
            <param name="_grppuRefno"></param>
            <param name="_grptyRefno"></param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetByAdcatRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_SCHDL_ADCAT key.
            	CNA_SCHDL_ADCAT Description: 
            </summary>
            <param name="_adcatRefno"></param>
            <returns>Returns a generic collection of Schedules objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetByAdcatRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_SCHDL_ADCAT key.
            	CNA_SCHDL_ADCAT Description: 
            </summary>
            <param name="_adcatRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>Schedules</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetByCccccRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_SCHDL_CCCCC key.
            	CNA_SCHDL_CCCCC Description: 
            </summary>
            <param name="_cccccRefno"></param>
            <returns>Returns a generic collection of Schedules objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetByCccccRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_SCHDL_CCCCC key.
            	CNA_SCHDL_CCCCC Description: 
            </summary>
            <param name="_cccccRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>Schedules</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetByContpRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_SCHDL_CONTP key.
            	CNA_SCHDL_CONTP Description: 
            </summary>
            <param name="_contpRefno"></param>
            <returns>Returns a generic collection of Schedules objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetByContpRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_SCHDL_CONTP key.
            	CNA_SCHDL_CONTP Description: 
            </summary>
            <param name="_contpRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>Schedules</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetByContyRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_SCHDL_CONTY key.
            	CNA_SCHDL_CONTY Description: 
            </summary>
            <param name="_contyRefno"></param>
            <returns>Returns a generic collection of Schedules objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetByContyRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_SCHDL_CONTY key.
            	CNA_SCHDL_CONTY Description: 
            </summary>
            <param name="_contyRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>Schedules</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetByCstatRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_SCHDL_CSTAT key.
            	CNA_SCHDL_CSTAT Description: 
            </summary>
            <param name="_cstatRefno"></param>
            <returns>Returns a generic collection of Schedules objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetByCstatRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_SCHDL_CSTAT key.
            	CNA_SCHDL_CSTAT Description: 
            </summary>
            <param name="_cstatRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>Schedules</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetByDnarsRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_SCHDL_DNARS key.
            	CNA_SCHDL_DNARS Description: 
            </summary>
            <param name="_dnarsRefno"></param>
            <returns>Returns a generic collection of Schedules objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetByDnarsRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_SCHDL_DNARS key.
            	CNA_SCHDL_DNARS Description: 
            </summary>
            <param name="_dnarsRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>Schedules</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetByLotypRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_SCHDL_LOTYP key.
            	CNA_SCHDL_LOTYP Description: 
            </summary>
            <param name="_lotypRefno"></param>
            <returns>Returns a generic collection of Schedules objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetByLotypRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_SCHDL_LOTYP key.
            	CNA_SCHDL_LOTYP Description: 
            </summary>
            <param name="_lotypRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>Schedules</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetByMovrnRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_SCHDL_MOVRN key.
            	CNA_SCHDL_MOVRN Description: 
            </summary>
            <param name="_movrnRefno"></param>
            <returns>Returns a generic collection of Schedules objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetByMovrnRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_SCHDL_MOVRN key.
            	CNA_SCHDL_MOVRN Description: 
            </summary>
            <param name="_movrnRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>Schedules</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetByMurqbRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_SCHDL_MURQB key.
            	CNA_SCHDL_MURQB Description: 
            </summary>
            <param name="_murqbRefno"></param>
            <returns>Returns a generic collection of Schedules objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetByMurqbRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_SCHDL_MURQB key.
            	CNA_SCHDL_MURQB Description: 
            </summary>
            <param name="_murqbRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>Schedules</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetByPrityRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_SCHDL_PRITY key.
            	CNA_SCHDL_PRITY Description: 
            </summary>
            <param name="_prityRefno"></param>
            <returns>Returns a generic collection of Schedules objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetByPrityRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_SCHDL_PRITY key.
            	CNA_SCHDL_PRITY Description: 
            </summary>
            <param name="_prityRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>Schedules</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetByReasnRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_SCHDL_REASN key.
            	CNA_SCHDL_REASN Description: 
            </summary>
            <param name="_reasnRefno"></param>
            <returns>Returns a generic collection of Schedules objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetByReasnRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_SCHDL_REASN key.
            	CNA_SCHDL_REASN Description: 
            </summary>
            <param name="_reasnRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>Schedules</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetByResutRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_SCHDL_RESUT key.
            	CNA_SCHDL_RESUT Description: 
            </summary>
            <param name="_resutRefno"></param>
            <returns>Returns a generic collection of Schedules objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetByResutRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_SCHDL_RESUT key.
            	CNA_SCHDL_RESUT Description: 
            </summary>
            <param name="_resutRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>Schedules</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetBySatypRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_SCHDL_SATYP key.
            	CNA_SCHDL_SATYP Description: 
            </summary>
            <param name="_satypRefno"></param>
            <returns>Returns a generic collection of Schedules objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetBySatypRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_SCHDL_SATYP key.
            	CNA_SCHDL_SATYP Description: 
            </summary>
            <param name="_satypRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>Schedules</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetByScocmRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_SCHDL_SCOCM key.
            	CNA_SCHDL_SCOCM Description: 
            </summary>
            <param name="_scocmRefno"></param>
            <returns>Returns a generic collection of Schedules objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetByScocmRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_SCHDL_SCOCM key.
            	CNA_SCHDL_SCOCM Description: 
            </summary>
            <param name="_scocmRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>Schedules</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetByScsdaRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_SCHDL_SCSDA key.
            	CNA_SCHDL_SCSDA Description: 
            </summary>
            <param name="_scsdaRefno"></param>
            <returns>Returns a generic collection of Schedules objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetByScsdaRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_SCHDL_SCSDA key.
            	CNA_SCHDL_SCSDA Description: 
            </summary>
            <param name="_scsdaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>Schedules</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetBySctypRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_SCHDL_SCTYP key.
            	CNA_SCHDL_SCTYP Description: 
            </summary>
            <param name="_sctypRefno"></param>
            <returns>Returns a generic collection of Schedules objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetBySctypRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_SCHDL_SCTYP key.
            	CNA_SCHDL_SCTYP Description: 
            </summary>
            <param name="_sctypRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>Schedules</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetByTransRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_SCHDL_TRANS key.
            	CNA_SCHDL_TRANS Description: 
            </summary>
            <param name="_transRefno"></param>
            <returns>Returns a generic collection of Schedules objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetByTransRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_SCHDL_TRANS key.
            	CNA_SCHDL_TRANS Description: 
            </summary>
            <param name="_transRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>Schedules</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetByUrgncRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_SCHDL_URGNC key.
            	CNA_SCHDL_URGNC Description: 
            </summary>
            <param name="_urgncRefno"></param>
            <returns>Returns a generic collection of Schedules objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetByUrgncRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_SCHDL_URGNC key.
            	CNA_SCHDL_URGNC Description: 
            </summary>
            <param name="_urgncRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>Schedules</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetByVisitRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_SCHDL_VISIT key.
            	CNA_SCHDL_VISIT Description: 
            </summary>
            <param name="_visitRefno"></param>
            <returns>Returns a generic collection of Schedules objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetByVisitRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_SCHDL_VISIT key.
            	CNA_SCHDL_VISIT Description: 
            </summary>
            <param name="_visitRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>Schedules</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.Get(iSOFT.ANZ.PatientManagerService.Entities.SchedulesKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetByPatntRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SCHDL_PATNT index.
            </summary>
            <param name="_patntRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetByPatntRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SCHDL_PATNT index.
            </summary>
            <param name="_patntRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetByWlistRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SCHDL_WLIST index.
            </summary>
            <param name="_wlistRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetByWlistRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SCHDL_WLIST index.
            </summary>
            <param name="_wlistRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetBySstayRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SCHDL_SSTAY index.
            </summary>
            <param name="_sstayRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetBySstayRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SCHDL_SSTAY index.
            </summary>
            <param name="_sstayRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetBySstaySpontRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SCHDL_SSTAY_SPONT index.
            </summary>
            <param name="_sstaySpontRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetBySstaySpontRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SCHDL_SSTAY_SPONT index.
            </summary>
            <param name="_sstaySpontRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetBySpectRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SCHDL_SPECT index.
            </summary>
            <param name="_spectRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetBySpectRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SCHDL_SPECT index.
            </summary>
            <param name="_spectRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetBySorceRefnoSorceCode(System.Nullable{System.Decimal},System.String)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SCHDL_SREFNO_SCODE index.
            </summary>
            <param name="_sorceRefno"></param>
            <param name="_sorceCode"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetBySorceRefnoSorceCode(System.Nullable{System.Decimal},System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SCHDL_SREFNO_SCODE index.
            </summary>
            <param name="_sorceRefno"></param>
            <param name="_sorceCode"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetByLinkRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SCHDL_LINK index.
            </summary>
            <param name="_linkRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetByLinkRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SCHDL_LINK index.
            </summary>
            <param name="_linkRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetByPacacRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SCHDL_PACAC index.
            </summary>
            <param name="_pacacRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetByPacacRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SCHDL_PACAC index.
            </summary>
            <param name="_pacacRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetByPaassRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SCHDL_PAASS index.
            </summary>
            <param name="_paassRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetByPaassRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SCHDL_PAASS index.
            </summary>
            <param name="_paassRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetByCtrsvRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SCHDL_CTRSV index.
            </summary>
            <param name="_ctrsvRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetByCtrsvRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SCHDL_CTRSV index.
            </summary>
            <param name="_ctrsvRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetByAdmofRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SCHDL_ADMOF index.
            </summary>
            <param name="_admofRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetByAdmofRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SCHDL_ADMOF index.
            </summary>
            <param name="_admofRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetByAnaesProcaRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SCHDL_ANAES_PROCA index.
            </summary>
            <param name="_anaesProcaRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetByAnaesProcaRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SCHDL_ANAES_PROCA index.
            </summary>
            <param name="_anaesProcaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetByScrcrRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SCHDL_SCRCR index.
            </summary>
            <param name="_scrcrRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetByScrcrRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SCHDL_SCRCR index.
            </summary>
            <param name="_scrcrRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetByContrRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SCHDL_CONTR index.
            </summary>
            <param name="_contrRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetByContrRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SCHDL_CONTR index.
            </summary>
            <param name="_contrRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetByPurchRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SCHDL_PURCH index.
            </summary>
            <param name="_purchRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetByPurchRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SCHDL_PURCH index.
            </summary>
            <param name="_purchRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetByPrcaeRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SCHDL_PRCAE index.
            </summary>
            <param name="_prcaeRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetByPrcaeRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SCHDL_PRCAE index.
            </summary>
            <param name="_prcaeRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetBySpontRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SCHDL_SPONT index.
            </summary>
            <param name="_spontRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetBySpontRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SCHDL_SPONT index.
            </summary>
            <param name="_spontRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetBySpssnRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SCHDL_SPSSN index.
            </summary>
            <param name="_spssnRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetBySpssnRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SCHDL_SPSSN index.
            </summary>
            <param name="_spssnRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetByParntRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SCHDL_PARNT index.
            </summary>
            <param name="_parntRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetByParntRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SCHDL_PARNT index.
            </summary>
            <param name="_parntRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetBySteamRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SCHDL_STEAM index.
            </summary>
            <param name="_steamRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetBySteamRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SCHDL_STEAM index.
            </summary>
            <param name="_steamRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetByAeattRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SCHDL_AEATT index.
            </summary>
            <param name="_aeattRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetByAeattRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SCHDL_AEATT index.
            </summary>
            <param name="_aeattRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetByDnaSchdlRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SCHDL_DNA_SCHDL index.
            </summary>
            <param name="_dnaSchdlRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetByDnaSchdlRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SCHDL_DNA_SCHDL index.
            </summary>
            <param name="_dnaSchdlRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetByPconfRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SCHDL_PCONF index.
            </summary>
            <param name="_pconfRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetByPconfRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SCHDL_PCONF index.
            </summary>
            <param name="_pconfRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetBySchdlRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_SCHEDULES index.
            </summary>
            <param name="_schdlRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Schedules"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetBySchdlRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_SCHEDULES index.
            </summary>
            <param name="_schdlRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Schedules"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetByAttndRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_SCHDL_ATTND index.
            </summary>
            <param name="_attndRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetByAttndRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_SCHDL_ATTND index.
            </summary>
            <param name="_attndRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetByIdentifier(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_SCHDL_IDENTIFIER index.
            </summary>
            <param name="_identifier"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetByIdentifier(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_SCHDL_IDENTIFIER index.
            </summary>
            <param name="_identifier"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetByPatntRefnoSctypRefnoSpontRefno(System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_SCHDL_PATNT_SCTYP_SPONT index.
            </summary>
            <param name="_patntRefno"></param>
            <param name="_sctypRefno"></param>
            <param name="_spontRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetByPatntRefnoSctypRefnoSpontRefno(System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_SCHDL_PATNT_SCTYP_SPONT index.
            </summary>
            <param name="_patntRefno"></param>
            <param name="_sctypRefno"></param>
            <param name="_spontRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetBySctypRefnoArchvFlag(System.Nullable{System.Decimal},System.String)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_SCHDL_SCTYP index.
            </summary>
            <param name="_sctypRefno"></param>
            <param name="_archvFlag"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetBySctypRefnoArchvFlag(System.Nullable{System.Decimal},System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_SCHDL_SCTYP index.
            </summary>
            <param name="_sctypRefno"></param>
            <param name="_archvFlag"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetByLotypHeorgRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SCHDL_LOTYP_HEORG index.
            </summary>
            <param name="_lotypHeorgRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetByLotypHeorgRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SCHDL_LOTYP_HEORG index.
            </summary>
            <param name="_lotypHeorgRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetByProcaRefnoSctypRefno(System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key PROCA_SCHDL index.
            </summary>
            <param name="_procaRefno"></param>
            <param name="_sctypRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetByProcaRefnoSctypRefno(System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key PROCA_SCHDL index.
            </summary>
            <param name="_procaRefno"></param>
            <param name="_sctypRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetByScocmRefnoSpectRefno(System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key SAH_SCHDL_SCOCMSPECT index.
            </summary>
            <param name="_scocmRefno"></param>
            <param name="_spectRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetByScocmRefnoSpectRefno(System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key SAH_SCHDL_SCOCMSPECT index.
            </summary>
            <param name="_scocmRefno"></param>
            <param name="_spectRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetBySpontRefnoScsdaRefno(System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key SAH_SCHD_SPONT_SCSDA index.
            </summary>
            <param name="_spontRefno"></param>
            <param name="_scsdaRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetBySpontRefnoScsdaRefno(System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key SAH_SCHD_SPONT_SCSDA index.
            </summary>
            <param name="_spontRefno"></param>
            <param name="_scsdaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetBySpontRefnoSctypRefnoSpectRefnoPatntRefno(System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key SAH_SCHEDULES_SPONTSPEC index.
            </summary>
            <param name="_spontRefno"></param>
            <param name="_sctypRefno"></param>
            <param name="_spectRefno"></param>
            <param name="_patntRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetBySpontRefnoSctypRefnoSpectRefnoPatntRefno(System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key SAH_SCHEDULES_SPONTSPEC index.
            </summary>
            <param name="_spontRefno"></param>
            <param name="_sctypRefno"></param>
            <param name="_spectRefno"></param>
            <param name="_patntRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetByProcaRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SCHDL_PROCA index.
            </summary>
            <param name="_procaRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetByProcaRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SCHDL_PROCA index.
            </summary>
            <param name="_procaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetBySeenbyProcaRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SCHDL_SEENBY_PROCA index.
            </summary>
            <param name="_seenbyProcaRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetBySeenbyProcaRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SCHDL_SEENBY_PROCA index.
            </summary>
            <param name="_seenbyProcaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetByPriorRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SCHDL_PRIOR index.
            </summary>
            <param name="_priorRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetByPriorRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SCHDL_PRIOR index.
            </summary>
            <param name="_priorRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetByBedstRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SCHDL_BEDST index.
            </summary>
            <param name="_bedstRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetByBedstRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SCHDL_BEDST index.
            </summary>
            <param name="_bedstRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetByProvdRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SCHDL_PROVD index.
            </summary>
            <param name="_provdRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetByProvdRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SCHDL_PROVD index.
            </summary>
            <param name="_provdRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetByRefrlRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SCHDL_REFRL index.
            </summary>
            <param name="_refrlRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetByRefrlRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SCHDL_REFRL index.
            </summary>
            <param name="_refrlRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Schedules" /> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Schedules" /> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> </returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Schedules</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Schedules</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Schedules</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.Schedules)">
            <summary>
            public virtual method that Inserts a Schedules object into the datasource using a transaction.
            </summary>
            <param name="entity">Schedules object to Insert.</param>
            <remarks>After Inserting into the datasource, the Schedules object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Schedules entity = new Schedules();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	SchedulesService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.Schedules})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>Schedules</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Schedules</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Schedules.
             <code><![CDATA[
             TList<Schedules> list = new TList<Schedules>();
             Schedules entity = new Schedules();
             entity.StringProperty = "foo";
             Schedules entity2 = new Schedules();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SchedulesService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.Schedules)">
            <summary>
            public virtual method that Updates a Schedules object into the datasource using a transaction.
            </summary>
            <param name="entity">Schedules object to Update.</param>
            <remarks>After Updateing into the datasource, the Schedules object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Schedules entity = SchedulesService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	SchedulesService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.Schedules})">
             <summary>
             public virtual method that Updates rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>Schedules</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Schedules</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Schedules.
             <code><![CDATA[
             TList<Schedules> list = new TList<Schedules>();
             Schedules entity = new Schedules();
             entity.StringProperty = "foo";
             Schedules entity2 = new Schedules();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SchedulesService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.Schedules)">
            <summary>
            public virtual method that Deletes a Schedules object into the datasource using a transaction.
            </summary>
            <param name="entity">Schedules object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Schedules object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Schedules entity = SchedulesService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	SchedulesService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.Schedules})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>Schedules</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Schedules</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Schedules.
             <code><![CDATA[
             TList<Schedules> list = new TList<Schedules>();
             Schedules entity = new Schedules();
             entity.StringProperty = "foo";
             Schedules entity2 = new Schedules();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SchedulesService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.SchedulesKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SchedulesServiceBase.Delete(System.Decimal)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Decimal _schdlRefno
            </summary>
            <param name="_schdlRefno">Schedules pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.ActiveInpatientsService">
            <summary>
            An component type implementation of the 'ACTIVE_INPATIENTS' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ActiveInpatientsService.#ctor">
            <summary>
            Initializes a new instance of the ActiveInpatientsService class.
            </summary>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.ActiveInpatientsServiceBase">
            <summary>
             An object representation of the 'ACTIVE_INPATIENTS' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ActiveInpatients.cs file instead.
             All custom implementations should be done in the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ActiveInpatients"/> class.
             </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ActiveInpatientsServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ActiveInpatients"/> instance .
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ActiveInpatientsServiceBase.CreateActiveInpatients(System.Decimal,System.Decimal,System.Nullable{System.Decimal},System.Decimal,System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ActiveInpatients"/> instance.
            </summary>
            <param name="_patntRefno"></param>
            <param name="_prvspRefno"></param>
            <param name="_percaRefno"></param>
            <param name="_sstayRefno"></param>
            <param name="_refrlRefno"></param>
            <param name="_icon"></param>
            <param name="_cccccRefno"></param>
            <param name="_prcaeRefno"></param>
            <param name="_spbedRefno"></param>
            <param name="_procaRefno"></param>
            <param name="_spontRefno"></param>
            <param name="_spectRefno"></param>
            <param name="_wardAdmitDttm"></param>
            <param name="_wardDischDttm"></param>
            <param name="_hospAdminDttm"></param>
            <param name="_bedssRefno"></param>
            <param name="_bedstRefno"></param>
            <param name="_bdcatRefno"></param>
            <param name="_billBdcatRefno"></param>
            <param name="_reqtdBdcatRefno"></param>
            <param name="_adsorRefno"></param>
            <param name="_inmgtRefno"></param>
            <param name="_dsinfRefno"></param>
            <param name="_idpapRefno"></param>
            <param name="_readmRefno"></param>
            <param name="_adcatRefno"></param>
            <param name="_aclevRefno"></param>
            <param name="_medicalDishDttm"></param>
            <param name="_expectedDischDttm"></param>
            <param name="_ownerHeorgRefno"></param>
            <param name="_archvFlag"></param>
            <param name="_stranRefno"></param>
            <param name="_externalKey"></param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.ActiveInpatientsServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ActiveInpatientsServiceBase.Get(iSOFT.ANZ.PatientManagerService.Entities.ActiveInpatientsKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ActiveInpatientsServiceBase.GetBySpontRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_SPONT_REFNO index.
            </summary>
            <param name="_spontRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ActiveInpatientsServiceBase.GetBySpontRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_SPONT_REFNO index.
            </summary>
            <param name="_spontRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ActiveInpatientsServiceBase.GetByPrvspRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key SAH_AINPT_PRVSP index.
            </summary>
            <param name="_prvspRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ActiveInpatientsServiceBase.GetByPrvspRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key SAH_AINPT_PRVSP index.
            </summary>
            <param name="_prvspRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ActiveInpatientsServiceBase.GetByAinptRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_ACTIVE_INPATIENTS index.
            </summary>
            <param name="_ainptRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ActiveInpatients"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ActiveInpatientsServiceBase.GetByAinptRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_ACTIVE_INPATIENTS index.
            </summary>
            <param name="_ainptRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ActiveInpatients"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ActiveInpatientsServiceBase.GetByPatntRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_PATNT_REFNO index.
            </summary>
            <param name="_patntRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ActiveInpatientsServiceBase.GetByPatntRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_PATNT_REFNO index.
            </summary>
            <param name="_patntRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ActiveInpatientsServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ActiveInpatients" /> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ActiveInpatientsServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ActiveInpatients" /> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> </returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ActiveInpatientsServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ActiveInpatients</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ActiveInpatientsServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ActiveInpatients</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ActiveInpatientsServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ActiveInpatients</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ActiveInpatientsServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ActiveInpatientsServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.ActiveInpatients)">
            <summary>
            public virtual method that Inserts a ActiveInpatients object into the datasource using a transaction.
            </summary>
            <param name="entity">ActiveInpatients object to Insert.</param>
            <remarks>After Inserting into the datasource, the ActiveInpatients object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            ActiveInpatients entity = new ActiveInpatients();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ActiveInpatientsService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ActiveInpatientsServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.ActiveInpatients})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>ActiveInpatients</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>ActiveInpatients</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of ActiveInpatients.
             <code><![CDATA[
             TList<ActiveInpatients> list = new TList<ActiveInpatients>();
             ActiveInpatients entity = new ActiveInpatients();
             entity.StringProperty = "foo";
             ActiveInpatients entity2 = new ActiveInpatients();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ActiveInpatientsService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ActiveInpatientsServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.ActiveInpatients)">
            <summary>
            public virtual method that Updates a ActiveInpatients object into the datasource using a transaction.
            </summary>
            <param name="entity">ActiveInpatients object to Update.</param>
            <remarks>After Updateing into the datasource, the ActiveInpatients object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            ActiveInpatients entity = ActiveInpatientsService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ActiveInpatientsService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ActiveInpatientsServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.ActiveInpatients})">
             <summary>
             public virtual method that Updates rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>ActiveInpatients</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>ActiveInpatients</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of ActiveInpatients.
             <code><![CDATA[
             TList<ActiveInpatients> list = new TList<ActiveInpatients>();
             ActiveInpatients entity = new ActiveInpatients();
             entity.StringProperty = "foo";
             ActiveInpatients entity2 = new ActiveInpatients();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ActiveInpatientsService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ActiveInpatientsServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.ActiveInpatients)">
            <summary>
            public virtual method that Deletes a ActiveInpatients object into the datasource using a transaction.
            </summary>
            <param name="entity">ActiveInpatients object to Delete.</param>
            <remarks>After Deleteing into the datasource, the ActiveInpatients object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            ActiveInpatients entity = ActiveInpatientsService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ActiveInpatientsService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ActiveInpatientsServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.ActiveInpatients})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>ActiveInpatients</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>ActiveInpatients</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of ActiveInpatients.
             <code><![CDATA[
             TList<ActiveInpatients> list = new TList<ActiveInpatients>();
             ActiveInpatients entity = new ActiveInpatients();
             entity.StringProperty = "foo";
             ActiveInpatients entity2 = new ActiveInpatients();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ActiveInpatientsService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ActiveInpatientsServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.ActiveInpatientsKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ActiveInpatientsServiceBase.Delete(System.Decimal)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Decimal _ainptRefno
            </summary>
            <param name="_ainptRefno">ActiveInpatients pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.RulesService">
            <summary>
            An component type implementation of the 'RULES' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.RulesService.#ctor">
            <summary>
            Initializes a new instance of the RulesService class.
            </summary>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.RulesServiceBase">
            <summary>
             An object representation of the 'RULES' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Rules.cs file instead.
             All custom implementations should be done in the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Rules"/> class.
             </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.RulesServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Rules"/> instance .
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.RulesServiceBase.CreateRules(System.Decimal,System.Nullable{System.Decimal},System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Decimal},System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Decimal},System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
            <summary>
             A simple factory method to create a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Rules"/> instance.
            </summary>
            <param name="_rulesRefno"></param>
            <param name="_stranRefno"></param>
            <param name="_code"></param>
            <param name="_description"></param>
            <param name="_defltOperator"></param>
            <param name="_defltValue"></param>
            <param name="_archvFlag"></param>
            <param name="_priorPointer"></param>
            <param name="_rfvdmCode"></param>
            <param name="_externalKey"></param>
            <param name="_lowValue"></param>
            <param name="_highValue"></param>
            <param name="_rltypCode"></param>
            <param name="_processModuleId"></param>
            <param name="_actypRefno"></param>
            <param name="_dataType"></param>
            <param name="_bindType"></param>
            <param name="_tablsAliasName"></param>
            <param name="EntitySafe_TableName"></param>
            <param name="_tableColumn"></param>
            <param name="_ownerHeorgRefno"></param>
            <param name="_dftopRefno"></param>
            <param name="_cdrusRefno"></param>
            <param name="_dftvlRefno"></param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.RulesServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.RulesServiceBase.Get(iSOFT.ANZ.PatientManagerService.Entities.RulesKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.RulesServiceBase.GetByCode(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_RULES_CODE index.
            </summary>
            <param name="_code"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.RulesServiceBase.GetByCode(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_RULES_CODE index.
            </summary>
            <param name="_code"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.RulesServiceBase.GetByRulesRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_RULES index.
            </summary>
            <param name="_rulesRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Rules"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.RulesServiceBase.GetByRulesRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_RULES index.
            </summary>
            <param name="_rulesRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Rules"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.RulesServiceBase.GetByRltypCode(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CLU_RULES_RLTYP index.
            </summary>
            <param name="_rltypCode"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.RulesServiceBase.GetByRltypCode(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CLU_RULES_RLTYP index.
            </summary>
            <param name="_rltypCode"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.RulesServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Rules" /> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.RulesServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Rules" /> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> </returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.RulesServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Rules</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.RulesServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Rules</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.RulesServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Rules</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.RulesServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.RulesServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.Rules)">
            <summary>
            public virtual method that Inserts a Rules object into the datasource using a transaction.
            </summary>
            <param name="entity">Rules object to Insert.</param>
            <remarks>After Inserting into the datasource, the Rules object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Rules entity = new Rules();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	RulesService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.RulesServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.Rules})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>Rules</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Rules</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Rules.
             <code><![CDATA[
             TList<Rules> list = new TList<Rules>();
             Rules entity = new Rules();
             entity.StringProperty = "foo";
             Rules entity2 = new Rules();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	RulesService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.RulesServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.Rules)">
            <summary>
            public virtual method that Updates a Rules object into the datasource using a transaction.
            </summary>
            <param name="entity">Rules object to Update.</param>
            <remarks>After Updateing into the datasource, the Rules object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Rules entity = RulesService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	RulesService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.RulesServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.Rules})">
             <summary>
             public virtual method that Updates rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>Rules</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Rules</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Rules.
             <code><![CDATA[
             TList<Rules> list = new TList<Rules>();
             Rules entity = new Rules();
             entity.StringProperty = "foo";
             Rules entity2 = new Rules();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	RulesService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.RulesServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.Rules)">
            <summary>
            public virtual method that Deletes a Rules object into the datasource using a transaction.
            </summary>
            <param name="entity">Rules object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Rules object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Rules entity = RulesService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	RulesService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.RulesServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.Rules})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>Rules</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Rules</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Rules.
             <code><![CDATA[
             TList<Rules> list = new TList<Rules>();
             Rules entity = new Rules();
             entity.StringProperty = "foo";
             Rules entity2 = new Rules();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	RulesService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.RulesServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.RulesKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.RulesServiceBase.Delete(System.Decimal)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Decimal _rulesRefno
            </summary>
            <param name="_rulesRefno">Rules pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.ProfCarerEpisodesService">
            <summary>
            An component type implementation of the 'PROF_CARER_EPISODES' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerEpisodesService.#ctor">
            <summary>
            Initializes a new instance of the ProfCarerEpisodesService class.
            </summary>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.ProfCarerEpisodesServiceBase">
            <summary>
             An object representation of the 'PROF_CARER_EPISODES' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ProfCarerEpisodes.cs file instead.
             All custom implementations should be done in the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ProfCarerEpisodes"/> class.
             </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerEpisodesServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ProfCarerEpisodes"/> instance .
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerEpisodesServiceBase.CreateProfCarerEpisodes(System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Decimal,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.DateTime,System.Nullable{System.DateTime},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.DateTime,System.String,System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
            <summary>
             A simple factory method to create a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ProfCarerEpisodes"/> instance.
            </summary>
            <param name="_wlistRefno"></param>
            <param name="_sstayRefno"></param>
            <param name="_prvspRefno"></param>
            <param name="_sstaySpontRefno"></param>
            <param name="_provdRefno"></param>
            <param name="_spectRefno"></param>
            <param name="_purchRefno"></param>
            <param name="_sorrfRefno"></param>
            <param name="_episoRefno"></param>
            <param name="_inmgtRefno"></param>
            <param name="_adcatRefno"></param>
            <param name="_eptypRefno"></param>
            <param name="_menctRefno"></param>
            <param name="_contrRefno"></param>
            <param name="_attndRefno"></param>
            <param name="_patclRefno"></param>
            <param name="_ceocmRefno"></param>
            <param name="_inlocRefno"></param>
            <param name="_pagrpRefno"></param>
            <param name="_refrlRefno"></param>
            <param name="_legscRefno"></param>
            <param name="_procaRefno"></param>
            <param name="_patntRefno"></param>
            <param name="_paymtRefno"></param>
            <param name="_visitRefno"></param>
            <param name="_startDttm"></param>
            <param name="_endDttm"></param>
            <param name="_dnarsRefno"></param>
            <param name="_admetRefno"></param>
            <param name="_priorRefno"></param>
            <param name="_spxrlRefno"></param>
            <param name="_comments"></param>
            <param name="_archvFlag"></param>
            <param name="_identifier"></param>
            <param name="_stranRefno"></param>
            <param name="_priorPointer"></param>
            <param name="_externalKey"></param>
            <param name="_codingCompleteFlag"></param>
            <param name="_agebdRefno"></param>
            <param name="_mhcepRefno"></param>
            <param name="_hrgCode"></param>
            <param name="_ctrsvRefno"></param>
            <param name="_spontRefno"></param>
            <param name="_allcnOverrideFlag"></param>
            <param name="_summaryCompleteFlag"></param>
            <param name="_prvsnFlag"></param>
            <param name="_cccccRefno"></param>
            <param name="_admofRefno"></param>
            <param name="_rectrRefno"></param>
            <param name="_cstatRefno"></param>
            <param name="_codAuthFlag"></param>
            <param name="_codAuthDttm"></param>
            <param name="_codAuthUser"></param>
            <param name="_latchAuthFlag"></param>
            <param name="_invoiceTag"></param>
            <param name="_svcatRefno"></param>
            <param name="_ptclsRefno"></param>
            <param name="_ownerHeorgRefno"></param>
            <param name="_resetPtclsDays"></param>
            <param name="_priorPtclsDays"></param>
            <param name="_icuHours"></param>
            <param name="_ccuHours"></param>
            <param name="_mechVentHrs"></param>
            <param name="_palstRefno"></param>
            <param name="_dgproRefno"></param>
            <param name="_wiesCmxValue"></param>
            <param name="_ptclsManualFlag"></param>
            <param name="_sorceCode"></param>
            <param name="_sorceRefno"></param>
            <param name="_palcaDays"></param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.ProfCarerEpisodesServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerEpisodesServiceBase.GetByAdcatRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PRCAE_ADCAT key.
            	CNA_PRCAE_ADCAT Description: 
            </summary>
            <param name="_adcatRefno"></param>
            <returns>Returns a generic collection of ProfCarerEpisodes objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerEpisodesServiceBase.GetByAdcatRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PRCAE_ADCAT key.
            	CNA_PRCAE_ADCAT Description: 
            </summary>
            <param name="_adcatRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>ProfCarerEpisodes</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerEpisodesServiceBase.GetByAdmetRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PRCAE_ADMET key.
            	CNA_PRCAE_ADMET Description: 
            </summary>
            <param name="_admetRefno"></param>
            <returns>Returns a generic collection of ProfCarerEpisodes objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerEpisodesServiceBase.GetByAdmetRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PRCAE_ADMET key.
            	CNA_PRCAE_ADMET Description: 
            </summary>
            <param name="_admetRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>ProfCarerEpisodes</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerEpisodesServiceBase.GetByAgebdRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PRCAE_AGEBD key.
            	CNA_PRCAE_AGEBD Description: 
            </summary>
            <param name="_agebdRefno"></param>
            <returns>Returns a generic collection of ProfCarerEpisodes objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerEpisodesServiceBase.GetByAgebdRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PRCAE_AGEBD key.
            	CNA_PRCAE_AGEBD Description: 
            </summary>
            <param name="_agebdRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>ProfCarerEpisodes</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerEpisodesServiceBase.GetByAttndRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PRCAE_ATTND key.
            	CNA_PRCAE_ATTND Description: 
            </summary>
            <param name="_attndRefno"></param>
            <returns>Returns a generic collection of ProfCarerEpisodes objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerEpisodesServiceBase.GetByAttndRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PRCAE_ATTND key.
            	CNA_PRCAE_ATTND Description: 
            </summary>
            <param name="_attndRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>ProfCarerEpisodes</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerEpisodesServiceBase.GetByCeocmRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PRCAE_CEOCM key.
            	CNA_PRCAE_CEOCM Description: 
            </summary>
            <param name="_ceocmRefno"></param>
            <returns>Returns a generic collection of ProfCarerEpisodes objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerEpisodesServiceBase.GetByCeocmRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PRCAE_CEOCM key.
            	CNA_PRCAE_CEOCM Description: 
            </summary>
            <param name="_ceocmRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>ProfCarerEpisodes</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerEpisodesServiceBase.GetByDnarsRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PRCAE_DNARS key.
            	CNA_PRCAE_DNARS Description: 
            </summary>
            <param name="_dnarsRefno"></param>
            <returns>Returns a generic collection of ProfCarerEpisodes objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerEpisodesServiceBase.GetByDnarsRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PRCAE_DNARS key.
            	CNA_PRCAE_DNARS Description: 
            </summary>
            <param name="_dnarsRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>ProfCarerEpisodes</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerEpisodesServiceBase.GetByEpisoRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PRCAE_EPISO key.
            	CNA_PRCAE_EPISO Description: 
            </summary>
            <param name="_episoRefno"></param>
            <returns>Returns a generic collection of ProfCarerEpisodes objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerEpisodesServiceBase.GetByEpisoRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PRCAE_EPISO key.
            	CNA_PRCAE_EPISO Description: 
            </summary>
            <param name="_episoRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>ProfCarerEpisodes</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerEpisodesServiceBase.GetByEptypRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PRCAE_EPTYP key.
            	CNA_PRCAE_EPTYP Description: 
            </summary>
            <param name="_eptypRefno"></param>
            <returns>Returns a generic collection of ProfCarerEpisodes objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerEpisodesServiceBase.GetByEptypRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PRCAE_EPTYP key.
            	CNA_PRCAE_EPTYP Description: 
            </summary>
            <param name="_eptypRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>ProfCarerEpisodes</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerEpisodesServiceBase.GetByInlocRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PRCAE_INLOC key.
            	CNA_PRCAE_INLOC Description: 
            </summary>
            <param name="_inlocRefno"></param>
            <returns>Returns a generic collection of ProfCarerEpisodes objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerEpisodesServiceBase.GetByInlocRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PRCAE_INLOC key.
            	CNA_PRCAE_INLOC Description: 
            </summary>
            <param name="_inlocRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>ProfCarerEpisodes</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerEpisodesServiceBase.GetByInmgtRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PRCAE_INMGT key.
            	CNA_PRCAE_INMGT Description: 
            </summary>
            <param name="_inmgtRefno"></param>
            <returns>Returns a generic collection of ProfCarerEpisodes objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerEpisodesServiceBase.GetByInmgtRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PRCAE_INMGT key.
            	CNA_PRCAE_INMGT Description: 
            </summary>
            <param name="_inmgtRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>ProfCarerEpisodes</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerEpisodesServiceBase.GetByLegscRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PRCAE_LEGSC key.
            	CNA_PRCAE_LEGSC Description: 
            </summary>
            <param name="_legscRefno"></param>
            <returns>Returns a generic collection of ProfCarerEpisodes objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerEpisodesServiceBase.GetByLegscRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PRCAE_LEGSC key.
            	CNA_PRCAE_LEGSC Description: 
            </summary>
            <param name="_legscRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>ProfCarerEpisodes</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerEpisodesServiceBase.GetByMenctRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PRCAE_MENCT key.
            	CNA_PRCAE_MENCT Description: 
            </summary>
            <param name="_menctRefno"></param>
            <returns>Returns a generic collection of ProfCarerEpisodes objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerEpisodesServiceBase.GetByMenctRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PRCAE_MENCT key.
            	CNA_PRCAE_MENCT Description: 
            </summary>
            <param name="_menctRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>ProfCarerEpisodes</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerEpisodesServiceBase.GetByPagrpRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PRCAE_PAGRP key.
            	CNA_PRCAE_PAGRP Description: 
            </summary>
            <param name="_pagrpRefno"></param>
            <returns>Returns a generic collection of ProfCarerEpisodes objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerEpisodesServiceBase.GetByPagrpRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PRCAE_PAGRP key.
            	CNA_PRCAE_PAGRP Description: 
            </summary>
            <param name="_pagrpRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>ProfCarerEpisodes</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerEpisodesServiceBase.GetByPatclRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PRCAE_PATCL key.
            	CNA_PRCAE_PATCL Description: 
            </summary>
            <param name="_patclRefno"></param>
            <returns>Returns a generic collection of ProfCarerEpisodes objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerEpisodesServiceBase.GetByPatclRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PRCAE_PATCL key.
            	CNA_PRCAE_PATCL Description: 
            </summary>
            <param name="_patclRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>ProfCarerEpisodes</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerEpisodesServiceBase.GetByPaymtRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PRCAE_PAYMT key.
            	CNA_PRCAE_PAYMT Description: 
            </summary>
            <param name="_paymtRefno"></param>
            <returns>Returns a generic collection of ProfCarerEpisodes objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerEpisodesServiceBase.GetByPaymtRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PRCAE_PAYMT key.
            	CNA_PRCAE_PAYMT Description: 
            </summary>
            <param name="_paymtRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>ProfCarerEpisodes</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerEpisodesServiceBase.GetByRectrRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PRCAE_RECTR key.
            	CNA_PRCAE_RECTR Description: 
            </summary>
            <param name="_rectrRefno"></param>
            <returns>Returns a generic collection of ProfCarerEpisodes objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerEpisodesServiceBase.GetByRectrRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PRCAE_RECTR key.
            	CNA_PRCAE_RECTR Description: 
            </summary>
            <param name="_rectrRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>ProfCarerEpisodes</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerEpisodesServiceBase.GetBySorrfRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PRCAE_SORRF key.
            	CNA_PRCAE_SORRF Description: 
            </summary>
            <param name="_sorrfRefno"></param>
            <returns>Returns a generic collection of ProfCarerEpisodes objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerEpisodesServiceBase.GetBySorrfRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PRCAE_SORRF key.
            	CNA_PRCAE_SORRF Description: 
            </summary>
            <param name="_sorrfRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>ProfCarerEpisodes</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerEpisodesServiceBase.GetBySpxrlRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PRCAE_SPXRL key.
            	CNA_PRCAE_SPXRL Description: 
            </summary>
            <param name="_spxrlRefno"></param>
            <returns>Returns a generic collection of ProfCarerEpisodes objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerEpisodesServiceBase.GetBySpxrlRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PRCAE_SPXRL key.
            	CNA_PRCAE_SPXRL Description: 
            </summary>
            <param name="_spxrlRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>ProfCarerEpisodes</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerEpisodesServiceBase.GetByVisitRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PRCAE_VISIT key.
            	CNA_PRCAE_VISIT Description: 
            </summary>
            <param name="_visitRefno"></param>
            <returns>Returns a generic collection of ProfCarerEpisodes objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerEpisodesServiceBase.GetByVisitRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PRCAE_VISIT key.
            	CNA_PRCAE_VISIT Description: 
            </summary>
            <param name="_visitRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>ProfCarerEpisodes</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerEpisodesServiceBase.Get(iSOFT.ANZ.PatientManagerService.Entities.ProfCarerEpisodesKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerEpisodesServiceBase.GetByProvdRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PRCAE_PROVD index.
            </summary>
            <param name="_provdRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerEpisodesServiceBase.GetByProvdRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PRCAE_PROVD index.
            </summary>
            <param name="_provdRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerEpisodesServiceBase.GetByCtrsvRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PRCAE_CTRSV index.
            </summary>
            <param name="_ctrsvRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerEpisodesServiceBase.GetByCtrsvRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PRCAE_CTRSV index.
            </summary>
            <param name="_ctrsvRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerEpisodesServiceBase.GetByPatntRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PRCAE_PATNT index.
            </summary>
            <param name="_patntRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerEpisodesServiceBase.GetByPatntRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PRCAE_PATNT index.
            </summary>
            <param name="_patntRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerEpisodesServiceBase.GetByWlistRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PRCAE_WLIST index.
            </summary>
            <param name="_wlistRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerEpisodesServiceBase.GetByWlistRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PRCAE_WLIST index.
            </summary>
            <param name="_wlistRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerEpisodesServiceBase.GetBySstayRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PRCAE_SSTAY index.
            </summary>
            <param name="_sstayRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerEpisodesServiceBase.GetBySstayRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PRCAE_SSTAY index.
            </summary>
            <param name="_sstayRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerEpisodesServiceBase.GetBySstaySpontRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PRCAE_SSTAY_SPONT index.
            </summary>
            <param name="_sstaySpontRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerEpisodesServiceBase.GetBySstaySpontRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PRCAE_SSTAY_SPONT index.
            </summary>
            <param name="_sstaySpontRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerEpisodesServiceBase.GetByPurchRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PRCAE_PURCH index.
            </summary>
            <param name="_purchRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerEpisodesServiceBase.GetByPurchRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PRCAE_PURCH index.
            </summary>
            <param name="_purchRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerEpisodesServiceBase.GetByContrRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PRCAE_CONTR index.
            </summary>
            <param name="_contrRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerEpisodesServiceBase.GetByContrRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PRCAE_CONTR index.
            </summary>
            <param name="_contrRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerEpisodesServiceBase.GetBySpontRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PRCAE_SPONT index.
            </summary>
            <param name="_spontRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerEpisodesServiceBase.GetBySpontRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PRCAE_SPONT index.
            </summary>
            <param name="_spontRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerEpisodesServiceBase.GetByCccccRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PRCAE_CCCCC index.
            </summary>
            <param name="_cccccRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerEpisodesServiceBase.GetByCccccRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PRCAE_CCCCC index.
            </summary>
            <param name="_cccccRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerEpisodesServiceBase.GetByMhcepRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PRCAE_MHCEP index.
            </summary>
            <param name="_mhcepRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerEpisodesServiceBase.GetByMhcepRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PRCAE_MHCEP index.
            </summary>
            <param name="_mhcepRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerEpisodesServiceBase.GetByPrvspRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PRCAE_PRVSP index.
            </summary>
            <param name="_prvspRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerEpisodesServiceBase.GetByPrvspRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PRCAE_PRVSP index.
            </summary>
            <param name="_prvspRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerEpisodesServiceBase.GetByPriorRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PRCAE_PRIOR index.
            </summary>
            <param name="_priorRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerEpisodesServiceBase.GetByPriorRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PRCAE_PRIOR index.
            </summary>
            <param name="_priorRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerEpisodesServiceBase.GetByRefrlRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PRCAE_REFRL index.
            </summary>
            <param name="_refrlRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerEpisodesServiceBase.GetByRefrlRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PRCAE_REFRL index.
            </summary>
            <param name="_refrlRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerEpisodesServiceBase.GetBySpectRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PRCAE_SPECT index.
            </summary>
            <param name="_spectRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerEpisodesServiceBase.GetBySpectRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PRCAE_SPECT index.
            </summary>
            <param name="_spectRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerEpisodesServiceBase.GetByProcaRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PRCAE_PROCA index.
            </summary>
            <param name="_procaRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerEpisodesServiceBase.GetByProcaRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PRCAE_PROCA index.
            </summary>
            <param name="_procaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerEpisodesServiceBase.GetByAdmofRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PRCAE_ADMOF index.
            </summary>
            <param name="_admofRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerEpisodesServiceBase.GetByAdmofRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PRCAE_ADMOF index.
            </summary>
            <param name="_admofRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerEpisodesServiceBase.GetByPriorPointer(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PRCAE_PRIOR_POINTER index.
            </summary>
            <param name="_priorPointer"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerEpisodesServiceBase.GetByPriorPointer(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PRCAE_PRIOR_POINTER index.
            </summary>
            <param name="_priorPointer"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerEpisodesServiceBase.GetByPrvsnFlag(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_PRCAE_PRVSN index.
            </summary>
            <param name="_prvsnFlag"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerEpisodesServiceBase.GetByPrvsnFlag(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_PRCAE_PRVSN index.
            </summary>
            <param name="_prvsnFlag"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerEpisodesServiceBase.GetByPrcaeRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_PROF_CARER_EPISODES index.
            </summary>
            <param name="_prcaeRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ProfCarerEpisodes"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerEpisodesServiceBase.GetByPrcaeRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_PROF_CARER_EPISODES index.
            </summary>
            <param name="_prcaeRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ProfCarerEpisodes"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerEpisodesServiceBase.GetByCstatRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_CSTAT_REFNO index.
            </summary>
            <param name="_cstatRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerEpisodesServiceBase.GetByCstatRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_CSTAT_REFNO index.
            </summary>
            <param name="_cstatRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerEpisodesServiceBase.GetByAdmofRefnoArchvFlag(System.Nullable{System.Decimal},System.String)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_PRCAE_ADMOF_ARCHV index.
            </summary>
            <param name="_admofRefno"></param>
            <param name="_archvFlag"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerEpisodesServiceBase.GetByAdmofRefnoArchvFlag(System.Nullable{System.Decimal},System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_PRCAE_ADMOF_ARCHV index.
            </summary>
            <param name="_admofRefno"></param>
            <param name="_archvFlag"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerEpisodesServiceBase.GetByIdentifier(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_PRCAE_IDENTIFIER index.
            </summary>
            <param name="_identifier"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerEpisodesServiceBase.GetByIdentifier(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_PRCAE_IDENTIFIER index.
            </summary>
            <param name="_identifier"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerEpisodesServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ProfCarerEpisodes" /> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerEpisodesServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ProfCarerEpisodes" /> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> </returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerEpisodesServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ProfCarerEpisodes</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerEpisodesServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ProfCarerEpisodes</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerEpisodesServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ProfCarerEpisodes</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerEpisodesServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerEpisodesServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.ProfCarerEpisodes)">
            <summary>
            public virtual method that Inserts a ProfCarerEpisodes object into the datasource using a transaction.
            </summary>
            <param name="entity">ProfCarerEpisodes object to Insert.</param>
            <remarks>After Inserting into the datasource, the ProfCarerEpisodes object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            ProfCarerEpisodes entity = new ProfCarerEpisodes();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ProfCarerEpisodesService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerEpisodesServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.ProfCarerEpisodes})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProfCarerEpisodes</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>ProfCarerEpisodes</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of ProfCarerEpisodes.
             <code><![CDATA[
             TList<ProfCarerEpisodes> list = new TList<ProfCarerEpisodes>();
             ProfCarerEpisodes entity = new ProfCarerEpisodes();
             entity.StringProperty = "foo";
             ProfCarerEpisodes entity2 = new ProfCarerEpisodes();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProfCarerEpisodesService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerEpisodesServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.ProfCarerEpisodes)">
            <summary>
            public virtual method that Updates a ProfCarerEpisodes object into the datasource using a transaction.
            </summary>
            <param name="entity">ProfCarerEpisodes object to Update.</param>
            <remarks>After Updateing into the datasource, the ProfCarerEpisodes object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            ProfCarerEpisodes entity = ProfCarerEpisodesService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ProfCarerEpisodesService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerEpisodesServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.ProfCarerEpisodes})">
             <summary>
             public virtual method that Updates rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProfCarerEpisodes</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>ProfCarerEpisodes</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of ProfCarerEpisodes.
             <code><![CDATA[
             TList<ProfCarerEpisodes> list = new TList<ProfCarerEpisodes>();
             ProfCarerEpisodes entity = new ProfCarerEpisodes();
             entity.StringProperty = "foo";
             ProfCarerEpisodes entity2 = new ProfCarerEpisodes();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProfCarerEpisodesService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerEpisodesServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.ProfCarerEpisodes)">
            <summary>
            public virtual method that Deletes a ProfCarerEpisodes object into the datasource using a transaction.
            </summary>
            <param name="entity">ProfCarerEpisodes object to Delete.</param>
            <remarks>After Deleteing into the datasource, the ProfCarerEpisodes object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            ProfCarerEpisodes entity = ProfCarerEpisodesService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ProfCarerEpisodesService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerEpisodesServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.ProfCarerEpisodes})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProfCarerEpisodes</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>ProfCarerEpisodes</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of ProfCarerEpisodes.
             <code><![CDATA[
             TList<ProfCarerEpisodes> list = new TList<ProfCarerEpisodes>();
             ProfCarerEpisodes entity = new ProfCarerEpisodes();
             entity.StringProperty = "foo";
             ProfCarerEpisodes entity2 = new ProfCarerEpisodes();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProfCarerEpisodesService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerEpisodesServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.ProfCarerEpisodesKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerEpisodesServiceBase.Delete(System.Decimal)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Decimal _prcaeRefno
            </summary>
            <param name="_prcaeRefno">ProfCarerEpisodes pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.ServicePointProfilesService">
            <summary>
            An component type implementation of the 'SERVICE_POINT_PROFILES' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointProfilesService.#ctor">
            <summary>
            Initializes a new instance of the ServicePointProfilesService class.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointProfilesService.GetBySpbedRefnoAfterDttm(System.Decimal,System.DateTime,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key HSS_BEDST_START index.
            </summary>
            <param name="_startDttm"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.ServicePointProfilesServiceBase">
            <summary>
             An object representation of the 'SERVICE_POINT_PROFILES' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ServicePointProfiles.cs file instead.
             All custom implementations should be done in the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ServicePointProfiles"/> class.
             </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointProfilesServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ServicePointProfiles"/> instance .
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointProfilesServiceBase.CreateServicePointProfiles(System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.String,System.DateTime,System.Nullable{System.DateTime},System.String,System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.DateTime},System.Nullable{System.Decimal})">
            <summary>
             A simple factory method to create a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ServicePointProfiles"/> instance.
            </summary>
            <param name="_spontRefno"></param>
            <param name="_spbayRefno"></param>
            <param name="_spbedRefno"></param>
            <param name="_spectRefno"></param>
            <param name="_procaRefno"></param>
            <param name="_bedssRefno"></param>
            <param name="_rfvalRefno"></param>
            <param name="_rulesRefno"></param>
            <param name="_safeNameOperator"></param>
            <param name="_value"></param>
            <param name="_startDttm"></param>
            <param name="_endDttm"></param>
            <param name="_archvFlag"></param>
            <param name="_stranRefno"></param>
            <param name="_externalKey"></param>
            <param name="_spchrRefno"></param>
            <param name="_wdproRefno"></param>
            <param name="_bdcatRefno"></param>
            <param name="_plannedDttm"></param>
            <param name="_ownerHeorgRefno"></param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.ServicePointProfilesServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointProfilesServiceBase.Get(iSOFT.ANZ.PatientManagerService.Entities.ServicePointProfilesKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointProfilesServiceBase.GetByRulesRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SPPRO_RULES index.
            </summary>
            <param name="_rulesRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointProfilesServiceBase.GetByRulesRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SPPRO_RULES index.
            </summary>
            <param name="_rulesRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointProfilesServiceBase.GetBySpontRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SPPRO_SPONT index.
            </summary>
            <param name="_spontRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointProfilesServiceBase.GetBySpontRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SPPRO_SPONT index.
            </summary>
            <param name="_spontRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointProfilesServiceBase.GetBySpectRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SPPRO_SPECT index.
            </summary>
            <param name="_spectRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointProfilesServiceBase.GetBySpectRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SPPRO_SPECT index.
            </summary>
            <param name="_spectRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointProfilesServiceBase.GetByProcaRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SPPRO_PROCA index.
            </summary>
            <param name="_procaRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointProfilesServiceBase.GetByProcaRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SPPRO_PROCA index.
            </summary>
            <param name="_procaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointProfilesServiceBase.GetByRfvalRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SPPRO_RFVAL index.
            </summary>
            <param name="_rfvalRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointProfilesServiceBase.GetByRfvalRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SPPRO_RFVAL index.
            </summary>
            <param name="_rfvalRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointProfilesServiceBase.GetByWdproRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SPPRO_WDPRO index.
            </summary>
            <param name="_wdproRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointProfilesServiceBase.GetByWdproRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SPPRO_WDPRO index.
            </summary>
            <param name="_wdproRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointProfilesServiceBase.GetBySpbedRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SPPRO_SPBED index.
            </summary>
            <param name="_spbedRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointProfilesServiceBase.GetBySpbedRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SPPRO_SPBED index.
            </summary>
            <param name="_spbedRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointProfilesServiceBase.GetByBedssRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SPPRO_BEDSS index.
            </summary>
            <param name="_bedssRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointProfilesServiceBase.GetByBedssRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SPPRO_BEDSS index.
            </summary>
            <param name="_bedssRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointProfilesServiceBase.GetBySpproRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_SERVICE_POINT_PROFILES index.
            </summary>
            <param name="_spproRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ServicePointProfiles"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointProfilesServiceBase.GetBySpproRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_SERVICE_POINT_PROFILES index.
            </summary>
            <param name="_spproRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ServicePointProfiles"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointProfilesServiceBase.GetBySpbayRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SPPRO_SPBAY index.
            </summary>
            <param name="_spbayRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointProfilesServiceBase.GetBySpbayRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SPPRO_SPBAY index.
            </summary>
            <param name="_spbayRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointProfilesServiceBase.GetByArchvFlag(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key SAH_SPONT_PROFILES_ARCHV index.
            </summary>
            <param name="_archvFlag"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointProfilesServiceBase.GetByArchvFlag(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key SAH_SPONT_PROFILES_ARCHV index.
            </summary>
            <param name="_archvFlag"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointProfilesServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ServicePointProfiles" /> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointProfilesServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ServicePointProfiles" /> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> </returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointProfilesServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ServicePointProfiles</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointProfilesServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ServicePointProfiles</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointProfilesServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ServicePointProfiles</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointProfilesServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointProfilesServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.ServicePointProfiles)">
            <summary>
            public virtual method that Inserts a ServicePointProfiles object into the datasource using a transaction.
            </summary>
            <param name="entity">ServicePointProfiles object to Insert.</param>
            <remarks>After Inserting into the datasource, the ServicePointProfiles object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            ServicePointProfiles entity = new ServicePointProfiles();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ServicePointProfilesService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointProfilesServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.ServicePointProfiles})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>ServicePointProfiles</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>ServicePointProfiles</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of ServicePointProfiles.
             <code><![CDATA[
             TList<ServicePointProfiles> list = new TList<ServicePointProfiles>();
             ServicePointProfiles entity = new ServicePointProfiles();
             entity.StringProperty = "foo";
             ServicePointProfiles entity2 = new ServicePointProfiles();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ServicePointProfilesService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointProfilesServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.ServicePointProfiles)">
            <summary>
            public virtual method that Updates a ServicePointProfiles object into the datasource using a transaction.
            </summary>
            <param name="entity">ServicePointProfiles object to Update.</param>
            <remarks>After Updateing into the datasource, the ServicePointProfiles object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            ServicePointProfiles entity = ServicePointProfilesService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ServicePointProfilesService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointProfilesServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.ServicePointProfiles})">
             <summary>
             public virtual method that Updates rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>ServicePointProfiles</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>ServicePointProfiles</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of ServicePointProfiles.
             <code><![CDATA[
             TList<ServicePointProfiles> list = new TList<ServicePointProfiles>();
             ServicePointProfiles entity = new ServicePointProfiles();
             entity.StringProperty = "foo";
             ServicePointProfiles entity2 = new ServicePointProfiles();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ServicePointProfilesService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointProfilesServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.ServicePointProfiles)">
            <summary>
            public virtual method that Deletes a ServicePointProfiles object into the datasource using a transaction.
            </summary>
            <param name="entity">ServicePointProfiles object to Delete.</param>
            <remarks>After Deleteing into the datasource, the ServicePointProfiles object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            ServicePointProfiles entity = ServicePointProfilesService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ServicePointProfilesService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointProfilesServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.ServicePointProfiles})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>ServicePointProfiles</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>ServicePointProfiles</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of ServicePointProfiles.
             <code><![CDATA[
             TList<ServicePointProfiles> list = new TList<ServicePointProfiles>();
             ServicePointProfiles entity = new ServicePointProfiles();
             entity.StringProperty = "foo";
             ServicePointProfiles entity2 = new ServicePointProfiles();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ServicePointProfilesService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointProfilesServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.ServicePointProfilesKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointProfilesServiceBase.Delete(System.Decimal)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Decimal _spproRefno
            </summary>
            <param name="_spproRefno">ServicePointProfiles pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.UserRolesService">
            <summary>
            An component type implementation of the 'USER_ROLES' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.UserRolesService.#ctor">
            <summary>
            Initializes a new instance of the UserRolesService class.
            </summary>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.UserRolesServiceBase">
            <summary>
             An object representation of the 'USER_ROLES' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the UserRoles.cs file instead.
             All custom implementations should be done in the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.UserRoles"/> class.
             </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.UserRolesServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.UserRoles"/> instance .
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.UserRolesServiceBase.CreateUserRoles(System.Decimal,System.Decimal,System.DateTime,System.Nullable{System.DateTime},System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.UserRoles"/> instance.
            </summary>
            <param name="_aprolRefno"></param>
            <param name="_usersRefno"></param>
            <param name="_startDttm"></param>
            <param name="_endDttm"></param>
            <param name="_archvFlag"></param>
            <param name="_stranRefno"></param>
            <param name="_ownerHeorgRefno"></param>
            <param name="_externalKey"></param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.UserRolesServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.UserRolesServiceBase.Get(iSOFT.ANZ.PatientManagerService.Entities.UserRolesKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.UserRolesServiceBase.GetByUsersRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_USROL_USERS index.
            </summary>
            <param name="_usersRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.UserRolesServiceBase.GetByUsersRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_USROL_USERS index.
            </summary>
            <param name="_usersRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.UserRolesServiceBase.GetByAprolRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_USROL_APROL index.
            </summary>
            <param name="_aprolRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.UserRolesServiceBase.GetByAprolRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_USROL_APROL index.
            </summary>
            <param name="_aprolRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.UserRolesServiceBase.GetByUsrolRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_USER_ROLES index.
            </summary>
            <param name="_usrolRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.UserRoles"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.UserRolesServiceBase.GetByUsrolRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_USER_ROLES index.
            </summary>
            <param name="_usrolRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.UserRoles"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.UserRolesServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.UserRoles" /> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.UserRolesServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.UserRoles" /> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> </returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.UserRolesServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>UserRoles</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.UserRolesServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>UserRoles</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.UserRolesServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>UserRoles</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.UserRolesServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.UserRolesServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.UserRoles)">
            <summary>
            public virtual method that Inserts a UserRoles object into the datasource using a transaction.
            </summary>
            <param name="entity">UserRoles object to Insert.</param>
            <remarks>After Inserting into the datasource, the UserRoles object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            UserRoles entity = new UserRoles();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	UserRolesService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.UserRolesServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.UserRoles})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>UserRoles</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>UserRoles</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of UserRoles.
             <code><![CDATA[
             TList<UserRoles> list = new TList<UserRoles>();
             UserRoles entity = new UserRoles();
             entity.StringProperty = "foo";
             UserRoles entity2 = new UserRoles();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	UserRolesService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.UserRolesServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.UserRoles)">
            <summary>
            public virtual method that Updates a UserRoles object into the datasource using a transaction.
            </summary>
            <param name="entity">UserRoles object to Update.</param>
            <remarks>After Updateing into the datasource, the UserRoles object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            UserRoles entity = UserRolesService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	UserRolesService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.UserRolesServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.UserRoles})">
             <summary>
             public virtual method that Updates rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>UserRoles</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>UserRoles</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of UserRoles.
             <code><![CDATA[
             TList<UserRoles> list = new TList<UserRoles>();
             UserRoles entity = new UserRoles();
             entity.StringProperty = "foo";
             UserRoles entity2 = new UserRoles();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	UserRolesService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.UserRolesServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.UserRoles)">
            <summary>
            public virtual method that Deletes a UserRoles object into the datasource using a transaction.
            </summary>
            <param name="entity">UserRoles object to Delete.</param>
            <remarks>After Deleteing into the datasource, the UserRoles object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            UserRoles entity = UserRolesService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	UserRolesService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.UserRolesServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.UserRoles})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>UserRoles</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>UserRoles</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of UserRoles.
             <code><![CDATA[
             TList<UserRoles> list = new TList<UserRoles>();
             UserRoles entity = new UserRoles();
             entity.StringProperty = "foo";
             UserRoles entity2 = new UserRoles();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	UserRolesService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.UserRolesServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.UserRolesKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.UserRolesServiceBase.Delete(System.Decimal)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Decimal _usrolRefno
            </summary>
            <param name="_usrolRefno">UserRoles pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsService">
            <summary>
            An component type implementation of the 'PROVIDER_SPELLS' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsService.#ctor">
            <summary>
            Initializes a new instance of the ProviderSpellsService class.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsService.GetProvisionalBetween(System.DateTime,System.DateTime)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the Prvsn_Start_flag and Admit_dttm.
            </summary>
            <param name="_admitDttm"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsService.GetProvisionalDischargesBeforeDttm(System.DateTime)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the Prvsn_Start_flag and Admit_dttm.
            </summary>
            <param name="_admitDttm"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsService.GetProvisionalDischargesBeforeDttm(System.DateTime,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the Prvsn_Start_flag and Admit_dttm..
            </summary>
            <param name="_admitDttm"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsService.GetEpisodeEventsInTimePeriod(System.Decimal,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.DateTime,System.DateTime,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key HSS_BEDST_START index.
            </summary>
            <param name="_startDttm"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsServiceBase">
            <summary>
             An object representation of the 'PROVIDER_SPELLS' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ProviderSpells.cs file instead.
             All custom implementations should be done in the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ProviderSpells"/> class.
             </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ProviderSpells"/> instance .
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsServiceBase.CreateProviderSpells(System.Decimal,System.Decimal,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Decimal,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Decimal,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.DateTime,System.Nullable{System.DateTime},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{System.DateTime},System.String,System.String,System.String,System.Nullable{System.Decimal},System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.String,System.Nullable{System.Decimal},System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.DateTime},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.DateTime},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.DateTime},System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.DateTime},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.String,System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
            <summary>
             A simple factory method to create a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ProviderSpells"/> instance.
            </summary>
            <param name="_spectRefno"></param>
            <param name="_spontRefno"></param>
            <param name="_admetRefno"></param>
            <param name="_adsorRefno"></param>
            <param name="_patclRefno"></param>
            <param name="_readmRefno"></param>
            <param name="_clevlRefno"></param>
            <param name="_procaRefno"></param>
            <param name="_disdeRefno"></param>
            <param name="_adcatRefno"></param>
            <param name="_dismtRefno"></param>
            <param name="_patntRefno"></param>
            <param name="_spellRefno"></param>
            <param name="_refpaRefno"></param>
            <param name="_folupRefno"></param>
            <param name="_dischRefno"></param>
            <param name="_admitDttm"></param>
            <param name="_dischDttm"></param>
            <param name="_provdRefno"></param>
            <param name="_purchRefno"></param>
            <param name="_respHeorgRefno"></param>
            <param name="_refrlRefno"></param>
            <param name="_notadRefno"></param>
            <param name="_firstRegular"></param>
            <param name="_inmgtRefno"></param>
            <param name="_expdsDttm"></param>
            <param name="_disabled"></param>
            <param name="_confidential"></param>
            <param name="_silntRefrl"></param>
            <param name="_priorRefno"></param>
            <param name="_archvFlag"></param>
            <param name="_identifier"></param>
            <param name="_stranRefno"></param>
            <param name="_priorPointer"></param>
            <param name="_admdcRefno"></param>
            <param name="_admofRefno"></param>
            <param name="_dtaDttm"></param>
            <param name="_wlistDttm"></param>
            <param name="_fastTrack"></param>
            <param name="_contrRefno"></param>
            <param name="_externalKey"></param>
            <param name="_agebdRefno"></param>
            <param name="_arcarHeorgRefno"></param>
            <param name="_dicarHeorgRefno"></param>
            <param name="_arrivTransRefno"></param>
            <param name="_deprtTransRefno"></param>
            <param name="_pacacRefno"></param>
            <param name="_matspRefno"></param>
            <param name="_admitMenctRefno"></param>
            <param name="_admitLegscRefno"></param>
            <param name="_dischMenctRefno"></param>
            <param name="_dischLegscRefno"></param>
            <param name="_mhcepRefno"></param>
            <param name="_lastPrcaeIdentifier"></param>
            <param name="_noFundsFlag"></param>
            <param name="_cccccRefno"></param>
            <param name="_prvsnStartFlag"></param>
            <param name="_prvsnEndFlag"></param>
            <param name="_cntctProcaRefno"></param>
            <param name="_aeattRefno"></param>
            <param name="_exmctRefno"></param>
            <param name="_exmreRefno"></param>
            <param name="_pmetdRefno"></param>
            <param name="_medDischDttm"></param>
            <param name="_rfecoRefno"></param>
            <param name="_pmortRefno"></param>
            <param name="_dsinfRefno"></param>
            <param name="_idpapRefno"></param>
            <param name="_dsinfText"></param>
            <param name="_readdRefno"></param>
            <param name="_depositAmount"></param>
            <param name="_nilbymouthDttm"></param>
            <param name="_thvisitYnunkRefno"></param>
            <param name="_adtacRefno"></param>
            <param name="_finspRefno"></param>
            <param name="_empstRefno"></param>
            <param name="_penstRefno"></param>
            <param name="_firstPsychDttm"></param>
            <param name="_prevPsychDttm"></param>
            <param name="_consentFlag"></param>
            <param name="_gpAdviseFlag"></param>
            <param name="_formRefNo"></param>
            <param name="_admissionWeight"></param>
            <param name="_icuHours"></param>
            <param name="_ccuHours"></param>
            <param name="_iradmRefno"></param>
            <param name="_admitAdtpsRefno"></param>
            <param name="_admitSvcatRefno"></param>
            <param name="_dischAdtpsRefno"></param>
            <param name="_dischSvcatRefno"></param>
            <param name="_mechVentHrs"></param>
            <param name="_ambulanceNumber"></param>
            <param name="_priorDays"></param>
            <param name="_relatedAdmission"></param>
            <param name="_admitPtclsRefno"></param>
            <param name="_asfsrRefno"></param>
            <param name="_hlinsRefno"></param>
            <param name="_iclstRefno"></param>
            <param name="_dlnkcRefno"></param>
            <param name="_caravRefno"></param>
            <param name="_rfrfcRefno"></param>
            <param name="_aclevRefno"></param>
            <param name="_admitBarthelScore"></param>
            <param name="_separBarthelScore"></param>
            <param name="_clnspRefno"></param>
            <param name="_onsetDate"></param>
            <param name="_readmRehabFlag"></param>
            <param name="_srtpcRefno"></param>
            <param name="_admitRugadlScore"></param>
            <param name="_separRugadlScore"></param>
            <param name="_icuTime"></param>
            <param name="_ccuTime"></param>
            <param name="_firstPallYnunkRefno"></param>
            <param name="_prevPallYnunkRefno"></param>
            <param name="_ownerHeorgRefno"></param>
            <param name="_noninvVentHrs"></param>
            <param name="_acastRefno"></param>
            <param name="_cfwdDays"></param>
            <param name="_accExpiryDttm"></param>
            <param name="_cntrlRefno"></param>
            <param name="_cnttpRefno"></param>
            <param name="_compsRefno"></param>
            <param name="_croepRefno"></param>
            <param name="_adtppRefno"></param>
            <param name="_adtppComment"></param>
            <param name="_applyVatToAll"></param>
            <param name="_harpFlag"></param>
            <param name="_rfrfcValue"></param>
            <param name="_rehabRefno"></param>
            <param name="_adpstRefno"></param>
            <param name="_pnascRefno"></param>
            <param name="_gestationPeriod"></param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsServiceBase.GetByAdcatRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PRVSP_ADCAT key.
            	CNA_PRVSP_ADCAT Description: 
            </summary>
            <param name="_adcatRefno"></param>
            <returns>Returns a generic collection of ProviderSpells objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsServiceBase.GetByAdcatRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PRVSP_ADCAT key.
            	CNA_PRVSP_ADCAT Description: 
            </summary>
            <param name="_adcatRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>ProviderSpells</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsServiceBase.GetByAdmitLegscRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PRVSP_ADMIT_LEGSC key.
            	CNA_PRVSP_ADMIT_LEGSC Description: 
            </summary>
            <param name="_admitLegscRefno"></param>
            <returns>Returns a generic collection of ProviderSpells objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsServiceBase.GetByAdmitLegscRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PRVSP_ADMIT_LEGSC key.
            	CNA_PRVSP_ADMIT_LEGSC Description: 
            </summary>
            <param name="_admitLegscRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>ProviderSpells</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsServiceBase.GetByAdmitMenctRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PRVSP_ADMIT_MENCT key.
            	CNA_PRVSP_ADMIT_MENCT Description: 
            </summary>
            <param name="_admitMenctRefno"></param>
            <returns>Returns a generic collection of ProviderSpells objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsServiceBase.GetByAdmitMenctRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PRVSP_ADMIT_MENCT key.
            	CNA_PRVSP_ADMIT_MENCT Description: 
            </summary>
            <param name="_admitMenctRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>ProviderSpells</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsServiceBase.GetByAdsorRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PRVSP_ADSOR key.
            	CNA_PRVSP_ADSOR Description: 
            </summary>
            <param name="_adsorRefno"></param>
            <returns>Returns a generic collection of ProviderSpells objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsServiceBase.GetByAdsorRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PRVSP_ADSOR key.
            	CNA_PRVSP_ADSOR Description: 
            </summary>
            <param name="_adsorRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>ProviderSpells</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsServiceBase.GetByAgebdRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PRVSP_AGEBD key.
            	CNA_PRVSP_AGEBD Description: 
            </summary>
            <param name="_agebdRefno"></param>
            <returns>Returns a generic collection of ProviderSpells objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsServiceBase.GetByAgebdRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PRVSP_AGEBD key.
            	CNA_PRVSP_AGEBD Description: 
            </summary>
            <param name="_agebdRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>ProviderSpells</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsServiceBase.GetByArrivTransRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PRVSP_ARRIV_TRANS key.
            	CNA_PRVSP_ARRIV_TRANS Description: 
            </summary>
            <param name="_arrivTransRefno"></param>
            <returns>Returns a generic collection of ProviderSpells objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsServiceBase.GetByArrivTransRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PRVSP_ARRIV_TRANS key.
            	CNA_PRVSP_ARRIV_TRANS Description: 
            </summary>
            <param name="_arrivTransRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>ProviderSpells</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsServiceBase.GetByClevlRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PRVSP_CLEVL key.
            	CNA_PRVSP_CLEVL Description: 
            </summary>
            <param name="_clevlRefno"></param>
            <returns>Returns a generic collection of ProviderSpells objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsServiceBase.GetByClevlRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PRVSP_CLEVL key.
            	CNA_PRVSP_CLEVL Description: 
            </summary>
            <param name="_clevlRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>ProviderSpells</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsServiceBase.GetByDeprtTransRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PRVSP_DEPRT_TRANS key.
            	CNA_PRVSP_DEPRT_TRANS Description: 
            </summary>
            <param name="_deprtTransRefno"></param>
            <returns>Returns a generic collection of ProviderSpells objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsServiceBase.GetByDeprtTransRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PRVSP_DEPRT_TRANS key.
            	CNA_PRVSP_DEPRT_TRANS Description: 
            </summary>
            <param name="_deprtTransRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>ProviderSpells</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsServiceBase.GetByDischRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PRVSP_DISCH key.
            	CNA_PRVSP_DISCH Description: 
            </summary>
            <param name="_dischRefno"></param>
            <returns>Returns a generic collection of ProviderSpells objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsServiceBase.GetByDischRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PRVSP_DISCH key.
            	CNA_PRVSP_DISCH Description: 
            </summary>
            <param name="_dischRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>ProviderSpells</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsServiceBase.GetByDischLegscRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PRVSP_DISCH_LEGSC key.
            	CNA_PRVSP_DISCH_LEGSC Description: 
            </summary>
            <param name="_dischLegscRefno"></param>
            <returns>Returns a generic collection of ProviderSpells objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsServiceBase.GetByDischLegscRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PRVSP_DISCH_LEGSC key.
            	CNA_PRVSP_DISCH_LEGSC Description: 
            </summary>
            <param name="_dischLegscRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>ProviderSpells</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsServiceBase.GetByDischMenctRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PRVSP_DISCH_MENCT key.
            	CNA_PRVSP_DISCH_MENCT Description: 
            </summary>
            <param name="_dischMenctRefno"></param>
            <returns>Returns a generic collection of ProviderSpells objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsServiceBase.GetByDischMenctRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PRVSP_DISCH_MENCT key.
            	CNA_PRVSP_DISCH_MENCT Description: 
            </summary>
            <param name="_dischMenctRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>ProviderSpells</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsServiceBase.GetByDisdeRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PRVSP_DISDE key.
            	CNA_PRVSP_DISDE Description: 
            </summary>
            <param name="_disdeRefno"></param>
            <returns>Returns a generic collection of ProviderSpells objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsServiceBase.GetByDisdeRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PRVSP_DISDE key.
            	CNA_PRVSP_DISDE Description: 
            </summary>
            <param name="_disdeRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>ProviderSpells</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsServiceBase.GetByDismtRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PRVSP_DISMT key.
            	CNA_PRVSP_DISMT Description: 
            </summary>
            <param name="_dismtRefno"></param>
            <returns>Returns a generic collection of ProviderSpells objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsServiceBase.GetByDismtRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PRVSP_DISMT key.
            	CNA_PRVSP_DISMT Description: 
            </summary>
            <param name="_dismtRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>ProviderSpells</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsServiceBase.GetByFolupRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PRVSP_FOLUP key.
            	CNA_PRVSP_FOLUP Description: 
            </summary>
            <param name="_folupRefno"></param>
            <returns>Returns a generic collection of ProviderSpells objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsServiceBase.GetByFolupRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PRVSP_FOLUP key.
            	CNA_PRVSP_FOLUP Description: 
            </summary>
            <param name="_folupRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>ProviderSpells</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsServiceBase.GetByInmgtRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PRVSP_INMGT key.
            	CNA_PRVSP_INMGT Description: 
            </summary>
            <param name="_inmgtRefno"></param>
            <returns>Returns a generic collection of ProviderSpells objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsServiceBase.GetByInmgtRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PRVSP_INMGT key.
            	CNA_PRVSP_INMGT Description: 
            </summary>
            <param name="_inmgtRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>ProviderSpells</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsServiceBase.GetByNotadRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PRVSP_NOTAD key.
            	CNA_PRVSP_NOTAD Description: 
            </summary>
            <param name="_notadRefno"></param>
            <returns>Returns a generic collection of ProviderSpells objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsServiceBase.GetByNotadRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PRVSP_NOTAD key.
            	CNA_PRVSP_NOTAD Description: 
            </summary>
            <param name="_notadRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>ProviderSpells</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsServiceBase.GetByPatclRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PRVSP_PATCL key.
            	CNA_PRVSP_PATCL Description: 
            </summary>
            <param name="_patclRefno"></param>
            <returns>Returns a generic collection of ProviderSpells objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsServiceBase.GetByPatclRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PRVSP_PATCL key.
            	CNA_PRVSP_PATCL Description: 
            </summary>
            <param name="_patclRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>ProviderSpells</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsServiceBase.GetByReadmRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PRVSP_READM key.
            	CNA_PRVSP_READM Description: 
            </summary>
            <param name="_readmRefno"></param>
            <returns>Returns a generic collection of ProviderSpells objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsServiceBase.GetByReadmRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PRVSP_READM key.
            	CNA_PRVSP_READM Description: 
            </summary>
            <param name="_readmRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>ProviderSpells</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsServiceBase.GetByRefpaRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PRVSP_REFPA key.
            	CNA_PRVSP_REFPA Description: 
            </summary>
            <param name="_refpaRefno"></param>
            <returns>Returns a generic collection of ProviderSpells objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsServiceBase.GetByRefpaRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PRVSP_REFPA key.
            	CNA_PRVSP_REFPA Description: 
            </summary>
            <param name="_refpaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>ProviderSpells</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsServiceBase.GetBySpellRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PRVSP_SPELL key.
            	CNA_PRVSP_SPELL Description: 
            </summary>
            <param name="_spellRefno"></param>
            <returns>Returns a generic collection of ProviderSpells objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsServiceBase.GetBySpellRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PRVSP_SPELL key.
            	CNA_PRVSP_SPELL Description: 
            </summary>
            <param name="_spellRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>ProviderSpells</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsServiceBase.Get(iSOFT.ANZ.PatientManagerService.Entities.ProviderSpellsKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsServiceBase.GetByProvdRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PRVSP_PROVD index.
            </summary>
            <param name="_provdRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsServiceBase.GetByProvdRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PRVSP_PROVD index.
            </summary>
            <param name="_provdRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsServiceBase.GetByPatntRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PRVSP_PATNT index.
            </summary>
            <param name="_patntRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsServiceBase.GetByPatntRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PRVSP_PATNT index.
            </summary>
            <param name="_patntRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsServiceBase.GetByPrvsnEndFlag(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_PRVSP_PRVSN_END index.
            </summary>
            <param name="_prvsnEndFlag"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsServiceBase.GetByPrvsnEndFlag(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_PRVSP_PRVSN_END index.
            </summary>
            <param name="_prvsnEndFlag"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsServiceBase.GetByRefrlRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PRVSP_REFRL index.
            </summary>
            <param name="_refrlRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsServiceBase.GetByRefrlRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PRVSP_REFRL index.
            </summary>
            <param name="_refrlRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsServiceBase.GetBySpontRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PRVSP_SPONT index.
            </summary>
            <param name="_spontRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsServiceBase.GetBySpontRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PRVSP_SPONT index.
            </summary>
            <param name="_spontRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsServiceBase.GetByPurchRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PRVSP_PURCH index.
            </summary>
            <param name="_purchRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsServiceBase.GetByPurchRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PRVSP_PURCH index.
            </summary>
            <param name="_purchRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsServiceBase.GetByRespHeorgRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PRVSP_RESP_HEORG index.
            </summary>
            <param name="_respHeorgRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsServiceBase.GetByRespHeorgRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PRVSP_RESP_HEORG index.
            </summary>
            <param name="_respHeorgRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsServiceBase.GetByAdmofRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PRVSP_ADMOF index.
            </summary>
            <param name="_admofRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsServiceBase.GetByAdmofRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PRVSP_ADMOF index.
            </summary>
            <param name="_admofRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsServiceBase.GetByArcarHeorgRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PRVSP_ARCAR_HEORG index.
            </summary>
            <param name="_arcarHeorgRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsServiceBase.GetByArcarHeorgRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PRVSP_ARCAR_HEORG index.
            </summary>
            <param name="_arcarHeorgRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsServiceBase.GetByDicarHeorgRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PRVSP_DICAR_HEORG index.
            </summary>
            <param name="_dicarHeorgRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsServiceBase.GetByDicarHeorgRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PRVSP_DICAR_HEORG index.
            </summary>
            <param name="_dicarHeorgRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsServiceBase.GetByAeattRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PRVSP_AEATT index.
            </summary>
            <param name="_aeattRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsServiceBase.GetByAeattRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PRVSP_AEATT index.
            </summary>
            <param name="_aeattRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsServiceBase.GetByPacacRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PRVSP_PACAC index.
            </summary>
            <param name="_pacacRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsServiceBase.GetByPacacRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PRVSP_PACAC index.
            </summary>
            <param name="_pacacRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsServiceBase.GetByMhcepRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PRVSP_MHCEP index.
            </summary>
            <param name="_mhcepRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsServiceBase.GetByMhcepRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PRVSP_MHCEP index.
            </summary>
            <param name="_mhcepRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsServiceBase.GetByPrvspRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_PROVIDER_SPELLS index.
            </summary>
            <param name="_prvspRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ProviderSpells"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsServiceBase.GetByPrvspRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_PROVIDER_SPELLS index.
            </summary>
            <param name="_prvspRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ProviderSpells"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsServiceBase.GetByPriorPointer(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key SAH_PRIOR_PRVSP index.
            </summary>
            <param name="_priorPointer"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsServiceBase.GetByPriorPointer(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key SAH_PRIOR_PRVSP index.
            </summary>
            <param name="_priorPointer"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsServiceBase.GetByIdentifier(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key SAH_PRVSP_IDENT index.
            </summary>
            <param name="_identifier"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsServiceBase.GetByIdentifier(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key SAH_PRVSP_IDENT index.
            </summary>
            <param name="_identifier"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsServiceBase.GetByProcaRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PRVSP_PROCA index.
            </summary>
            <param name="_procaRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsServiceBase.GetByProcaRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PRVSP_PROCA index.
            </summary>
            <param name="_procaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsServiceBase.GetByContrRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PRVSP_CONTR index.
            </summary>
            <param name="_contrRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsServiceBase.GetByContrRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PRVSP_CONTR index.
            </summary>
            <param name="_contrRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsServiceBase.GetBySpectRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PRVSP_SPECT index.
            </summary>
            <param name="_spectRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsServiceBase.GetBySpectRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PRVSP_SPECT index.
            </summary>
            <param name="_spectRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsServiceBase.GetByPriorRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PRVSP_PRIOR index.
            </summary>
            <param name="_priorRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsServiceBase.GetByPriorRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PRVSP_PRIOR index.
            </summary>
            <param name="_priorRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsServiceBase.GetByAdmdcRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PRVSP_ADMDC index.
            </summary>
            <param name="_admdcRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsServiceBase.GetByAdmdcRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PRVSP_ADMDC index.
            </summary>
            <param name="_admdcRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsServiceBase.GetByCccccRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PRVSP_CCCCC index.
            </summary>
            <param name="_cccccRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsServiceBase.GetByCccccRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PRVSP_CCCCC index.
            </summary>
            <param name="_cccccRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsServiceBase.GetByCntctProcaRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PRVSP_CNTCT_PROCA index.
            </summary>
            <param name="_cntctProcaRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsServiceBase.GetByCntctProcaRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PRVSP_CNTCT_PROCA index.
            </summary>
            <param name="_cntctProcaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsServiceBase.GetByMatspRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PRVSP_MATSP index.
            </summary>
            <param name="_matspRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsServiceBase.GetByMatspRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PRVSP_MATSP index.
            </summary>
            <param name="_matspRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ProviderSpells" /> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ProviderSpells" /> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> </returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ProviderSpells</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ProviderSpells</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ProviderSpells</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.ProviderSpells)">
            <summary>
            public virtual method that Inserts a ProviderSpells object into the datasource using a transaction.
            </summary>
            <param name="entity">ProviderSpells object to Insert.</param>
            <remarks>After Inserting into the datasource, the ProviderSpells object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            ProviderSpells entity = new ProviderSpells();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ProviderSpellsService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.ProviderSpells})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProviderSpells</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>ProviderSpells</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of ProviderSpells.
             <code><![CDATA[
             TList<ProviderSpells> list = new TList<ProviderSpells>();
             ProviderSpells entity = new ProviderSpells();
             entity.StringProperty = "foo";
             ProviderSpells entity2 = new ProviderSpells();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProviderSpellsService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.ProviderSpells)">
            <summary>
            public virtual method that Updates a ProviderSpells object into the datasource using a transaction.
            </summary>
            <param name="entity">ProviderSpells object to Update.</param>
            <remarks>After Updateing into the datasource, the ProviderSpells object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            ProviderSpells entity = ProviderSpellsService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ProviderSpellsService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.ProviderSpells})">
             <summary>
             public virtual method that Updates rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProviderSpells</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>ProviderSpells</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of ProviderSpells.
             <code><![CDATA[
             TList<ProviderSpells> list = new TList<ProviderSpells>();
             ProviderSpells entity = new ProviderSpells();
             entity.StringProperty = "foo";
             ProviderSpells entity2 = new ProviderSpells();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProviderSpellsService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.ProviderSpells)">
            <summary>
            public virtual method that Deletes a ProviderSpells object into the datasource using a transaction.
            </summary>
            <param name="entity">ProviderSpells object to Delete.</param>
            <remarks>After Deleteing into the datasource, the ProviderSpells object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            ProviderSpells entity = ProviderSpellsService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ProviderSpellsService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.ProviderSpells})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProviderSpells</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>ProviderSpells</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of ProviderSpells.
             <code><![CDATA[
             TList<ProviderSpells> list = new TList<ProviderSpells>();
             ProviderSpells entity = new ProviderSpells();
             entity.StringProperty = "foo";
             ProviderSpells entity2 = new ProviderSpells();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProviderSpellsService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.ProviderSpellsKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProviderSpellsServiceBase.Delete(System.Decimal)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Decimal _prvspRefno
            </summary>
            <param name="_prvspRefno">ProviderSpells pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.TheatreEventsService">
            <summary>
            An component type implementation of the 'THEATRE_EVENTS' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.TheatreEventsService.#ctor">
            <summary>
            Initializes a new instance of the TheatreEventsService class.
            </summary>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.TheatreEventsServiceBase">
            <summary>
             An object representation of the 'THEATRE_EVENTS' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the TheatreEvents.cs file instead.
             All custom implementations should be done in the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TheatreEvents"/> class.
             </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.TheatreEventsServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TheatreEvents"/> instance .
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.TheatreEventsServiceBase.CreateTheatreEvents(System.Decimal,System.Decimal,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Decimal},System.Nullable{System.DateTime},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Decimal},System.Nullable{System.DateTime},System.Nullable{System.Decimal},System.Nullable{System.DateTime},System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
            <summary>
             A simple factory method to create a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TheatreEvents"/> instance.
            </summary>
            <param name="_theveRefno"></param>
            <param name="_schdlRefno"></param>
            <param name="_awakeDttm"></param>
            <param name="_wardPhondDttm"></param>
            <param name="_anaesStartDttm"></param>
            <param name="_torniPutonDttm"></param>
            <param name="_torniPrssr"></param>
            <param name="_antypRefno"></param>
            <param name="_opertRefno"></param>
            <param name="_torniTakofDttm"></param>
            <param name="_surgyCmpltDttm"></param>
            <param name="_archvFlag"></param>
            <param name="_stranRefno"></param>
            <param name="_externalKey"></param>
            <param name="_drecvRefno"></param>
            <param name="_outrsRefno"></param>
            <param name="_intoTheatreDttm"></param>
            <param name="_outofTheatreDttm"></param>
            <param name="_setupDuration"></param>
            <param name="_surgyStartDttm"></param>
            <param name="_cleanupDuration"></param>
            <param name="_thocmRefno"></param>
            <param name="_sentForDttm"></param>
            <param name="_arrivedDttm"></param>
            <param name="_intoRecovDttm"></param>
            <param name="_outofRecovDttm"></param>
            <param name="_fittrDttm"></param>
            <param name="_priorPointer"></param>
            <param name="_secondRecDttm"></param>
            <param name="_recacRefno"></param>
            <param name="_patientReadyDttm"></param>
            <param name="_procInAnaesRoomFlag"></param>
            <param name="_ownerHeorgRefno"></param>
            <param name="_asascRefno"></param>
            <param name="_wdclsRefno"></param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.TheatreEventsServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.TheatreEventsServiceBase.Get(iSOFT.ANZ.PatientManagerService.Entities.TheatreEventsKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.TheatreEventsServiceBase.GetBySchdlRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_THEVE_SCHDL index.
            </summary>
            <param name="_schdlRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.TheatreEventsServiceBase.GetBySchdlRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_THEVE_SCHDL index.
            </summary>
            <param name="_schdlRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.TheatreEventsServiceBase.GetByTheveRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_THEATRE_EVENTS index.
            </summary>
            <param name="_theveRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TheatreEvents"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.TheatreEventsServiceBase.GetByTheveRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_THEATRE_EVENTS index.
            </summary>
            <param name="_theveRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TheatreEvents"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.TheatreEventsServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TheatreEvents" /> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.TheatreEventsServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TheatreEvents" /> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> </returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.TheatreEventsServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>TheatreEvents</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.TheatreEventsServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>TheatreEvents</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.TheatreEventsServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>TheatreEvents</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.TheatreEventsServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.TheatreEventsServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.TheatreEvents)">
            <summary>
            public virtual method that Inserts a TheatreEvents object into the datasource using a transaction.
            </summary>
            <param name="entity">TheatreEvents object to Insert.</param>
            <remarks>After Inserting into the datasource, the TheatreEvents object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            TheatreEvents entity = new TheatreEvents();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	TheatreEventsService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.TheatreEventsServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.TheatreEvents})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>TheatreEvents</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>TheatreEvents</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of TheatreEvents.
             <code><![CDATA[
             TList<TheatreEvents> list = new TList<TheatreEvents>();
             TheatreEvents entity = new TheatreEvents();
             entity.StringProperty = "foo";
             TheatreEvents entity2 = new TheatreEvents();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	TheatreEventsService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.TheatreEventsServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.TheatreEvents)">
            <summary>
            public virtual method that Updates a TheatreEvents object into the datasource using a transaction.
            </summary>
            <param name="entity">TheatreEvents object to Update.</param>
            <remarks>After Updateing into the datasource, the TheatreEvents object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            TheatreEvents entity = TheatreEventsService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	TheatreEventsService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.TheatreEventsServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.TheatreEvents})">
             <summary>
             public virtual method that Updates rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>TheatreEvents</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>TheatreEvents</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of TheatreEvents.
             <code><![CDATA[
             TList<TheatreEvents> list = new TList<TheatreEvents>();
             TheatreEvents entity = new TheatreEvents();
             entity.StringProperty = "foo";
             TheatreEvents entity2 = new TheatreEvents();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	TheatreEventsService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.TheatreEventsServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.TheatreEvents)">
            <summary>
            public virtual method that Deletes a TheatreEvents object into the datasource using a transaction.
            </summary>
            <param name="entity">TheatreEvents object to Delete.</param>
            <remarks>After Deleteing into the datasource, the TheatreEvents object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            TheatreEvents entity = TheatreEventsService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	TheatreEventsService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.TheatreEventsServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.TheatreEvents})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>TheatreEvents</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>TheatreEvents</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of TheatreEvents.
             <code><![CDATA[
             TList<TheatreEvents> list = new TList<TheatreEvents>();
             TheatreEvents entity = new TheatreEvents();
             entity.StringProperty = "foo";
             TheatreEvents entity2 = new TheatreEvents();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	TheatreEventsService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.TheatreEventsServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.TheatreEventsKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.TheatreEventsServiceBase.Delete(System.Decimal)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Decimal _theveRefno
            </summary>
            <param name="_theveRefno">TheatreEvents pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.ServicePointStaysService">
            <summary>
            An component type implementation of the 'SERVICE_POINT_STAYS' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointStaysService.#ctor">
            <summary>
            Initializes a new instance of the ServicePointStaysService class.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointStaysService.GetTransferEventsInTimePeriod(System.Decimal,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.DateTime,System.DateTime,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key HSS_BEDST_START index.
            </summary>
            <param name="_startDttm"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.ServicePointStaysServiceBase">
            <summary>
             An object representation of the 'SERVICE_POINT_STAYS' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ServicePointStays.cs file instead.
             All custom implementations should be done in the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ServicePointStays"/> class.
             </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointStaysServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ServicePointStays"/> instance .
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointStaysServiceBase.CreateServicePointStays(System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Decimal,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.DateTime,System.Nullable{System.DateTime},System.Nullable{System.Decimal},System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.DateTime},System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
            <summary>
             A simple factory method to create a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ServicePointStays"/> instance.
            </summary>
            <param name="_stranRefno"></param>
            <param name="_patntRefno"></param>
            <param name="_spontRefno"></param>
            <param name="_prvspRefno"></param>
            <param name="_rehscRefno"></param>
            <param name="_delivFacilities"></param>
            <param name="_startDttm"></param>
            <param name="_endDttm"></param>
            <param name="_priorPointer"></param>
            <param name="_archvFlag"></param>
            <param name="_externalKey"></param>
            <param name="_sstypRefno"></param>
            <param name="_hpstpRefno"></param>
            <param name="_comments"></param>
            <param name="_percaRefno"></param>
            <param name="_prvsnFlag"></param>
            <param name="_procaRefno"></param>
            <param name="_bdcatRefno"></param>
            <param name="_chaplainVisitFlag"></param>
            <param name="_visitorsAllowedFlag"></param>
            <param name="_reqtdBdcatRefno"></param>
            <param name="_activeIndicator"></param>
            <param name="_billBdcatRefno"></param>
            <param name="_wardStartDttm"></param>
            <param name="_ownerHeorgRefno"></param>
            <param name="_adtpsRefno"></param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.ServicePointStaysServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointStaysServiceBase.GetByBdcatRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_SSTAY_BDCAT key.
            	CNA_SSTAY_BDCAT Description: 
            </summary>
            <param name="_bdcatRefno"></param>
            <returns>Returns a generic collection of ServicePointStays objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointStaysServiceBase.GetByBdcatRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_SSTAY_BDCAT key.
            	CNA_SSTAY_BDCAT Description: 
            </summary>
            <param name="_bdcatRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>ServicePointStays</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointStaysServiceBase.GetByHpstpRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_SSTAY_HPSTP key.
            	CNA_SSTAY_HPSTP Description: 
            </summary>
            <param name="_hpstpRefno"></param>
            <returns>Returns a generic collection of ServicePointStays objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointStaysServiceBase.GetByHpstpRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_SSTAY_HPSTP key.
            	CNA_SSTAY_HPSTP Description: 
            </summary>
            <param name="_hpstpRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>ServicePointStays</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointStaysServiceBase.GetByRehscRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_SSTAY_REHSC key.
            	CNA_SSTAY_REHSC Description: 
            </summary>
            <param name="_rehscRefno"></param>
            <returns>Returns a generic collection of ServicePointStays objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointStaysServiceBase.GetByRehscRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_SSTAY_REHSC key.
            	CNA_SSTAY_REHSC Description: 
            </summary>
            <param name="_rehscRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>ServicePointStays</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointStaysServiceBase.GetBySstypRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_SSTAY_SSTYP key.
            	CNA_SSTAY_SSTYP Description: 
            </summary>
            <param name="_sstypRefno"></param>
            <returns>Returns a generic collection of ServicePointStays objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointStaysServiceBase.GetBySstypRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_SSTAY_SSTYP key.
            	CNA_SSTAY_SSTYP Description: 
            </summary>
            <param name="_sstypRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>ServicePointStays</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointStaysServiceBase.Get(iSOFT.ANZ.PatientManagerService.Entities.ServicePointStaysKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointStaysServiceBase.GetByPriorPointer(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key HAH_SSTAY_PRIOR index.
            </summary>
            <param name="_priorPointer"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointStaysServiceBase.GetByPriorPointer(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key HAH_SSTAY_PRIOR index.
            </summary>
            <param name="_priorPointer"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointStaysServiceBase.GetByPrvsnFlag(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_SSTAY_PRVSN index.
            </summary>
            <param name="_prvsnFlag"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointStaysServiceBase.GetByPrvsnFlag(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_SSTAY_PRVSN index.
            </summary>
            <param name="_prvsnFlag"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointStaysServiceBase.GetBySpontRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SSTAY_SPONT index.
            </summary>
            <param name="_spontRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointStaysServiceBase.GetBySpontRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SSTAY_SPONT index.
            </summary>
            <param name="_spontRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointStaysServiceBase.GetByPercaRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SSTAY_PERCA index.
            </summary>
            <param name="_percaRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointStaysServiceBase.GetByPercaRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SSTAY_PERCA index.
            </summary>
            <param name="_percaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointStaysServiceBase.GetByProcaRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SSTAY_PROCA index.
            </summary>
            <param name="_procaRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointStaysServiceBase.GetByProcaRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SSTAY_PROCA index.
            </summary>
            <param name="_procaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointStaysServiceBase.GetByPatntRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SSTAY_PATNT index.
            </summary>
            <param name="_patntRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointStaysServiceBase.GetByPatntRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SSTAY_PATNT index.
            </summary>
            <param name="_patntRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointStaysServiceBase.GetByPrvsnFlagSpontRefno(System.String,System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_SSTAY_PRVSN_SPONT index.
            </summary>
            <param name="_prvsnFlag"></param>
            <param name="_spontRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointStaysServiceBase.GetByPrvsnFlagSpontRefno(System.String,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_SSTAY_PRVSN_SPONT index.
            </summary>
            <param name="_prvsnFlag"></param>
            <param name="_spontRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointStaysServiceBase.GetByPrvspRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SSTAY_PRVSP index.
            </summary>
            <param name="_prvspRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointStaysServiceBase.GetByPrvspRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SSTAY_PRVSP index.
            </summary>
            <param name="_prvspRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointStaysServiceBase.GetBySstayRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_SERVICE_POINT_STAYS index.
            </summary>
            <param name="_sstayRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ServicePointStays"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointStaysServiceBase.GetBySstayRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_SERVICE_POINT_STAYS index.
            </summary>
            <param name="_sstayRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ServicePointStays"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointStaysServiceBase.GetByActiveIndicator(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_SSTAY_ACTIND index.
            </summary>
            <param name="_activeIndicator"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointStaysServiceBase.GetByActiveIndicator(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_SSTAY_ACTIND index.
            </summary>
            <param name="_activeIndicator"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointStaysServiceBase.GetBySpontRefnoPrvsnFlag(System.Decimal,System.String)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_SSTAY_SPONT_PRVSN index.
            </summary>
            <param name="_spontRefno"></param>
            <param name="_prvsnFlag"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointStaysServiceBase.GetBySpontRefnoPrvsnFlag(System.Decimal,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_SSTAY_SPONT_PRVSN index.
            </summary>
            <param name="_spontRefno"></param>
            <param name="_prvsnFlag"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointStaysServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ServicePointStays" /> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointStaysServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ServicePointStays" /> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> </returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointStaysServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ServicePointStays</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointStaysServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ServicePointStays</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointStaysServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ServicePointStays</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointStaysServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointStaysServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.ServicePointStays)">
            <summary>
            public virtual method that Inserts a ServicePointStays object into the datasource using a transaction.
            </summary>
            <param name="entity">ServicePointStays object to Insert.</param>
            <remarks>After Inserting into the datasource, the ServicePointStays object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            ServicePointStays entity = new ServicePointStays();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ServicePointStaysService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointStaysServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.ServicePointStays})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>ServicePointStays</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>ServicePointStays</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of ServicePointStays.
             <code><![CDATA[
             TList<ServicePointStays> list = new TList<ServicePointStays>();
             ServicePointStays entity = new ServicePointStays();
             entity.StringProperty = "foo";
             ServicePointStays entity2 = new ServicePointStays();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ServicePointStaysService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointStaysServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.ServicePointStays)">
            <summary>
            public virtual method that Updates a ServicePointStays object into the datasource using a transaction.
            </summary>
            <param name="entity">ServicePointStays object to Update.</param>
            <remarks>After Updateing into the datasource, the ServicePointStays object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            ServicePointStays entity = ServicePointStaysService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ServicePointStaysService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointStaysServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.ServicePointStays})">
             <summary>
             public virtual method that Updates rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>ServicePointStays</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>ServicePointStays</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of ServicePointStays.
             <code><![CDATA[
             TList<ServicePointStays> list = new TList<ServicePointStays>();
             ServicePointStays entity = new ServicePointStays();
             entity.StringProperty = "foo";
             ServicePointStays entity2 = new ServicePointStays();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ServicePointStaysService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointStaysServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.ServicePointStays)">
            <summary>
            public virtual method that Deletes a ServicePointStays object into the datasource using a transaction.
            </summary>
            <param name="entity">ServicePointStays object to Delete.</param>
            <remarks>After Deleteing into the datasource, the ServicePointStays object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            ServicePointStays entity = ServicePointStaysService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ServicePointStaysService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointStaysServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.ServicePointStays})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>ServicePointStays</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>ServicePointStays</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of ServicePointStays.
             <code><![CDATA[
             TList<ServicePointStays> list = new TList<ServicePointStays>();
             ServicePointStays entity = new ServicePointStays();
             entity.StringProperty = "foo";
             ServicePointStays entity2 = new ServicePointStays();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ServicePointStaysService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointStaysServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.ServicePointStaysKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointStaysServiceBase.Delete(System.Decimal)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Decimal _sstayRefno
            </summary>
            <param name="_sstayRefno">ServicePointStays pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.SystemProfilesService">
            <summary>
            An component type implementation of the 'SYSTEM_PROFILES' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SystemProfilesService.#ctor">
            <summary>
            Initializes a new instance of the SystemProfilesService class.
            </summary>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.SystemProfilesServiceBase">
            <summary>
             An object representation of the 'SYSTEM_PROFILES' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the SystemProfiles.cs file instead.
             All custom implementations should be done in the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.SystemProfiles"/> class.
             </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SystemProfilesServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.SystemProfiles"/> instance .
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SystemProfilesServiceBase.CreateSystemProfiles(System.Decimal,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.String,System.String,System.Object,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
            <summary>
             A simple factory method to create a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.SystemProfiles"/> instance.
            </summary>
            <param name="_syproRefno"></param>
            <param name="_usersRefno"></param>
            <param name="_wkstnRefno"></param>
            <param name="_code"></param>
            <param name="_usage"></param>
            <param name="_value"></param>
            <param name="_longValue"></param>
            <param name="_aprolRefno"></param>
            <param name="_heorgRefno"></param>
            <param name="_externalKey"></param>
            <param name="_archvFlag"></param>
            <param name="_stranRefno"></param>
            <param name="_ownerHeorgRefno"></param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.SystemProfilesServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SystemProfilesServiceBase.Get(iSOFT.ANZ.PatientManagerService.Entities.SystemProfilesKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SystemProfilesServiceBase.GetByUsersRefnoWkstnRefno(System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_SYPRO_FULL index.
            </summary>
            <param name="_usersRefno"></param>
            <param name="_wkstnRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SystemProfilesServiceBase.GetByUsersRefnoWkstnRefno(System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_SYPRO_FULL index.
            </summary>
            <param name="_usersRefno"></param>
            <param name="_wkstnRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SystemProfilesServiceBase.GetByUsersRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SYPRO_USERS index.
            </summary>
            <param name="_usersRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SystemProfilesServiceBase.GetByUsersRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SYPRO_USERS index.
            </summary>
            <param name="_usersRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SystemProfilesServiceBase.GetByWkstnRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SYPRO_WKSTN index.
            </summary>
            <param name="_wkstnRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SystemProfilesServiceBase.GetByWkstnRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SYPRO_WKSTN index.
            </summary>
            <param name="_wkstnRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SystemProfilesServiceBase.GetByAprolRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SYPRO_APROL index.
            </summary>
            <param name="_aprolRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SystemProfilesServiceBase.GetByAprolRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SYPRO_APROL index.
            </summary>
            <param name="_aprolRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SystemProfilesServiceBase.GetByHeorgRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SYPRO_HEORG index.
            </summary>
            <param name="_heorgRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SystemProfilesServiceBase.GetByHeorgRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SYPRO_HEORG index.
            </summary>
            <param name="_heorgRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SystemProfilesServiceBase.GetBySyproRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_SYSTEM_PROFILES index.
            </summary>
            <param name="_syproRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.SystemProfiles"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SystemProfilesServiceBase.GetBySyproRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_SYSTEM_PROFILES index.
            </summary>
            <param name="_syproRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.SystemProfiles"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SystemProfilesServiceBase.GetByCode(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_SYPRO_CODE index.
            </summary>
            <param name="_code"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SystemProfilesServiceBase.GetByCode(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_SYPRO_CODE index.
            </summary>
            <param name="_code"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SystemProfilesServiceBase.GetByCodeUsage(System.String,System.String)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_SYPRO_CODE_USAGE index.
            </summary>
            <param name="_code"></param>
            <param name="_usage"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SystemProfilesServiceBase.GetByCodeUsage(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_SYPRO_CODE_USAGE index.
            </summary>
            <param name="_code"></param>
            <param name="_usage"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SystemProfilesServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.SystemProfiles" /> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SystemProfilesServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.SystemProfiles" /> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> </returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SystemProfilesServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>SystemProfiles</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SystemProfilesServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>SystemProfiles</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SystemProfilesServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>SystemProfiles</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SystemProfilesServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SystemProfilesServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.SystemProfiles)">
            <summary>
            public virtual method that Inserts a SystemProfiles object into the datasource using a transaction.
            </summary>
            <param name="entity">SystemProfiles object to Insert.</param>
            <remarks>After Inserting into the datasource, the SystemProfiles object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            SystemProfiles entity = new SystemProfiles();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	SystemProfilesService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SystemProfilesServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.SystemProfiles})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>SystemProfiles</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>SystemProfiles</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of SystemProfiles.
             <code><![CDATA[
             TList<SystemProfiles> list = new TList<SystemProfiles>();
             SystemProfiles entity = new SystemProfiles();
             entity.StringProperty = "foo";
             SystemProfiles entity2 = new SystemProfiles();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SystemProfilesService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SystemProfilesServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.SystemProfiles)">
            <summary>
            public virtual method that Updates a SystemProfiles object into the datasource using a transaction.
            </summary>
            <param name="entity">SystemProfiles object to Update.</param>
            <remarks>After Updateing into the datasource, the SystemProfiles object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            SystemProfiles entity = SystemProfilesService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	SystemProfilesService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SystemProfilesServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.SystemProfiles})">
             <summary>
             public virtual method that Updates rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>SystemProfiles</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>SystemProfiles</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of SystemProfiles.
             <code><![CDATA[
             TList<SystemProfiles> list = new TList<SystemProfiles>();
             SystemProfiles entity = new SystemProfiles();
             entity.StringProperty = "foo";
             SystemProfiles entity2 = new SystemProfiles();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SystemProfilesService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SystemProfilesServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.SystemProfiles)">
            <summary>
            public virtual method that Deletes a SystemProfiles object into the datasource using a transaction.
            </summary>
            <param name="entity">SystemProfiles object to Delete.</param>
            <remarks>After Deleteing into the datasource, the SystemProfiles object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            SystemProfiles entity = SystemProfilesService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	SystemProfilesService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SystemProfilesServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.SystemProfiles})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>SystemProfiles</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>SystemProfiles</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of SystemProfiles.
             <code><![CDATA[
             TList<SystemProfiles> list = new TList<SystemProfiles>();
             SystemProfiles entity = new SystemProfiles();
             entity.StringProperty = "foo";
             SystemProfiles entity2 = new SystemProfiles();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SystemProfilesService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SystemProfilesServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.SystemProfilesKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SystemProfilesServiceBase.Delete(System.Decimal)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Decimal _syproRefno
            </summary>
            <param name="_syproRefno">SystemProfiles pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.ServicePointSuspensionsService">
            <summary>
            An component type implementation of the 'SERVICE_POINT_SUSPENSIONS' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointSuspensionsService.#ctor">
            <summary>
            Initializes a new instance of the ServicePointSuspensionsService class.
            </summary>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.ServicePointSuspensionsServiceBase">
            <summary>
             An object representation of the 'SERVICE_POINT_SUSPENSIONS' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ServicePointSuspensions.cs file instead.
             All custom implementations should be done in the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ServicePointSuspensions"/> class.
             </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointSuspensionsServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ServicePointSuspensions"/> instance .
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointSuspensionsServiceBase.CreateServicePointSuspensions(System.Decimal,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.DateTime,System.Nullable{System.DateTime},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal})">
            <summary>
             A simple factory method to create a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ServicePointSuspensions"/> instance.
            </summary>
            <param name="_spsusRefno"></param>
            <param name="_spbayRefno"></param>
            <param name="_spontRefno"></param>
            <param name="_bedssRefno"></param>
            <param name="_startDttm"></param>
            <param name="_endDttm"></param>
            <param name="_spsurRefno"></param>
            <param name="_archvFlag"></param>
            <param name="_stranRefno"></param>
            <param name="_externalKey"></param>
            <param name="_ownerHeorgRefno"></param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.ServicePointSuspensionsServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointSuspensionsServiceBase.Get(iSOFT.ANZ.PatientManagerService.Entities.ServicePointSuspensionsKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointSuspensionsServiceBase.GetBySpontRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SPSUS_SPONT index.
            </summary>
            <param name="_spontRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointSuspensionsServiceBase.GetBySpontRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SPSUS_SPONT index.
            </summary>
            <param name="_spontRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointSuspensionsServiceBase.GetByBedssRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SPSUS_BEDSS index.
            </summary>
            <param name="_bedssRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointSuspensionsServiceBase.GetByBedssRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SPSUS_BEDSS index.
            </summary>
            <param name="_bedssRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointSuspensionsServiceBase.GetBySpsusRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_SERVICE_POINT_SUSPENSIONS index.
            </summary>
            <param name="_spsusRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ServicePointSuspensions"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointSuspensionsServiceBase.GetBySpsusRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_SERVICE_POINT_SUSPENSIONS index.
            </summary>
            <param name="_spsusRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ServicePointSuspensions"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointSuspensionsServiceBase.GetBySpbayRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SPSUS_SPBAY index.
            </summary>
            <param name="_spbayRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointSuspensionsServiceBase.GetBySpbayRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_SPSUS_SPBAY index.
            </summary>
            <param name="_spbayRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointSuspensionsServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ServicePointSuspensions" /> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointSuspensionsServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ServicePointSuspensions" /> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> </returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointSuspensionsServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ServicePointSuspensions</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointSuspensionsServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ServicePointSuspensions</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointSuspensionsServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ServicePointSuspensions</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointSuspensionsServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointSuspensionsServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.ServicePointSuspensions)">
            <summary>
            public virtual method that Inserts a ServicePointSuspensions object into the datasource using a transaction.
            </summary>
            <param name="entity">ServicePointSuspensions object to Insert.</param>
            <remarks>After Inserting into the datasource, the ServicePointSuspensions object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            ServicePointSuspensions entity = new ServicePointSuspensions();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ServicePointSuspensionsService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointSuspensionsServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.ServicePointSuspensions})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>ServicePointSuspensions</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>ServicePointSuspensions</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of ServicePointSuspensions.
             <code><![CDATA[
             TList<ServicePointSuspensions> list = new TList<ServicePointSuspensions>();
             ServicePointSuspensions entity = new ServicePointSuspensions();
             entity.StringProperty = "foo";
             ServicePointSuspensions entity2 = new ServicePointSuspensions();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ServicePointSuspensionsService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointSuspensionsServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.ServicePointSuspensions)">
            <summary>
            public virtual method that Updates a ServicePointSuspensions object into the datasource using a transaction.
            </summary>
            <param name="entity">ServicePointSuspensions object to Update.</param>
            <remarks>After Updateing into the datasource, the ServicePointSuspensions object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            ServicePointSuspensions entity = ServicePointSuspensionsService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ServicePointSuspensionsService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointSuspensionsServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.ServicePointSuspensions})">
             <summary>
             public virtual method that Updates rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>ServicePointSuspensions</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>ServicePointSuspensions</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of ServicePointSuspensions.
             <code><![CDATA[
             TList<ServicePointSuspensions> list = new TList<ServicePointSuspensions>();
             ServicePointSuspensions entity = new ServicePointSuspensions();
             entity.StringProperty = "foo";
             ServicePointSuspensions entity2 = new ServicePointSuspensions();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ServicePointSuspensionsService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointSuspensionsServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.ServicePointSuspensions)">
            <summary>
            public virtual method that Deletes a ServicePointSuspensions object into the datasource using a transaction.
            </summary>
            <param name="entity">ServicePointSuspensions object to Delete.</param>
            <remarks>After Deleteing into the datasource, the ServicePointSuspensions object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            ServicePointSuspensions entity = ServicePointSuspensionsService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ServicePointSuspensionsService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointSuspensionsServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.ServicePointSuspensions})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>ServicePointSuspensions</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>ServicePointSuspensions</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of ServicePointSuspensions.
             <code><![CDATA[
             TList<ServicePointSuspensions> list = new TList<ServicePointSuspensions>();
             ServicePointSuspensions entity = new ServicePointSuspensions();
             entity.StringProperty = "foo";
             ServicePointSuspensions entity2 = new ServicePointSuspensions();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ServicePointSuspensionsService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointSuspensionsServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.ServicePointSuspensionsKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServicePointSuspensionsServiceBase.Delete(System.Decimal)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Decimal _spsusRefno
            </summary>
            <param name="_spsusRefno">ServicePointSuspensions pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.UserWorkStationsService">
            <summary>
            An component type implementation of the 'USER_WORK_STATIONS' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.UserWorkStationsService.#ctor">
            <summary>
            Initializes a new instance of the UserWorkStationsService class.
            </summary>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.UserWorkStationsServiceBase">
            <summary>
             An object representation of the 'USER_WORK_STATIONS' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the UserWorkStations.cs file instead.
             All custom implementations should be done in the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.UserWorkStations"/> class.
             </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.UserWorkStationsServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.UserWorkStations"/> instance .
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.UserWorkStationsServiceBase.CreateUserWorkStations(System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.DateTime,System.Nullable{System.DateTime},System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
            <summary>
             A simple factory method to create a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.UserWorkStations"/> instance.
            </summary>
            <param name="_wkstnRefno"></param>
            <param name="_usersRefno"></param>
            <param name="_startDttm"></param>
            <param name="_endDttm"></param>
            <param name="_externalKey"></param>
            <param name="_archvFlag"></param>
            <param name="_stranRefno"></param>
            <param name="_ownerHeorgRefno"></param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.UserWorkStationsServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.UserWorkStationsServiceBase.Get(iSOFT.ANZ.PatientManagerService.Entities.UserWorkStationsKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.UserWorkStationsServiceBase.GetByUsersRefnoWkstnRefno(System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_USWRK_FULL index.
            </summary>
            <param name="_usersRefno"></param>
            <param name="_wkstnRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.UserWorkStationsServiceBase.GetByUsersRefnoWkstnRefno(System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_USWRK_FULL index.
            </summary>
            <param name="_usersRefno"></param>
            <param name="_wkstnRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.UserWorkStationsServiceBase.GetByWkstnRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_USWRK_WKSTN index.
            </summary>
            <param name="_wkstnRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.UserWorkStationsServiceBase.GetByWkstnRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_USWRK_WKSTN index.
            </summary>
            <param name="_wkstnRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.UserWorkStationsServiceBase.GetByUsersRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_USWRK_USERS index.
            </summary>
            <param name="_usersRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.UserWorkStationsServiceBase.GetByUsersRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_USWRK_USERS index.
            </summary>
            <param name="_usersRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.UserWorkStationsServiceBase.GetByUswrkRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_USER_WORK_STATIONS index.
            </summary>
            <param name="_uswrkRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.UserWorkStations"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.UserWorkStationsServiceBase.GetByUswrkRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_USER_WORK_STATIONS index.
            </summary>
            <param name="_uswrkRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.UserWorkStations"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.UserWorkStationsServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.UserWorkStations" /> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.UserWorkStationsServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.UserWorkStations" /> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> </returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.UserWorkStationsServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>UserWorkStations</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.UserWorkStationsServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>UserWorkStations</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.UserWorkStationsServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>UserWorkStations</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.UserWorkStationsServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.UserWorkStationsServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.UserWorkStations)">
            <summary>
            public virtual method that Inserts a UserWorkStations object into the datasource using a transaction.
            </summary>
            <param name="entity">UserWorkStations object to Insert.</param>
            <remarks>After Inserting into the datasource, the UserWorkStations object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            UserWorkStations entity = new UserWorkStations();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	UserWorkStationsService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.UserWorkStationsServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.UserWorkStations})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>UserWorkStations</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>UserWorkStations</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of UserWorkStations.
             <code><![CDATA[
             TList<UserWorkStations> list = new TList<UserWorkStations>();
             UserWorkStations entity = new UserWorkStations();
             entity.StringProperty = "foo";
             UserWorkStations entity2 = new UserWorkStations();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	UserWorkStationsService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.UserWorkStationsServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.UserWorkStations)">
            <summary>
            public virtual method that Updates a UserWorkStations object into the datasource using a transaction.
            </summary>
            <param name="entity">UserWorkStations object to Update.</param>
            <remarks>After Updateing into the datasource, the UserWorkStations object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            UserWorkStations entity = UserWorkStationsService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	UserWorkStationsService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.UserWorkStationsServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.UserWorkStations})">
             <summary>
             public virtual method that Updates rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>UserWorkStations</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>UserWorkStations</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of UserWorkStations.
             <code><![CDATA[
             TList<UserWorkStations> list = new TList<UserWorkStations>();
             UserWorkStations entity = new UserWorkStations();
             entity.StringProperty = "foo";
             UserWorkStations entity2 = new UserWorkStations();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	UserWorkStationsService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.UserWorkStationsServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.UserWorkStations)">
            <summary>
            public virtual method that Deletes a UserWorkStations object into the datasource using a transaction.
            </summary>
            <param name="entity">UserWorkStations object to Delete.</param>
            <remarks>After Deleteing into the datasource, the UserWorkStations object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            UserWorkStations entity = UserWorkStationsService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	UserWorkStationsService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.UserWorkStationsServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.UserWorkStations})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>UserWorkStations</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>UserWorkStations</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of UserWorkStations.
             <code><![CDATA[
             TList<UserWorkStations> list = new TList<UserWorkStations>();
             UserWorkStations entity = new UserWorkStations();
             entity.StringProperty = "foo";
             UserWorkStations entity2 = new UserWorkStations();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	UserWorkStationsService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.UserWorkStationsServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.UserWorkStationsKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.UserWorkStationsServiceBase.Delete(System.Decimal)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Decimal _uswrkRefno
            </summary>
            <param name="_uswrkRefno">UserWorkStations pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.SpecialtyIdsService">
            <summary>
            An component type implementation of the 'SPECIALTY_IDS' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SpecialtyIdsService.#ctor">
            <summary>
            Initializes a new instance of the SpecialtyIdsService class.
            </summary>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.SpecialtyIdsServiceBase">
            <summary>
             An object representation of the 'SPECIALTY_IDS' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the SpecialtyIds.cs file instead.
             All custom implementations should be done in the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.SpecialtyIds"/> class.
             </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SpecialtyIdsServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.SpecialtyIds"/> instance .
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SpecialtyIdsServiceBase.CreateSpecialtyIds(System.Decimal,System.String,System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal})">
            <summary>
             A simple factory method to create a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.SpecialtyIds"/> instance.
            </summary>
            <param name="_spectRefno"></param>
            <param name="_identifier"></param>
            <param name="_sitypRefno"></param>
            <param name="_archvFlag"></param>
            <param name="_stranRefno"></param>
            <param name="_priorPointer"></param>
            <param name="_externalKey"></param>
            <param name="_ownerHeorgRefno"></param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.SpecialtyIdsServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SpecialtyIdsServiceBase.Get(iSOFT.ANZ.PatientManagerService.Entities.SpecialtyIdsKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SpecialtyIdsServiceBase.GetByIdentifierSpectRefno(System.String,System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_SPECIALTY_IDS index.
            </summary>
            <param name="_identifier"></param>
            <param name="_spectRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SpecialtyIdsServiceBase.GetByIdentifierSpectRefno(System.String,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_SPECIALTY_IDS index.
            </summary>
            <param name="_identifier"></param>
            <param name="_spectRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SpecialtyIdsServiceBase.GetBySpeidRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_SPECIALTY_IDS index.
            </summary>
            <param name="_speidRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.SpecialtyIds"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SpecialtyIdsServiceBase.GetBySpeidRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_SPECIALTY_IDS index.
            </summary>
            <param name="_speidRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.SpecialtyIds"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SpecialtyIdsServiceBase.GetByIdentifierSitypRefno(System.String,System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_SPEID_IDENT_SITYP index.
            </summary>
            <param name="_identifier"></param>
            <param name="_sitypRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SpecialtyIdsServiceBase.GetByIdentifierSitypRefno(System.String,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_SPEID_IDENT_SITYP index.
            </summary>
            <param name="_identifier"></param>
            <param name="_sitypRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SpecialtyIdsServiceBase.GetBySpectRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_SPEID_SPECT index.
            </summary>
            <param name="_spectRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SpecialtyIdsServiceBase.GetBySpectRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_SPEID_SPECT index.
            </summary>
            <param name="_spectRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SpecialtyIdsServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.SpecialtyIds" /> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SpecialtyIdsServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.SpecialtyIds" /> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> </returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SpecialtyIdsServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>SpecialtyIds</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SpecialtyIdsServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>SpecialtyIds</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SpecialtyIdsServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>SpecialtyIds</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SpecialtyIdsServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SpecialtyIdsServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.SpecialtyIds)">
            <summary>
            public virtual method that Inserts a SpecialtyIds object into the datasource using a transaction.
            </summary>
            <param name="entity">SpecialtyIds object to Insert.</param>
            <remarks>After Inserting into the datasource, the SpecialtyIds object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            SpecialtyIds entity = new SpecialtyIds();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	SpecialtyIdsService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SpecialtyIdsServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.SpecialtyIds})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>SpecialtyIds</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>SpecialtyIds</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of SpecialtyIds.
             <code><![CDATA[
             TList<SpecialtyIds> list = new TList<SpecialtyIds>();
             SpecialtyIds entity = new SpecialtyIds();
             entity.StringProperty = "foo";
             SpecialtyIds entity2 = new SpecialtyIds();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SpecialtyIdsService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SpecialtyIdsServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.SpecialtyIds)">
            <summary>
            public virtual method that Updates a SpecialtyIds object into the datasource using a transaction.
            </summary>
            <param name="entity">SpecialtyIds object to Update.</param>
            <remarks>After Updateing into the datasource, the SpecialtyIds object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            SpecialtyIds entity = SpecialtyIdsService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	SpecialtyIdsService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SpecialtyIdsServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.SpecialtyIds})">
             <summary>
             public virtual method that Updates rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>SpecialtyIds</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>SpecialtyIds</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of SpecialtyIds.
             <code><![CDATA[
             TList<SpecialtyIds> list = new TList<SpecialtyIds>();
             SpecialtyIds entity = new SpecialtyIds();
             entity.StringProperty = "foo";
             SpecialtyIds entity2 = new SpecialtyIds();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SpecialtyIdsService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SpecialtyIdsServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.SpecialtyIds)">
            <summary>
            public virtual method that Deletes a SpecialtyIds object into the datasource using a transaction.
            </summary>
            <param name="entity">SpecialtyIds object to Delete.</param>
            <remarks>After Deleteing into the datasource, the SpecialtyIds object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            SpecialtyIds entity = SpecialtyIdsService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	SpecialtyIdsService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SpecialtyIdsServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.SpecialtyIds})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>SpecialtyIds</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>SpecialtyIds</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of SpecialtyIds.
             <code><![CDATA[
             TList<SpecialtyIds> list = new TList<SpecialtyIds>();
             SpecialtyIds entity = new SpecialtyIds();
             entity.StringProperty = "foo";
             SpecialtyIds entity2 = new SpecialtyIds();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SpecialtyIdsService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SpecialtyIdsServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.SpecialtyIdsKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SpecialtyIdsServiceBase.Delete(System.Decimal)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Decimal _speidRefno
            </summary>
            <param name="_speidRefno">SpecialtyIds pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.ProfCarerStaffTeamsService">
            <summary>
            An component type implementation of the 'PROF_CARER_STAFF_TEAMS' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerStaffTeamsService.#ctor">
            <summary>
            Initializes a new instance of the ProfCarerStaffTeamsService class.
            </summary>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.ProfCarerStaffTeamsServiceBase">
            <summary>
             An object representation of the 'PROF_CARER_STAFF_TEAMS' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ProfCarerStaffTeams.cs file instead.
             All custom implementations should be done in the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ProfCarerStaffTeams"/> class.
             </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerStaffTeamsServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ProfCarerStaffTeams"/> instance .
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerStaffTeamsServiceBase.CreateProfCarerStaffTeams(System.Nullable{System.Decimal},System.Decimal,System.Nullable{System.Decimal},System.DateTime,System.Nullable{System.DateTime},System.String,System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal})">
            <summary>
             A simple factory method to create a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ProfCarerStaffTeams"/> instance.
            </summary>
            <param name="_prrolRefno"></param>
            <param name="_steamRefno"></param>
            <param name="_procaRefno"></param>
            <param name="_startDttm"></param>
            <param name="_endDttm"></param>
            <param name="_archvFlag"></param>
            <param name="_stranRefno"></param>
            <param name="_externalKey"></param>
            <param name="_ownerHeorgRefno"></param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.ProfCarerStaffTeamsServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerStaffTeamsServiceBase.Get(iSOFT.ANZ.PatientManagerService.Entities.ProfCarerStaffTeamsKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerStaffTeamsServiceBase.GetBySteamRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PCSTT_STEAM index.
            </summary>
            <param name="_steamRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerStaffTeamsServiceBase.GetBySteamRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PCSTT_STEAM index.
            </summary>
            <param name="_steamRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerStaffTeamsServiceBase.GetByProcaRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PCSTT_PROCA index.
            </summary>
            <param name="_procaRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerStaffTeamsServiceBase.GetByProcaRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PCSTT_PROCA index.
            </summary>
            <param name="_procaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerStaffTeamsServiceBase.GetByPcsttRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_PROF_CARER_STAFF_TEAMS index.
            </summary>
            <param name="_pcsttRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ProfCarerStaffTeams"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerStaffTeamsServiceBase.GetByPcsttRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_PROF_CARER_STAFF_TEAMS index.
            </summary>
            <param name="_pcsttRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ProfCarerStaffTeams"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerStaffTeamsServiceBase.GetByPrrolRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key SAH_PCST_PRROL index.
            </summary>
            <param name="_prrolRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerStaffTeamsServiceBase.GetByPrrolRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key SAH_PCST_PRROL index.
            </summary>
            <param name="_prrolRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerStaffTeamsServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ProfCarerStaffTeams" /> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerStaffTeamsServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ProfCarerStaffTeams" /> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> </returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerStaffTeamsServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ProfCarerStaffTeams</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerStaffTeamsServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ProfCarerStaffTeams</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerStaffTeamsServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ProfCarerStaffTeams</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerStaffTeamsServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerStaffTeamsServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.ProfCarerStaffTeams)">
            <summary>
            public virtual method that Inserts a ProfCarerStaffTeams object into the datasource using a transaction.
            </summary>
            <param name="entity">ProfCarerStaffTeams object to Insert.</param>
            <remarks>After Inserting into the datasource, the ProfCarerStaffTeams object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            ProfCarerStaffTeams entity = new ProfCarerStaffTeams();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ProfCarerStaffTeamsService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerStaffTeamsServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.ProfCarerStaffTeams})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProfCarerStaffTeams</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>ProfCarerStaffTeams</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of ProfCarerStaffTeams.
             <code><![CDATA[
             TList<ProfCarerStaffTeams> list = new TList<ProfCarerStaffTeams>();
             ProfCarerStaffTeams entity = new ProfCarerStaffTeams();
             entity.StringProperty = "foo";
             ProfCarerStaffTeams entity2 = new ProfCarerStaffTeams();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProfCarerStaffTeamsService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerStaffTeamsServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.ProfCarerStaffTeams)">
            <summary>
            public virtual method that Updates a ProfCarerStaffTeams object into the datasource using a transaction.
            </summary>
            <param name="entity">ProfCarerStaffTeams object to Update.</param>
            <remarks>After Updateing into the datasource, the ProfCarerStaffTeams object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            ProfCarerStaffTeams entity = ProfCarerStaffTeamsService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ProfCarerStaffTeamsService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerStaffTeamsServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.ProfCarerStaffTeams})">
             <summary>
             public virtual method that Updates rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProfCarerStaffTeams</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>ProfCarerStaffTeams</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of ProfCarerStaffTeams.
             <code><![CDATA[
             TList<ProfCarerStaffTeams> list = new TList<ProfCarerStaffTeams>();
             ProfCarerStaffTeams entity = new ProfCarerStaffTeams();
             entity.StringProperty = "foo";
             ProfCarerStaffTeams entity2 = new ProfCarerStaffTeams();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProfCarerStaffTeamsService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerStaffTeamsServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.ProfCarerStaffTeams)">
            <summary>
            public virtual method that Deletes a ProfCarerStaffTeams object into the datasource using a transaction.
            </summary>
            <param name="entity">ProfCarerStaffTeams object to Delete.</param>
            <remarks>After Deleteing into the datasource, the ProfCarerStaffTeams object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            ProfCarerStaffTeams entity = ProfCarerStaffTeamsService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ProfCarerStaffTeamsService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerStaffTeamsServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.ProfCarerStaffTeams})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProfCarerStaffTeams</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>ProfCarerStaffTeams</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of ProfCarerStaffTeams.
             <code><![CDATA[
             TList<ProfCarerStaffTeams> list = new TList<ProfCarerStaffTeams>();
             ProfCarerStaffTeams entity = new ProfCarerStaffTeams();
             entity.StringProperty = "foo";
             ProfCarerStaffTeams entity2 = new ProfCarerStaffTeams();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProfCarerStaffTeamsService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerStaffTeamsServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.ProfCarerStaffTeamsKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerStaffTeamsServiceBase.Delete(System.Decimal)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Decimal _pcsttRefno
            </summary>
            <param name="_pcsttRefno">ProfCarerStaffTeams pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.ApplicationRolesService">
            <summary>
            An component type implementation of the 'APPLICATION_ROLES' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ApplicationRolesService.#ctor">
            <summary>
            Initializes a new instance of the ApplicationRolesService class.
            </summary>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.ApplicationRolesServiceBase">
            <summary>
             An object representation of the 'APPLICATION_ROLES' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ApplicationRoles.cs file instead.
             All custom implementations should be done in the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ApplicationRoles"/> class.
             </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ApplicationRolesServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ApplicationRoles"/> instance .
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ApplicationRolesServiceBase.CreateApplicationRoles(System.Decimal,System.String,System.String,System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Decimal},System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ApplicationRoles"/> instance.
            </summary>
            <param name="_aprolRefno"></param>
            <param name="_code"></param>
            <param name="_name"></param>
            <param name="_description"></param>
            <param name="_archvFlag"></param>
            <param name="_stranRefno"></param>
            <param name="_parntRefno"></param>
            <param name="_startDttm"></param>
            <param name="_endDttm"></param>
            <param name="_ownerHeorgRefno"></param>
            <param name="_externalKey"></param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.ApplicationRolesServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ApplicationRolesServiceBase.Get(iSOFT.ANZ.PatientManagerService.Entities.ApplicationRolesKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ApplicationRolesServiceBase.GetByAprolRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_APPLICATION_ROLES index.
            </summary>
            <param name="_aprolRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ApplicationRoles"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ApplicationRolesServiceBase.GetByAprolRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_APPLICATION_ROLES index.
            </summary>
            <param name="_aprolRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ApplicationRoles"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ApplicationRolesServiceBase.GetByCode(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_APROL_CODE index.
            </summary>
            <param name="_code"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ApplicationRolesServiceBase.GetByCode(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_APROL_CODE index.
            </summary>
            <param name="_code"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ApplicationRolesServiceBase.GetByParntRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_APROL_PARNT index.
            </summary>
            <param name="_parntRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ApplicationRolesServiceBase.GetByParntRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_APROL_PARNT index.
            </summary>
            <param name="_parntRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ApplicationRolesServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ApplicationRoles" /> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ApplicationRolesServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ApplicationRoles" /> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> </returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ApplicationRolesServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ApplicationRoles</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ApplicationRolesServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ApplicationRoles</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ApplicationRolesServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ApplicationRoles</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ApplicationRolesServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ApplicationRolesServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.ApplicationRoles)">
            <summary>
            public virtual method that Inserts a ApplicationRoles object into the datasource using a transaction.
            </summary>
            <param name="entity">ApplicationRoles object to Insert.</param>
            <remarks>After Inserting into the datasource, the ApplicationRoles object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            ApplicationRoles entity = new ApplicationRoles();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ApplicationRolesService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ApplicationRolesServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.ApplicationRoles})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>ApplicationRoles</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>ApplicationRoles</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of ApplicationRoles.
             <code><![CDATA[
             TList<ApplicationRoles> list = new TList<ApplicationRoles>();
             ApplicationRoles entity = new ApplicationRoles();
             entity.StringProperty = "foo";
             ApplicationRoles entity2 = new ApplicationRoles();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ApplicationRolesService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ApplicationRolesServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.ApplicationRoles)">
            <summary>
            public virtual method that Updates a ApplicationRoles object into the datasource using a transaction.
            </summary>
            <param name="entity">ApplicationRoles object to Update.</param>
            <remarks>After Updateing into the datasource, the ApplicationRoles object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            ApplicationRoles entity = ApplicationRolesService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ApplicationRolesService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ApplicationRolesServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.ApplicationRoles})">
             <summary>
             public virtual method that Updates rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>ApplicationRoles</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>ApplicationRoles</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of ApplicationRoles.
             <code><![CDATA[
             TList<ApplicationRoles> list = new TList<ApplicationRoles>();
             ApplicationRoles entity = new ApplicationRoles();
             entity.StringProperty = "foo";
             ApplicationRoles entity2 = new ApplicationRoles();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ApplicationRolesService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ApplicationRolesServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.ApplicationRoles)">
            <summary>
            public virtual method that Deletes a ApplicationRoles object into the datasource using a transaction.
            </summary>
            <param name="entity">ApplicationRoles object to Delete.</param>
            <remarks>After Deleteing into the datasource, the ApplicationRoles object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            ApplicationRoles entity = ApplicationRolesService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ApplicationRolesService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ApplicationRolesServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.ApplicationRoles})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>ApplicationRoles</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>ApplicationRoles</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of ApplicationRoles.
             <code><![CDATA[
             TList<ApplicationRoles> list = new TList<ApplicationRoles>();
             ApplicationRoles entity = new ApplicationRoles();
             entity.StringProperty = "foo";
             ApplicationRoles entity2 = new ApplicationRoles();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ApplicationRolesService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ApplicationRolesServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.ApplicationRolesKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ApplicationRolesServiceBase.Delete(System.Decimal)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Decimal _aprolRefno
            </summary>
            <param name="_aprolRefno">ApplicationRoles pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.BedProfilesService">
            <summary>
            An component type implementation of the 'BED_PROFILES' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.BedProfilesService.#ctor">
            <summary>
            Initializes a new instance of the BedProfilesService class.
            </summary>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.BedProfilesServiceBase">
            <summary>
             An object representation of the 'BED_PROFILES' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the BedProfiles.cs file instead.
             All custom implementations should be done in the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.BedProfiles"/> class.
             </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.BedProfilesServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.BedProfiles"/> instance .
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.BedProfilesServiceBase.CreateBedProfiles(System.Decimal,System.Decimal,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.DateTime,System.Nullable{System.DateTime},System.String,System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal})">
            <summary>
             A simple factory method to create a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.BedProfiles"/> instance.
            </summary>
            <param name="_bdproRefno"></param>
            <param name="_bedssRefno"></param>
            <param name="_bdcatRefno"></param>
            <param name="_procaRefno"></param>
            <param name="_spectRefno"></param>
            <param name="_agegrRefno"></param>
            <param name="_sexxxRefno"></param>
            <param name="_brpagRefno"></param>
            <param name="_incliRefno"></param>
            <param name="_startDttm"></param>
            <param name="_endDttm"></param>
            <param name="_archvFlag"></param>
            <param name="_stranRefno"></param>
            <param name="_externalKey"></param>
            <param name="_ownerHeorgRefno"></param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.BedProfilesServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.BedProfilesServiceBase.Get(iSOFT.ANZ.PatientManagerService.Entities.BedProfilesKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.BedProfilesServiceBase.GetByProcaRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_BDPRO_PROCA index.
            </summary>
            <param name="_procaRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.BedProfilesServiceBase.GetByProcaRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_BDPRO_PROCA index.
            </summary>
            <param name="_procaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.BedProfilesServiceBase.GetBySpectRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_BDPRO_SPECT index.
            </summary>
            <param name="_spectRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.BedProfilesServiceBase.GetBySpectRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_BDPRO_SPECT index.
            </summary>
            <param name="_spectRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.BedProfilesServiceBase.GetByBdproRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_BED_PROFILES index.
            </summary>
            <param name="_bdproRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.BedProfiles"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.BedProfilesServiceBase.GetByBdproRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_BED_PROFILES index.
            </summary>
            <param name="_bdproRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.BedProfiles"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.BedProfilesServiceBase.GetByBedssRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_BDPRO_BEDSS index.
            </summary>
            <param name="_bedssRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.BedProfilesServiceBase.GetByBedssRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_BDPRO_BEDSS index.
            </summary>
            <param name="_bedssRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.BedProfilesServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.BedProfiles" /> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.BedProfilesServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.BedProfiles" /> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> </returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.BedProfilesServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>BedProfiles</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.BedProfilesServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>BedProfiles</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.BedProfilesServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>BedProfiles</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.BedProfilesServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.BedProfilesServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.BedProfiles)">
            <summary>
            public virtual method that Inserts a BedProfiles object into the datasource using a transaction.
            </summary>
            <param name="entity">BedProfiles object to Insert.</param>
            <remarks>After Inserting into the datasource, the BedProfiles object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            BedProfiles entity = new BedProfiles();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	BedProfilesService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.BedProfilesServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.BedProfiles})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>BedProfiles</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>BedProfiles</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of BedProfiles.
             <code><![CDATA[
             TList<BedProfiles> list = new TList<BedProfiles>();
             BedProfiles entity = new BedProfiles();
             entity.StringProperty = "foo";
             BedProfiles entity2 = new BedProfiles();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	BedProfilesService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.BedProfilesServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.BedProfiles)">
            <summary>
            public virtual method that Updates a BedProfiles object into the datasource using a transaction.
            </summary>
            <param name="entity">BedProfiles object to Update.</param>
            <remarks>After Updateing into the datasource, the BedProfiles object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            BedProfiles entity = BedProfilesService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	BedProfilesService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.BedProfilesServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.BedProfiles})">
             <summary>
             public virtual method that Updates rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>BedProfiles</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>BedProfiles</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of BedProfiles.
             <code><![CDATA[
             TList<BedProfiles> list = new TList<BedProfiles>();
             BedProfiles entity = new BedProfiles();
             entity.StringProperty = "foo";
             BedProfiles entity2 = new BedProfiles();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	BedProfilesService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.BedProfilesServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.BedProfiles)">
            <summary>
            public virtual method that Deletes a BedProfiles object into the datasource using a transaction.
            </summary>
            <param name="entity">BedProfiles object to Delete.</param>
            <remarks>After Deleteing into the datasource, the BedProfiles object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            BedProfiles entity = BedProfilesService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	BedProfilesService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.BedProfilesServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.BedProfiles})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>BedProfiles</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>BedProfiles</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of BedProfiles.
             <code><![CDATA[
             TList<BedProfiles> list = new TList<BedProfiles>();
             BedProfiles entity = new BedProfiles();
             entity.StringProperty = "foo";
             BedProfiles entity2 = new BedProfiles();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	BedProfilesService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.BedProfilesServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.BedProfilesKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.BedProfilesServiceBase.Delete(System.Decimal)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Decimal _bdproRefno
            </summary>
            <param name="_bdproRefno">BedProfiles pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.DependantResourcesService">
            <summary>
            An component type implementation of the 'DEPENDANT_RESOURCES' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.DependantResourcesService.#ctor">
            <summary>
            Initializes a new instance of the DependantResourcesService class.
            </summary>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.DependantResourcesServiceBase">
            <summary>
             An object representation of the 'DEPENDANT_RESOURCES' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the DependantResources.cs file instead.
             All custom implementations should be done in the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.DependantResources"/> class.
             </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.DependantResourcesServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.DependantResources"/> instance .
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.DependantResourcesServiceBase.CreateDependantResources(System.Decimal,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.String,System.String,System.Nullable{System.Decimal})">
            <summary>
             A simple factory method to create a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.DependantResources"/> instance.
            </summary>
            <param name="_dpresRefno"></param>
            <param name="_resrcRefno"></param>
            <param name="_sorceRefno"></param>
            <param name="_sorceCode"></param>
            <param name="_archvFlag"></param>
            <param name="_stranRefno"></param>
            <param name="_priorPointer"></param>
            <param name="_enforceFlag"></param>
            <param name="_safeNameOperator"></param>
            <param name="_externalKey"></param>
            <param name="_ownerHeorgRefno"></param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.DependantResourcesServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.DependantResourcesServiceBase.Get(iSOFT.ANZ.PatientManagerService.Entities.DependantResourcesKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.DependantResourcesServiceBase.GetBySorceRefnoSorceCode(System.Nullable{System.Decimal},System.String)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_DPRES_SORCE index.
            </summary>
            <param name="_sorceRefno"></param>
            <param name="_sorceCode"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.DependantResourcesServiceBase.GetBySorceRefnoSorceCode(System.Nullable{System.Decimal},System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_DPRES_SORCE index.
            </summary>
            <param name="_sorceRefno"></param>
            <param name="_sorceCode"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.DependantResourcesServiceBase.GetByDpresRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_DEPENDANT_RESOURCES index.
            </summary>
            <param name="_dpresRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.DependantResources"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.DependantResourcesServiceBase.GetByDpresRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_DEPENDANT_RESOURCES index.
            </summary>
            <param name="_dpresRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.DependantResources"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.DependantResourcesServiceBase.GetByResrcRefnoSorceRefnoSorceCodeArchvFlag(System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.String)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key SAH_DEPRES_NEW index.
            </summary>
            <param name="_resrcRefno"></param>
            <param name="_sorceRefno"></param>
            <param name="_sorceCode"></param>
            <param name="_archvFlag"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.DependantResourcesServiceBase.GetByResrcRefnoSorceRefnoSorceCodeArchvFlag(System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key SAH_DEPRES_NEW index.
            </summary>
            <param name="_resrcRefno"></param>
            <param name="_sorceRefno"></param>
            <param name="_sorceCode"></param>
            <param name="_archvFlag"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.DependantResourcesServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.DependantResources" /> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.DependantResourcesServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.DependantResources" /> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> </returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.DependantResourcesServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>DependantResources</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.DependantResourcesServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>DependantResources</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.DependantResourcesServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>DependantResources</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.DependantResourcesServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.DependantResourcesServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.DependantResources)">
            <summary>
            public virtual method that Inserts a DependantResources object into the datasource using a transaction.
            </summary>
            <param name="entity">DependantResources object to Insert.</param>
            <remarks>After Inserting into the datasource, the DependantResources object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            DependantResources entity = new DependantResources();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	DependantResourcesService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.DependantResourcesServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.DependantResources})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>DependantResources</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>DependantResources</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of DependantResources.
             <code><![CDATA[
             TList<DependantResources> list = new TList<DependantResources>();
             DependantResources entity = new DependantResources();
             entity.StringProperty = "foo";
             DependantResources entity2 = new DependantResources();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	DependantResourcesService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.DependantResourcesServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.DependantResources)">
            <summary>
            public virtual method that Updates a DependantResources object into the datasource using a transaction.
            </summary>
            <param name="entity">DependantResources object to Update.</param>
            <remarks>After Updateing into the datasource, the DependantResources object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            DependantResources entity = DependantResourcesService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	DependantResourcesService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.DependantResourcesServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.DependantResources})">
             <summary>
             public virtual method that Updates rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>DependantResources</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>DependantResources</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of DependantResources.
             <code><![CDATA[
             TList<DependantResources> list = new TList<DependantResources>();
             DependantResources entity = new DependantResources();
             entity.StringProperty = "foo";
             DependantResources entity2 = new DependantResources();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	DependantResourcesService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.DependantResourcesServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.DependantResources)">
            <summary>
            public virtual method that Deletes a DependantResources object into the datasource using a transaction.
            </summary>
            <param name="entity">DependantResources object to Delete.</param>
            <remarks>After Deleteing into the datasource, the DependantResources object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            DependantResources entity = DependantResourcesService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	DependantResourcesService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.DependantResourcesServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.DependantResources})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>DependantResources</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>DependantResources</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of DependantResources.
             <code><![CDATA[
             TList<DependantResources> list = new TList<DependantResources>();
             DependantResources entity = new DependantResources();
             entity.StringProperty = "foo";
             DependantResources entity2 = new DependantResources();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	DependantResourcesService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.DependantResourcesServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.DependantResourcesKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.DependantResourcesServiceBase.Delete(System.Decimal)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Decimal _dpresRefno
            </summary>
            <param name="_dpresRefno">DependantResources pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.DiagnosisProceduresService">
            <summary>
            An component type implementation of the 'DIAGNOSIS_PROCEDURES' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.DiagnosisProceduresService.#ctor">
            <summary>
            Initializes a new instance of the DiagnosisProceduresService class.
            </summary>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.DiagnosisProceduresServiceBase">
            <summary>
             An object representation of the 'DIAGNOSIS_PROCEDURES' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the DiagnosisProcedures.cs file instead.
             All custom implementations should be done in the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.DiagnosisProcedures"/> class.
             </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.DiagnosisProceduresServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.DiagnosisProcedures"/> instance .
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.DiagnosisProceduresServiceBase.CreateDiagnosisProcedures(System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.DateTime},System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.DateTime},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.String,System.Decimal,System.Nullable{System.DateTime},System.Nullable{System.Decimal},System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.DateTime},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.String,System.String,System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.DiagnosisProcedures"/> instance.
            </summary>
            <param name="_steamRefno"></param>
            <param name="_dpclaRefno"></param>
            <param name="_prcaeRefno"></param>
            <param name="_mplevRefno"></param>
            <param name="_dountRefno"></param>
            <param name="_procaRefno"></param>
            <param name="_latrlRefno"></param>
            <param name="_patntRefno"></param>
            <param name="_fruntRefno"></param>
            <param name="_dplocRefno"></param>
            <param name="_cptypRefno"></param>
            <param name="_odpcdRefno"></param>
            <param name="_peradRefno"></param>
            <param name="_rsadmRefno"></param>
            <param name="_comments"></param>
            <param name="_analcRefno"></param>
            <param name="_sorceRefno"></param>
            <param name="_sorceCode"></param>
            <param name="_dgproDttm"></param>
            <param name="_dptypCode"></param>
            <param name="_code"></param>
            <param name="_ccsxtCode"></param>
            <param name="_suplCode"></param>
            <param name="_suplCcsxtCode"></param>
            <param name="_archvFlag"></param>
            <param name="_stranRefno"></param>
            <param name="_priorPointer"></param>
            <param name="_externalKey"></param>
            <param name="_startDttm"></param>
            <param name="_endDttm"></param>
            <param name="_duration"></param>
            <param name="_confidential"></param>
            <param name="_dosage"></param>
            <param name="_frequency"></param>
            <param name="_cancelDttm"></param>
            <param name="_parntRefno"></param>
            <param name="_rulesRefno"></param>
            <param name="_value"></param>
            <param name="_problem"></param>
            <param name="_sortOrder"></param>
            <param name="_updateDttm"></param>
            <param name="_linkDgproRefno"></param>
            <param name="_causeOfDeath"></param>
            <param name="_codAuthFlag"></param>
            <param name="_latchAuthFlag"></param>
            <param name="_description"></param>
            <param name="_action"></param>
            <param name="_alsevRefno"></param>
            <param name="_contractedProcedure"></param>
            <param name="_spectRefno"></param>
            <param name="_hospServFlag"></param>
            <param name="_maxPrice"></param>
            <param name="_minPrice"></param>
            <param name="_thebrRefno"></param>
            <param name="_icdstRefno"></param>
            <param name="_dgproEndDttm"></param>
            <param name="_ownerHeorgRefno"></param>
            <param name="_codonRefno"></param>
            <param name="_billOdpcdRefno"></param>
            <param name="_plctnRefno"></param>
            <param name="_synCode"></param>
            <param name="_antypRefno"></param>
            <param name="_manualEntry"></param>
            <param name="_prvsnFlag"></param>
            <param name="_mricFlag"></param>
            <param name="_ocoiFlag"></param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.DiagnosisProceduresServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.DiagnosisProceduresServiceBase.GetByAnalcRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_DGPRO_ANALC key.
            	CNA_DGPRO_ANALC Description: 
            </summary>
            <param name="_analcRefno"></param>
            <returns>Returns a generic collection of DiagnosisProcedures objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.DiagnosisProceduresServiceBase.GetByAnalcRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_DGPRO_ANALC key.
            	CNA_DGPRO_ANALC Description: 
            </summary>
            <param name="_analcRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>DiagnosisProcedures</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.DiagnosisProceduresServiceBase.GetByCptypRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_DGPRO_CPTYP key.
            	CNA_DGPRO_CPTYP Description: 
            </summary>
            <param name="_cptypRefno"></param>
            <returns>Returns a generic collection of DiagnosisProcedures objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.DiagnosisProceduresServiceBase.GetByCptypRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_DGPRO_CPTYP key.
            	CNA_DGPRO_CPTYP Description: 
            </summary>
            <param name="_cptypRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>DiagnosisProcedures</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.DiagnosisProceduresServiceBase.GetByDountRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_DGPRO_DOUNT key.
            	CNA_DGPRO_DOUNT Description: 
            </summary>
            <param name="_dountRefno"></param>
            <returns>Returns a generic collection of DiagnosisProcedures objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.DiagnosisProceduresServiceBase.GetByDountRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_DGPRO_DOUNT key.
            	CNA_DGPRO_DOUNT Description: 
            </summary>
            <param name="_dountRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>DiagnosisProcedures</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.DiagnosisProceduresServiceBase.GetByDpclaRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_DGPRO_DPCLA key.
            	CNA_DGPRO_DPCLA Description: 
            </summary>
            <param name="_dpclaRefno"></param>
            <returns>Returns a generic collection of DiagnosisProcedures objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.DiagnosisProceduresServiceBase.GetByDpclaRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_DGPRO_DPCLA key.
            	CNA_DGPRO_DPCLA Description: 
            </summary>
            <param name="_dpclaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>DiagnosisProcedures</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.DiagnosisProceduresServiceBase.GetByDplocRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_DGPRO_DPLOC key.
            	CNA_DGPRO_DPLOC Description: 
            </summary>
            <param name="_dplocRefno"></param>
            <returns>Returns a generic collection of DiagnosisProcedures objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.DiagnosisProceduresServiceBase.GetByDplocRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_DGPRO_DPLOC key.
            	CNA_DGPRO_DPLOC Description: 
            </summary>
            <param name="_dplocRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>DiagnosisProcedures</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.DiagnosisProceduresServiceBase.GetByFruntRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_DGPRO_FRUNT key.
            	CNA_DGPRO_FRUNT Description: 
            </summary>
            <param name="_fruntRefno"></param>
            <returns>Returns a generic collection of DiagnosisProcedures objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.DiagnosisProceduresServiceBase.GetByFruntRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_DGPRO_FRUNT key.
            	CNA_DGPRO_FRUNT Description: 
            </summary>
            <param name="_fruntRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>DiagnosisProcedures</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.DiagnosisProceduresServiceBase.GetByLatrlRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_DGPRO_LATRL key.
            	CNA_DGPRO_LATRL Description: 
            </summary>
            <param name="_latrlRefno"></param>
            <returns>Returns a generic collection of DiagnosisProcedures objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.DiagnosisProceduresServiceBase.GetByLatrlRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_DGPRO_LATRL key.
            	CNA_DGPRO_LATRL Description: 
            </summary>
            <param name="_latrlRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>DiagnosisProcedures</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.DiagnosisProceduresServiceBase.GetByMplevRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_DGPRO_MPLEV key.
            	CNA_DGPRO_MPLEV Description: 
            </summary>
            <param name="_mplevRefno"></param>
            <returns>Returns a generic collection of DiagnosisProcedures objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.DiagnosisProceduresServiceBase.GetByMplevRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_DGPRO_MPLEV key.
            	CNA_DGPRO_MPLEV Description: 
            </summary>
            <param name="_mplevRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>DiagnosisProcedures</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.DiagnosisProceduresServiceBase.GetByPeradRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_DGPRO_PERAD key.
            	CNA_DGPRO_PERAD Description: 
            </summary>
            <param name="_peradRefno"></param>
            <returns>Returns a generic collection of DiagnosisProcedures objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.DiagnosisProceduresServiceBase.GetByPeradRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_DGPRO_PERAD key.
            	CNA_DGPRO_PERAD Description: 
            </summary>
            <param name="_peradRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>DiagnosisProcedures</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.DiagnosisProceduresServiceBase.GetByRsadmRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_DGPRO_RSADM key.
            	CNA_DGPRO_RSADM Description: 
            </summary>
            <param name="_rsadmRefno"></param>
            <returns>Returns a generic collection of DiagnosisProcedures objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.DiagnosisProceduresServiceBase.GetByRsadmRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_DGPRO_RSADM key.
            	CNA_DGPRO_RSADM Description: 
            </summary>
            <param name="_rsadmRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>DiagnosisProcedures</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.DiagnosisProceduresServiceBase.Get(iSOFT.ANZ.PatientManagerService.Entities.DiagnosisProceduresKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.DiagnosisProceduresServiceBase.GetBySuplCode(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_DGPRO_SUPL index.
            </summary>
            <param name="_suplCode"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.DiagnosisProceduresServiceBase.GetBySuplCode(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_DGPRO_SUPL index.
            </summary>
            <param name="_suplCode"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.DiagnosisProceduresServiceBase.GetByCodeCcsxtCode(System.String,System.String)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_DGPRO_CODE_CCSXT index.
            </summary>
            <param name="_code"></param>
            <param name="_ccsxtCode"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.DiagnosisProceduresServiceBase.GetByCodeCcsxtCode(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_DGPRO_CODE_CCSXT index.
            </summary>
            <param name="_code"></param>
            <param name="_ccsxtCode"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.DiagnosisProceduresServiceBase.GetByPrcaeRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_DGPRO_PRCAE index.
            </summary>
            <param name="_prcaeRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.DiagnosisProceduresServiceBase.GetByPrcaeRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_DGPRO_PRCAE index.
            </summary>
            <param name="_prcaeRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.DiagnosisProceduresServiceBase.GetByProcaRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_DGPRO_PROCA index.
            </summary>
            <param name="_procaRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.DiagnosisProceduresServiceBase.GetByProcaRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_DGPRO_PROCA index.
            </summary>
            <param name="_procaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.DiagnosisProceduresServiceBase.GetByParntRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_DGPRO_PARNT index.
            </summary>
            <param name="_parntRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.DiagnosisProceduresServiceBase.GetByParntRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_DGPRO_PARNT index.
            </summary>
            <param name="_parntRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.DiagnosisProceduresServiceBase.GetByRulesRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_DGPRO_RULES index.
            </summary>
            <param name="_rulesRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.DiagnosisProceduresServiceBase.GetByRulesRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_DGPRO_RULES index.
            </summary>
            <param name="_rulesRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.DiagnosisProceduresServiceBase.GetByLinkDgproRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_DGPRO_LINK_DGPRO index.
            </summary>
            <param name="_linkDgproRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.DiagnosisProceduresServiceBase.GetByLinkDgproRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_DGPRO_LINK_DGPRO index.
            </summary>
            <param name="_linkDgproRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.DiagnosisProceduresServiceBase.GetBySteamRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_DGPRO_STEAM index.
            </summary>
            <param name="_steamRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.DiagnosisProceduresServiceBase.GetBySteamRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_DGPRO_STEAM index.
            </summary>
            <param name="_steamRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.DiagnosisProceduresServiceBase.GetBySpectRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_DGPRO_SPECT index.
            </summary>
            <param name="_spectRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.DiagnosisProceduresServiceBase.GetBySpectRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_DGPRO_SPECT index.
            </summary>
            <param name="_spectRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.DiagnosisProceduresServiceBase.GetByOdpcdRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_DGPRO_ODPCD index.
            </summary>
            <param name="_odpcdRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.DiagnosisProceduresServiceBase.GetByOdpcdRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_DGPRO_ODPCD index.
            </summary>
            <param name="_odpcdRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.DiagnosisProceduresServiceBase.GetByPatntRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_DGPRO_PATNT index.
            </summary>
            <param name="_patntRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.DiagnosisProceduresServiceBase.GetByPatntRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_DGPRO_PATNT index.
            </summary>
            <param name="_patntRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.DiagnosisProceduresServiceBase.GetBySorceRefnoSorceCode(System.Nullable{System.Decimal},System.String)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_DGPRO_SORCE index.
            </summary>
            <param name="_sorceRefno"></param>
            <param name="_sorceCode"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.DiagnosisProceduresServiceBase.GetBySorceRefnoSorceCode(System.Nullable{System.Decimal},System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_DGPRO_SORCE index.
            </summary>
            <param name="_sorceRefno"></param>
            <param name="_sorceCode"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.DiagnosisProceduresServiceBase.GetByDgproRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_DIAGNOSIS_PROCEDURES index.
            </summary>
            <param name="_dgproRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.DiagnosisProcedures"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.DiagnosisProceduresServiceBase.GetByDgproRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_DIAGNOSIS_PROCEDURES index.
            </summary>
            <param name="_dgproRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.DiagnosisProcedures"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.DiagnosisProceduresServiceBase.GetBySorceCodeCcsxtCode(System.String,System.String)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key SAH_DGPRO_SCODE_CCSXT index.
            </summary>
            <param name="_sorceCode"></param>
            <param name="_ccsxtCode"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.DiagnosisProceduresServiceBase.GetBySorceCodeCcsxtCode(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key SAH_DGPRO_SCODE_CCSXT index.
            </summary>
            <param name="_sorceCode"></param>
            <param name="_ccsxtCode"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.DiagnosisProceduresServiceBase.GetBySorceCode(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key SAH_DGPRO_SORCE index.
            </summary>
            <param name="_sorceCode"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.DiagnosisProceduresServiceBase.GetBySorceCode(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key SAH_DGPRO_SORCE index.
            </summary>
            <param name="_sorceCode"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.DiagnosisProceduresServiceBase.GetByDptypCode(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_DGPRO_DPTYP index.
            </summary>
            <param name="_dptypCode"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.DiagnosisProceduresServiceBase.GetByDptypCode(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_DGPRO_DPTYP index.
            </summary>
            <param name="_dptypCode"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.DiagnosisProceduresServiceBase.GetByPatntRefnoSorceCode(System.Nullable{System.Decimal},System.String)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_DGPRO_PATNT index.
            </summary>
            <param name="_patntRefno"></param>
            <param name="_sorceCode"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.DiagnosisProceduresServiceBase.GetByPatntRefnoSorceCode(System.Nullable{System.Decimal},System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_DGPRO_PATNT index.
            </summary>
            <param name="_patntRefno"></param>
            <param name="_sorceCode"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.DiagnosisProceduresServiceBase.GetByIcdstRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_DGPRO_ICDST index.
            </summary>
            <param name="_icdstRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.DiagnosisProceduresServiceBase.GetByIcdstRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_DGPRO_ICDST index.
            </summary>
            <param name="_icdstRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.DiagnosisProceduresServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.DiagnosisProcedures" /> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.DiagnosisProceduresServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.DiagnosisProcedures" /> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> </returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.DiagnosisProceduresServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>DiagnosisProcedures</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.DiagnosisProceduresServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>DiagnosisProcedures</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.DiagnosisProceduresServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>DiagnosisProcedures</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.DiagnosisProceduresServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.DiagnosisProceduresServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.DiagnosisProcedures)">
            <summary>
            public virtual method that Inserts a DiagnosisProcedures object into the datasource using a transaction.
            </summary>
            <param name="entity">DiagnosisProcedures object to Insert.</param>
            <remarks>After Inserting into the datasource, the DiagnosisProcedures object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            DiagnosisProcedures entity = new DiagnosisProcedures();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	DiagnosisProceduresService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.DiagnosisProceduresServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.DiagnosisProcedures})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>DiagnosisProcedures</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>DiagnosisProcedures</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of DiagnosisProcedures.
             <code><![CDATA[
             TList<DiagnosisProcedures> list = new TList<DiagnosisProcedures>();
             DiagnosisProcedures entity = new DiagnosisProcedures();
             entity.StringProperty = "foo";
             DiagnosisProcedures entity2 = new DiagnosisProcedures();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	DiagnosisProceduresService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.DiagnosisProceduresServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.DiagnosisProcedures)">
            <summary>
            public virtual method that Updates a DiagnosisProcedures object into the datasource using a transaction.
            </summary>
            <param name="entity">DiagnosisProcedures object to Update.</param>
            <remarks>After Updateing into the datasource, the DiagnosisProcedures object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            DiagnosisProcedures entity = DiagnosisProceduresService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	DiagnosisProceduresService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.DiagnosisProceduresServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.DiagnosisProcedures})">
             <summary>
             public virtual method that Updates rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>DiagnosisProcedures</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>DiagnosisProcedures</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of DiagnosisProcedures.
             <code><![CDATA[
             TList<DiagnosisProcedures> list = new TList<DiagnosisProcedures>();
             DiagnosisProcedures entity = new DiagnosisProcedures();
             entity.StringProperty = "foo";
             DiagnosisProcedures entity2 = new DiagnosisProcedures();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	DiagnosisProceduresService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.DiagnosisProceduresServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.DiagnosisProcedures)">
            <summary>
            public virtual method that Deletes a DiagnosisProcedures object into the datasource using a transaction.
            </summary>
            <param name="entity">DiagnosisProcedures object to Delete.</param>
            <remarks>After Deleteing into the datasource, the DiagnosisProcedures object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            DiagnosisProcedures entity = DiagnosisProceduresService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	DiagnosisProceduresService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.DiagnosisProceduresServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.DiagnosisProcedures})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>DiagnosisProcedures</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>DiagnosisProcedures</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of DiagnosisProcedures.
             <code><![CDATA[
             TList<DiagnosisProcedures> list = new TList<DiagnosisProcedures>();
             DiagnosisProcedures entity = new DiagnosisProcedures();
             entity.StringProperty = "foo";
             DiagnosisProcedures entity2 = new DiagnosisProcedures();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	DiagnosisProceduresService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.DiagnosisProceduresServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.DiagnosisProceduresKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.DiagnosisProceduresServiceBase.Delete(System.Decimal)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Decimal _dgproRefno
            </summary>
            <param name="_dgproRefno">DiagnosisProcedures pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.AeStaysService">
            <summary>
            An component type implementation of the 'AE_STAYS' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeStaysService.#ctor">
            <summary>
            Initializes a new instance of the AeStaysService class.
            </summary>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.AeStaysServiceBase">
            <summary>
             An object representation of the 'AE_STAYS' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the AeStays.cs file instead.
             All custom implementations should be done in the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.AeStays"/> class.
             </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeStaysServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.AeStays"/> instance .
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeStaysServiceBase.CreateAeStays(System.Decimal,System.Decimal,System.Decimal,System.Nullable{System.Decimal},System.DateTime,System.Nullable{System.DateTime},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{System.DateTime},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.DateTime})">
            <summary>
             A simple factory method to create a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.AeStays"/> instance.
            </summary>
            <param name="_aestyRefno"></param>
            <param name="_aeattRefno"></param>
            <param name="_spontRefno"></param>
            <param name="_procaRefno"></param>
            <param name="_startDttm"></param>
            <param name="_endDttm"></param>
            <param name="_priorPointer"></param>
            <param name="_stranRefno"></param>
            <param name="_externalKey"></param>
            <param name="_archvFlag"></param>
            <param name="_seenDttm"></param>
            <param name="_spectRefno"></param>
            <param name="_temporaryFlag"></param>
            <param name="_tempSpontRefno"></param>
            <param name="_spectXferDttm"></param>
            <param name="_ownerHeorgRefno"></param>
            <param name="_patstRefno"></param>
            <param name="_primProcaRefno"></param>
            <param name="_primDttm"></param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.AeStaysServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeStaysServiceBase.Get(iSOFT.ANZ.PatientManagerService.Entities.AeStaysKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeStaysServiceBase.GetByProcaRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_AESTY_PROCA index.
            </summary>
            <param name="_procaRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeStaysServiceBase.GetByProcaRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_AESTY_PROCA index.
            </summary>
            <param name="_procaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeStaysServiceBase.GetBySpectRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_AESTY_SPECT index.
            </summary>
            <param name="_spectRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeStaysServiceBase.GetBySpectRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_AESTY_SPECT index.
            </summary>
            <param name="_spectRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeStaysServiceBase.GetByTempSpontRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_AESTY_TEMP_SPONT index.
            </summary>
            <param name="_tempSpontRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeStaysServiceBase.GetByTempSpontRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_AESTY_TEMP_SPONT index.
            </summary>
            <param name="_tempSpontRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeStaysServiceBase.GetByAeattRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_AESTY_AEATT index.
            </summary>
            <param name="_aeattRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeStaysServiceBase.GetByAeattRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_AESTY_AEATT index.
            </summary>
            <param name="_aeattRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeStaysServiceBase.GetBySpontRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_AESTY_SPONT index.
            </summary>
            <param name="_spontRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeStaysServiceBase.GetBySpontRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_AESTY_SPONT index.
            </summary>
            <param name="_spontRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeStaysServiceBase.GetByAestyRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_AE_STAYS index.
            </summary>
            <param name="_aestyRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.AeStays"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeStaysServiceBase.GetByAestyRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_AE_STAYS index.
            </summary>
            <param name="_aestyRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.AeStays"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeStaysServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.AeStays" /> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeStaysServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.AeStays" /> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> </returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeStaysServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>AeStays</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeStaysServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>AeStays</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeStaysServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>AeStays</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeStaysServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeStaysServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.AeStays)">
            <summary>
            public virtual method that Inserts a AeStays object into the datasource using a transaction.
            </summary>
            <param name="entity">AeStays object to Insert.</param>
            <remarks>After Inserting into the datasource, the AeStays object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            AeStays entity = new AeStays();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	AeStaysService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeStaysServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.AeStays})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>AeStays</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>AeStays</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of AeStays.
             <code><![CDATA[
             TList<AeStays> list = new TList<AeStays>();
             AeStays entity = new AeStays();
             entity.StringProperty = "foo";
             AeStays entity2 = new AeStays();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AeStaysService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeStaysServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.AeStays)">
            <summary>
            public virtual method that Updates a AeStays object into the datasource using a transaction.
            </summary>
            <param name="entity">AeStays object to Update.</param>
            <remarks>After Updateing into the datasource, the AeStays object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            AeStays entity = AeStaysService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	AeStaysService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeStaysServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.AeStays})">
             <summary>
             public virtual method that Updates rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>AeStays</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>AeStays</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of AeStays.
             <code><![CDATA[
             TList<AeStays> list = new TList<AeStays>();
             AeStays entity = new AeStays();
             entity.StringProperty = "foo";
             AeStays entity2 = new AeStays();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AeStaysService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeStaysServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.AeStays)">
            <summary>
            public virtual method that Deletes a AeStays object into the datasource using a transaction.
            </summary>
            <param name="entity">AeStays object to Delete.</param>
            <remarks>After Deleteing into the datasource, the AeStays object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            AeStays entity = AeStaysService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	AeStaysService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeStaysServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.AeStays})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>AeStays</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>AeStays</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of AeStays.
             <code><![CDATA[
             TList<AeStays> list = new TList<AeStays>();
             AeStays entity = new AeStays();
             entity.StringProperty = "foo";
             AeStays entity2 = new AeStays();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AeStaysService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeStaysServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.AeStaysKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeStaysServiceBase.Delete(System.Decimal)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Decimal _aestyRefno
            </summary>
            <param name="_aestyRefno">AeStays pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.AcuteListService">
            <summary>
            An component type implementation of the 'ACUTE_LIST' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AcuteListService.#ctor">
            <summary>
            Initializes a new instance of the AcuteListService class.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AcuteListService.GetEventsInTimePeriod(System.Decimal,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.DateTime,System.DateTime,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key HSS_BEDST_START index.
            </summary>
            <param name="_startDttm"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.AcuteListServiceBase">
            <summary>
             An object representation of the 'ACUTE_LIST' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the AcuteList.cs file instead.
             All custom implementations should be done in the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.AcuteList"/> class.
             </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AcuteListServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.AcuteList"/> instance .
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AcuteListServiceBase.CreateAcuteList(System.Decimal,System.Decimal,System.Nullable{System.Decimal},System.Decimal,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Decimal,System.DateTime,System.DateTime,System.Nullable{System.DateTime},System.DateTime,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal})">
            <summary>
             A simple factory method to create a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.AcuteList"/> instance.
            </summary>
            <param name="_aclstRefno"></param>
            <param name="_patntRefno"></param>
            <param name="_schdlRefno"></param>
            <param name="_spectRefno"></param>
            <param name="_procaRefno"></param>
            <param name="_acurgRefno"></param>
            <param name="_acanaRefno"></param>
            <param name="_acremRefno"></param>
            <param name="_description"></param>
            <param name="_estTheatTime"></param>
            <param name="_onlistDttm"></param>
            <param name="_nilByMDttm"></param>
            <param name="_closedDttm"></param>
            <param name="_targetOpDttm"></param>
            <param name="_archvFlag"></param>
            <param name="_stranRefno"></param>
            <param name="_priorPointer"></param>
            <param name="_externalKey"></param>
            <param name="_ownerHeorgRefno"></param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.AcuteListServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AcuteListServiceBase.Get(iSOFT.ANZ.PatientManagerService.Entities.AcuteListKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AcuteListServiceBase.GetByPatntRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_ACLST_PATNT index.
            </summary>
            <param name="_patntRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AcuteListServiceBase.GetByPatntRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_ACLST_PATNT index.
            </summary>
            <param name="_patntRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AcuteListServiceBase.GetBySchdlRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_ACLST_SCHDL index.
            </summary>
            <param name="_schdlRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AcuteListServiceBase.GetBySchdlRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_ACLST_SCHDL index.
            </summary>
            <param name="_schdlRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AcuteListServiceBase.GetBySpectRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_ACLST_SPECT index.
            </summary>
            <param name="_spectRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AcuteListServiceBase.GetBySpectRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_ACLST_SPECT index.
            </summary>
            <param name="_spectRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AcuteListServiceBase.GetByProcaRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_ACLST_PROCA index.
            </summary>
            <param name="_procaRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AcuteListServiceBase.GetByProcaRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_ACLST_PROCA index.
            </summary>
            <param name="_procaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AcuteListServiceBase.GetByAclstRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_ACUTE_LIST index.
            </summary>
            <param name="_aclstRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.AcuteList"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AcuteListServiceBase.GetByAclstRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_ACUTE_LIST index.
            </summary>
            <param name="_aclstRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.AcuteList"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AcuteListServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.AcuteList" /> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AcuteListServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.AcuteList" /> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> </returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AcuteListServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>AcuteList</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AcuteListServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>AcuteList</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AcuteListServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>AcuteList</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AcuteListServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AcuteListServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.AcuteList)">
            <summary>
            public virtual method that Inserts a AcuteList object into the datasource using a transaction.
            </summary>
            <param name="entity">AcuteList object to Insert.</param>
            <remarks>After Inserting into the datasource, the AcuteList object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            AcuteList entity = new AcuteList();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	AcuteListService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AcuteListServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.AcuteList})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>AcuteList</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>AcuteList</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of AcuteList.
             <code><![CDATA[
             TList<AcuteList> list = new TList<AcuteList>();
             AcuteList entity = new AcuteList();
             entity.StringProperty = "foo";
             AcuteList entity2 = new AcuteList();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AcuteListService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AcuteListServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.AcuteList)">
            <summary>
            public virtual method that Updates a AcuteList object into the datasource using a transaction.
            </summary>
            <param name="entity">AcuteList object to Update.</param>
            <remarks>After Updateing into the datasource, the AcuteList object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            AcuteList entity = AcuteListService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	AcuteListService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AcuteListServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.AcuteList})">
             <summary>
             public virtual method that Updates rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>AcuteList</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>AcuteList</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of AcuteList.
             <code><![CDATA[
             TList<AcuteList> list = new TList<AcuteList>();
             AcuteList entity = new AcuteList();
             entity.StringProperty = "foo";
             AcuteList entity2 = new AcuteList();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AcuteListService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AcuteListServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.AcuteList)">
            <summary>
            public virtual method that Deletes a AcuteList object into the datasource using a transaction.
            </summary>
            <param name="entity">AcuteList object to Delete.</param>
            <remarks>After Deleteing into the datasource, the AcuteList object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            AcuteList entity = AcuteListService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	AcuteListService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AcuteListServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.AcuteList})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>AcuteList</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>AcuteList</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of AcuteList.
             <code><![CDATA[
             TList<AcuteList> list = new TList<AcuteList>();
             AcuteList entity = new AcuteList();
             entity.StringProperty = "foo";
             AcuteList entity2 = new AcuteList();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AcuteListService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AcuteListServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.AcuteListKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AcuteListServiceBase.Delete(System.Decimal)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Decimal _aclstRefno
            </summary>
            <param name="_aclstRefno">AcuteList pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.AeHistoriesService">
            <summary>
            An component type implementation of the 'AE_HISTORIES' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeHistoriesService.#ctor">
            <summary>
            Initializes a new instance of the AeHistoriesService class.
            </summary>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.AeHistoriesServiceBase">
            <summary>
             An object representation of the 'AE_HISTORIES' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the AeHistories.cs file instead.
             All custom implementations should be done in the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.AeHistories"/> class.
             </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeHistoriesServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.AeHistories"/> instance .
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeHistoriesServiceBase.CreateAeHistories(System.Decimal,System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Decimal},System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.AeHistories"/> instance.
            </summary>
            <param name="_aeattRefno"></param>
            <param name="_xactyRefno"></param>
            <param name="_sorceCode"></param>
            <param name="_sorceRefno"></param>
            <param name="_description"></param>
            <param name="_activityDttm"></param>
            <param name="_lodgedStartDttm"></param>
            <param name="_intendProcaRefno"></param>
            <param name="_intendSpectRefno"></param>
            <param name="_intendSpontRefno"></param>
            <param name="_intendBeddsRefno"></param>
            <param name="_intendBdcatRefno"></param>
            <param name="_lstatRefno"></param>
            <param name="_ownerHeorgRefno"></param>
            <param name="_archvFlag"></param>
            <param name="_stranRefno"></param>
            <param name="_externalKey"></param>
            <param name="_secProcaRefno"></param>
            <param name="_secSpectRefno"></param>
            <param name="_lodgeAckDttm"></param>
            <param name="_lodgeAllocDttm"></param>
            <param name="_lodgeCanDttm"></param>
            <param name="_edcanRefno"></param>
            <param name="_canComment"></param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.AeHistoriesServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeHistoriesServiceBase.Get(iSOFT.ANZ.PatientManagerService.Entities.AeHistoriesKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeHistoriesServiceBase.GetByAeattRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_AEHST_AEATT index.
            </summary>
            <param name="_aeattRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeHistoriesServiceBase.GetByAeattRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_AEHST_AEATT index.
            </summary>
            <param name="_aeattRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeHistoriesServiceBase.GetByAehstRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_AE_HISTORIES index.
            </summary>
            <param name="_aehstRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.AeHistories"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeHistoriesServiceBase.GetByAehstRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_AE_HISTORIES index.
            </summary>
            <param name="_aehstRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.AeHistories"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeHistoriesServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.AeHistories" /> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeHistoriesServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.AeHistories" /> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> </returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeHistoriesServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>AeHistories</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeHistoriesServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>AeHistories</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeHistoriesServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>AeHistories</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeHistoriesServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeHistoriesServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.AeHistories)">
            <summary>
            public virtual method that Inserts a AeHistories object into the datasource using a transaction.
            </summary>
            <param name="entity">AeHistories object to Insert.</param>
            <remarks>After Inserting into the datasource, the AeHistories object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            AeHistories entity = new AeHistories();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	AeHistoriesService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeHistoriesServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.AeHistories})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>AeHistories</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>AeHistories</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of AeHistories.
             <code><![CDATA[
             TList<AeHistories> list = new TList<AeHistories>();
             AeHistories entity = new AeHistories();
             entity.StringProperty = "foo";
             AeHistories entity2 = new AeHistories();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AeHistoriesService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeHistoriesServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.AeHistories)">
            <summary>
            public virtual method that Updates a AeHistories object into the datasource using a transaction.
            </summary>
            <param name="entity">AeHistories object to Update.</param>
            <remarks>After Updateing into the datasource, the AeHistories object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            AeHistories entity = AeHistoriesService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	AeHistoriesService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeHistoriesServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.AeHistories})">
             <summary>
             public virtual method that Updates rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>AeHistories</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>AeHistories</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of AeHistories.
             <code><![CDATA[
             TList<AeHistories> list = new TList<AeHistories>();
             AeHistories entity = new AeHistories();
             entity.StringProperty = "foo";
             AeHistories entity2 = new AeHistories();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AeHistoriesService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeHistoriesServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.AeHistories)">
            <summary>
            public virtual method that Deletes a AeHistories object into the datasource using a transaction.
            </summary>
            <param name="entity">AeHistories object to Delete.</param>
            <remarks>After Deleteing into the datasource, the AeHistories object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            AeHistories entity = AeHistoriesService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	AeHistoriesService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeHistoriesServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.AeHistories})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>AeHistories</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>AeHistories</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of AeHistories.
             <code><![CDATA[
             TList<AeHistories> list = new TList<AeHistories>();
             AeHistories entity = new AeHistories();
             entity.StringProperty = "foo";
             AeHistories entity2 = new AeHistories();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AeHistoriesService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeHistoriesServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.AeHistoriesKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeHistoriesServiceBase.Delete(System.Decimal)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Decimal _aehstRefno
            </summary>
            <param name="_aehstRefno">AeHistories pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.AddressesService">
            <summary>
            An component type implementation of the 'ADDRESSES' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AddressesService.#ctor">
            <summary>
            Initializes a new instance of the AddressesService class.
            </summary>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.AddressesServiceBase">
            <summary>
             An object representation of the 'ADDRESSES' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Addresses.cs file instead.
             All custom implementations should be done in the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Addresses"/> class.
             </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AddressesServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Addresses"/> instance .
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AddressesServiceBase.CreateAddresses(System.Nullable{System.Decimal},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.DateTime,System.Nullable{System.DateTime},System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.DateTime},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Addresses"/> instance.
            </summary>
            <param name="_cntryRefno"></param>
            <param name="_adtypCode"></param>
            <param name="_line1"></param>
            <param name="_line2"></param>
            <param name="_line3"></param>
            <param name="_line4"></param>
            <param name="_pcode"></param>
            <param name="_locatCode"></param>
            <param name="_hdistCode"></param>
            <param name="_electCode"></param>
            <param name="_county"></param>
            <param name="_startDttm"></param>
            <param name="_endDttm"></param>
            <param name="_archvFlag"></param>
            <param name="_stranRefno"></param>
            <param name="_priorPointer"></param>
            <param name="_externalKey"></param>
            <param name="_countOtcodRefno"></param>
            <param name="_commuOtcodRefno"></param>
            <param name="_parshOtcodRefno"></param>
            <param name="_puareOtcodRefno"></param>
            <param name="_pcareOtcodRefno"></param>
            <param name="_resRegDttm"></param>
            <param name="_tlandRefno"></param>
            <param name="_mpiasRefno"></param>
            <param name="_suburb"></param>
            <param name="_stateCode"></param>
            <param name="_pcgCode"></param>
            <param name="_ownerHeorgRefno"></param>
            <param name="_teamaRefno"></param>
            <param name="_cmmcaRefno"></param>
            <param name="_cmmscRefno"></param>
            <param name="_delPointId"></param>
            <param name="_qasBarcode"></param>
            <param name="_synCode"></param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.AddressesServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AddressesServiceBase.GetByCntryRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_ADDSS_CNTRY key.
            	CNA_ADDSS_CNTRY Description: 
            </summary>
            <param name="_cntryRefno"></param>
            <returns>Returns a generic collection of Addresses objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AddressesServiceBase.GetByCntryRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_ADDSS_CNTRY key.
            	CNA_ADDSS_CNTRY Description: 
            </summary>
            <param name="_cntryRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>Addresses</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AddressesServiceBase.Get(iSOFT.ANZ.PatientManagerService.Entities.AddressesKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AddressesServiceBase.GetByHdistCode(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_ADDSS_HDIST index.
            </summary>
            <param name="_hdistCode"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AddressesServiceBase.GetByHdistCode(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_ADDSS_HDIST index.
            </summary>
            <param name="_hdistCode"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AddressesServiceBase.GetByPcode(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_ADDSS_PCODE index.
            </summary>
            <param name="_pcode"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AddressesServiceBase.GetByPcode(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_ADDSS_PCODE index.
            </summary>
            <param name="_pcode"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AddressesServiceBase.GetByCountOtcodRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_ADDSS_COUNT_OTCOD index.
            </summary>
            <param name="_countOtcodRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AddressesServiceBase.GetByCountOtcodRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_ADDSS_COUNT_OTCOD index.
            </summary>
            <param name="_countOtcodRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AddressesServiceBase.GetByCommuOtcodRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_ADDSS_COMMU_OTCOD index.
            </summary>
            <param name="_commuOtcodRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AddressesServiceBase.GetByCommuOtcodRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_ADDSS_COMMU_OTCOD index.
            </summary>
            <param name="_commuOtcodRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AddressesServiceBase.GetByParshOtcodRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_ADDSS_PARSH_OTCOD index.
            </summary>
            <param name="_parshOtcodRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AddressesServiceBase.GetByParshOtcodRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_ADDSS_PARSH_OTCOD index.
            </summary>
            <param name="_parshOtcodRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AddressesServiceBase.GetByPuareOtcodRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_ADDSS_PUARE_OTCOD index.
            </summary>
            <param name="_puareOtcodRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AddressesServiceBase.GetByPuareOtcodRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_ADDSS_PUARE_OTCOD index.
            </summary>
            <param name="_puareOtcodRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AddressesServiceBase.GetByPcareOtcodRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_ADDSS_PCARE_OTCOD index.
            </summary>
            <param name="_pcareOtcodRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AddressesServiceBase.GetByPcareOtcodRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_ADDSS_PCARE_OTCOD index.
            </summary>
            <param name="_pcareOtcodRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AddressesServiceBase.GetByAddssRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_ADDRESSES index.
            </summary>
            <param name="_addssRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Addresses"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AddressesServiceBase.GetByAddssRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_ADDRESSES index.
            </summary>
            <param name="_addssRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Addresses"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AddressesServiceBase.GetByLine1PcodeAdtypCode(System.String,System.String,System.String)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_ADDRESSES index.
            </summary>
            <param name="_line1"></param>
            <param name="_pcode"></param>
            <param name="_adtypCode"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AddressesServiceBase.GetByLine1PcodeAdtypCode(System.String,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_ADDRESSES index.
            </summary>
            <param name="_line1"></param>
            <param name="_pcode"></param>
            <param name="_adtypCode"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AddressesServiceBase.GetByAdtypCodePcode(System.String,System.String)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CLU_ADDSS_ADTYP_PCODE index.
            </summary>
            <param name="_adtypCode"></param>
            <param name="_pcode"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AddressesServiceBase.GetByAdtypCodePcode(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CLU_ADDSS_ADTYP_PCODE index.
            </summary>
            <param name="_adtypCode"></param>
            <param name="_pcode"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AddressesServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Addresses" /> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AddressesServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Addresses" /> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> </returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AddressesServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Addresses</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AddressesServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Addresses</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AddressesServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Addresses</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AddressesServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AddressesServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.Addresses)">
            <summary>
            public virtual method that Inserts a Addresses object into the datasource using a transaction.
            </summary>
            <param name="entity">Addresses object to Insert.</param>
            <remarks>After Inserting into the datasource, the Addresses object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Addresses entity = new Addresses();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	AddressesService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AddressesServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.Addresses})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>Addresses</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Addresses</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Addresses.
             <code><![CDATA[
             TList<Addresses> list = new TList<Addresses>();
             Addresses entity = new Addresses();
             entity.StringProperty = "foo";
             Addresses entity2 = new Addresses();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AddressesService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AddressesServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.Addresses)">
            <summary>
            public virtual method that Updates a Addresses object into the datasource using a transaction.
            </summary>
            <param name="entity">Addresses object to Update.</param>
            <remarks>After Updateing into the datasource, the Addresses object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Addresses entity = AddressesService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	AddressesService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AddressesServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.Addresses})">
             <summary>
             public virtual method that Updates rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>Addresses</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Addresses</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Addresses.
             <code><![CDATA[
             TList<Addresses> list = new TList<Addresses>();
             Addresses entity = new Addresses();
             entity.StringProperty = "foo";
             Addresses entity2 = new Addresses();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AddressesService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AddressesServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.Addresses)">
            <summary>
            public virtual method that Deletes a Addresses object into the datasource using a transaction.
            </summary>
            <param name="entity">Addresses object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Addresses object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Addresses entity = AddressesService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	AddressesService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AddressesServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.Addresses})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>Addresses</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Addresses</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Addresses.
             <code><![CDATA[
             TList<Addresses> list = new TList<Addresses>();
             Addresses entity = new Addresses();
             entity.StringProperty = "foo";
             Addresses entity2 = new Addresses();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AddressesService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AddressesServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.AddressesKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AddressesServiceBase.Delete(System.Decimal)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Decimal _addssRefno
            </summary>
            <param name="_addssRefno">Addresses pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.AddressRolesService">
            <summary>
            An component type implementation of the 'ADDRESS_ROLES' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AddressRolesService.#ctor">
            <summary>
            Initializes a new instance of the AddressRolesService class.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AddressRolesService.GetPostlByPatntRotyp(System.Decimal,System.String)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the index.
            </summary>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.AddressRolesServiceBase">
            <summary>
             An object representation of the 'ADDRESS_ROLES' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the AddressRoles.cs file instead.
             All custom implementations should be done in the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.AddressRoles"/> class.
             </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AddressRolesServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.AddressRoles"/> instance .
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AddressRolesServiceBase.CreateAddressRoles(System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Decimal,System.String,System.String,System.DateTime,System.Nullable{System.DateTime},System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
            <summary>
             A simple factory method to create a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.AddressRoles"/> instance.
            </summary>
            <param name="_procaRefno"></param>
            <param name="_homelRefno"></param>
            <param name="_patntRefno"></param>
            <param name="_percaRefno"></param>
            <param name="_heorgRefno"></param>
            <param name="_addssRefno"></param>
            <param name="_rotypCode"></param>
            <param name="_correspondence"></param>
            <param name="_startDttm"></param>
            <param name="_endDttm"></param>
            <param name="_curntFlag"></param>
            <param name="_archvFlag"></param>
            <param name="_stranRefno"></param>
            <param name="_priorPointer"></param>
            <param name="_externalKey"></param>
            <param name="_purchRefno"></param>
            <param name="_provdRefno"></param>
            <param name="_secureFlag"></param>
            <param name="_patpcRefno"></param>
            <param name="_deprtPatrnRefno"></param>
            <param name="_perssRefno"></param>
            <param name="_ordrrRefno"></param>
            <param name="_bformRefno"></param>
            <param name="_ownerHeorgRefno"></param>
            <param name="_synCode"></param>
            <param name="_emplrRefno"></param>
            <param name="_gpssnRefno"></param>
            <param name="_accicRefno"></param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.AddressRolesServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AddressRolesServiceBase.Get(iSOFT.ANZ.PatientManagerService.Entities.AddressRolesKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AddressRolesServiceBase.GetByHomelRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_ROLES_HOMEL index.
            </summary>
            <param name="_homelRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AddressRolesServiceBase.GetByHomelRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_ROLES_HOMEL index.
            </summary>
            <param name="_homelRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AddressRolesServiceBase.GetByHeorgRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_ROLES_HEORG index.
            </summary>
            <param name="_heorgRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AddressRolesServiceBase.GetByHeorgRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_ROLES_HEORG index.
            </summary>
            <param name="_heorgRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AddressRolesServiceBase.GetByPurchRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_ROLES_PURCH index.
            </summary>
            <param name="_purchRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AddressRolesServiceBase.GetByPurchRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_ROLES_PURCH index.
            </summary>
            <param name="_purchRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AddressRolesServiceBase.GetByPatpcRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_ROLES_PATPC index.
            </summary>
            <param name="_patpcRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AddressRolesServiceBase.GetByPatpcRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_ROLES_PATPC index.
            </summary>
            <param name="_patpcRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AddressRolesServiceBase.GetByDeprtPatrnRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_ROLES_DEPRT_PATRN index.
            </summary>
            <param name="_deprtPatrnRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AddressRolesServiceBase.GetByDeprtPatrnRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_ROLES_DEPRT_PATRN index.
            </summary>
            <param name="_deprtPatrnRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AddressRolesServiceBase.GetByPerssRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_ROLES_PERSS index.
            </summary>
            <param name="_perssRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AddressRolesServiceBase.GetByPerssRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_ROLES_PERSS index.
            </summary>
            <param name="_perssRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AddressRolesServiceBase.GetByRolesRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_ADDRESS_ROLES index.
            </summary>
            <param name="_rolesRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.AddressRoles"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AddressRolesServiceBase.GetByRolesRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_ADDRESS_ROLES index.
            </summary>
            <param name="_rolesRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.AddressRoles"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AddressRolesServiceBase.GetByHeorgRefnoAddssRefno(System.Nullable{System.Decimal},System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_ROLES_HEORG_ADDSS index.
            </summary>
            <param name="_heorgRefno"></param>
            <param name="_addssRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AddressRolesServiceBase.GetByHeorgRefnoAddssRefno(System.Nullable{System.Decimal},System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_ROLES_HEORG_ADDSS index.
            </summary>
            <param name="_heorgRefno"></param>
            <param name="_addssRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AddressRolesServiceBase.GetByHomelRefnoAddssRefno(System.Nullable{System.Decimal},System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_ROLES_HOMEL_ADDSS index.
            </summary>
            <param name="_homelRefno"></param>
            <param name="_addssRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AddressRolesServiceBase.GetByHomelRefnoAddssRefno(System.Nullable{System.Decimal},System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_ROLES_HOMEL_ADDSS index.
            </summary>
            <param name="_homelRefno"></param>
            <param name="_addssRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AddressRolesServiceBase.GetByPatpcRefnoAddssRefno(System.Nullable{System.Decimal},System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_ROLES_PATPC_ADDSS index.
            </summary>
            <param name="_patpcRefno"></param>
            <param name="_addssRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AddressRolesServiceBase.GetByPatpcRefnoAddssRefno(System.Nullable{System.Decimal},System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_ROLES_PATPC_ADDSS index.
            </summary>
            <param name="_patpcRefno"></param>
            <param name="_addssRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AddressRolesServiceBase.GetByOrdrrRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_ROLES_ORDRR index.
            </summary>
            <param name="_ordrrRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AddressRolesServiceBase.GetByOrdrrRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_ROLES_ORDRR index.
            </summary>
            <param name="_ordrrRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AddressRolesServiceBase.GetByProvdRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_ROLES_PROVD index.
            </summary>
            <param name="_provdRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AddressRolesServiceBase.GetByProvdRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_ROLES_PROVD index.
            </summary>
            <param name="_provdRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AddressRolesServiceBase.GetByAddssRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_ROLES_ADDSS index.
            </summary>
            <param name="_addssRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AddressRolesServiceBase.GetByAddssRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_ROLES_ADDSS index.
            </summary>
            <param name="_addssRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AddressRolesServiceBase.GetByAddssRefnoPatntRefnoRotypCode(System.Decimal,System.Nullable{System.Decimal},System.String)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_ADDRESS_ROLES index.
            </summary>
            <param name="_addssRefno"></param>
            <param name="_patntRefno"></param>
            <param name="_rotypCode"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AddressRolesServiceBase.GetByAddssRefnoPatntRefnoRotypCode(System.Decimal,System.Nullable{System.Decimal},System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_ADDRESS_ROLES index.
            </summary>
            <param name="_addssRefno"></param>
            <param name="_patntRefno"></param>
            <param name="_rotypCode"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AddressRolesServiceBase.GetByPatntRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_ROLES_PATNT index.
            </summary>
            <param name="_patntRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AddressRolesServiceBase.GetByPatntRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_ROLES_PATNT index.
            </summary>
            <param name="_patntRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AddressRolesServiceBase.GetByProcaRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_ROLES_PROCA index.
            </summary>
            <param name="_procaRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AddressRolesServiceBase.GetByProcaRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_ROLES_PROCA index.
            </summary>
            <param name="_procaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AddressRolesServiceBase.GetByPercaRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_ROLES_PERCA index.
            </summary>
            <param name="_percaRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AddressRolesServiceBase.GetByPercaRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_ROLES_PERCA index.
            </summary>
            <param name="_percaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AddressRolesServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.AddressRoles" /> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AddressRolesServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.AddressRoles" /> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> </returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AddressRolesServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>AddressRoles</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AddressRolesServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>AddressRoles</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AddressRolesServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>AddressRoles</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AddressRolesServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AddressRolesServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.AddressRoles)">
            <summary>
            public virtual method that Inserts a AddressRoles object into the datasource using a transaction.
            </summary>
            <param name="entity">AddressRoles object to Insert.</param>
            <remarks>After Inserting into the datasource, the AddressRoles object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            AddressRoles entity = new AddressRoles();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	AddressRolesService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AddressRolesServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.AddressRoles})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>AddressRoles</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>AddressRoles</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of AddressRoles.
             <code><![CDATA[
             TList<AddressRoles> list = new TList<AddressRoles>();
             AddressRoles entity = new AddressRoles();
             entity.StringProperty = "foo";
             AddressRoles entity2 = new AddressRoles();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AddressRolesService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AddressRolesServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.AddressRoles)">
            <summary>
            public virtual method that Updates a AddressRoles object into the datasource using a transaction.
            </summary>
            <param name="entity">AddressRoles object to Update.</param>
            <remarks>After Updateing into the datasource, the AddressRoles object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            AddressRoles entity = AddressRolesService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	AddressRolesService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AddressRolesServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.AddressRoles})">
             <summary>
             public virtual method that Updates rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>AddressRoles</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>AddressRoles</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of AddressRoles.
             <code><![CDATA[
             TList<AddressRoles> list = new TList<AddressRoles>();
             AddressRoles entity = new AddressRoles();
             entity.StringProperty = "foo";
             AddressRoles entity2 = new AddressRoles();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AddressRolesService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AddressRolesServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.AddressRoles)">
            <summary>
            public virtual method that Deletes a AddressRoles object into the datasource using a transaction.
            </summary>
            <param name="entity">AddressRoles object to Delete.</param>
            <remarks>After Deleteing into the datasource, the AddressRoles object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            AddressRoles entity = AddressRolesService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	AddressRolesService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AddressRolesServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.AddressRoles})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>AddressRoles</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>AddressRoles</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of AddressRoles.
             <code><![CDATA[
             TList<AddressRoles> list = new TList<AddressRoles>();
             AddressRoles entity = new AddressRoles();
             entity.StringProperty = "foo";
             AddressRoles entity2 = new AddressRoles();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AddressRolesService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AddressRolesServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.AddressRolesKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AddressRolesServiceBase.Delete(System.Decimal)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Decimal _rolesRefno
            </summary>
            <param name="_rolesRefno">AddressRoles pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.AeAttendanceRolesService">
            <summary>
            An component type implementation of the 'AE_ATTENDANCE_ROLES' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeAttendanceRolesService.#ctor">
            <summary>
            Initializes a new instance of the AeAttendanceRolesService class.
            </summary>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.AeAttendanceRolesServiceBase">
            <summary>
             An object representation of the 'AE_ATTENDANCE_ROLES' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the AeAttendanceRoles.cs file instead.
             All custom implementations should be done in the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.AeAttendanceRoles"/> class.
             </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeAttendanceRolesServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.AeAttendanceRoles"/> instance .
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeAttendanceRolesServiceBase.CreateAeAttendanceRoles(System.Decimal,System.Decimal,System.Nullable{System.Decimal},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.String,System.String,System.Nullable{System.Decimal})">
            <summary>
             A simple factory method to create a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.AeAttendanceRoles"/> instance.
            </summary>
            <param name="_atrolRefno"></param>
            <param name="_aeattRefno"></param>
            <param name="_trcatRefno"></param>
            <param name="_triagStartDttm"></param>
            <param name="_triagEndDttm"></param>
            <param name="_triagProcaRefno"></param>
            <param name="_curntFlag"></param>
            <param name="_stranRefno"></param>
            <param name="_externalKey"></param>
            <param name="_archvFlag"></param>
            <param name="_ownerHeorgRefno"></param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.AeAttendanceRolesServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeAttendanceRolesServiceBase.Get(iSOFT.ANZ.PatientManagerService.Entities.AeAttendanceRolesKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeAttendanceRolesServiceBase.GetByTriagProcaRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_ATROL_TRIAG_PROCA index.
            </summary>
            <param name="_triagProcaRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeAttendanceRolesServiceBase.GetByTriagProcaRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_ATROL_TRIAG_PROCA index.
            </summary>
            <param name="_triagProcaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeAttendanceRolesServiceBase.GetByAtrolRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key PK_AE_ATTENDANCE_ROLES index.
            </summary>
            <param name="_atrolRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.AeAttendanceRoles"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeAttendanceRolesServiceBase.GetByAtrolRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key PK_AE_ATTENDANCE_ROLES index.
            </summary>
            <param name="_atrolRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.AeAttendanceRoles"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeAttendanceRolesServiceBase.GetByAeattRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_ATROL_AEATT index.
            </summary>
            <param name="_aeattRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeAttendanceRolesServiceBase.GetByAeattRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_ATROL_AEATT index.
            </summary>
            <param name="_aeattRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeAttendanceRolesServiceBase.GetByCurntFlag(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key SAH_ATROL_CURRNT_FLAG index.
            </summary>
            <param name="_curntFlag"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeAttendanceRolesServiceBase.GetByCurntFlag(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key SAH_ATROL_CURRNT_FLAG index.
            </summary>
            <param name="_curntFlag"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeAttendanceRolesServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.AeAttendanceRoles" /> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeAttendanceRolesServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.AeAttendanceRoles" /> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> </returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeAttendanceRolesServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>AeAttendanceRoles</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeAttendanceRolesServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>AeAttendanceRoles</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeAttendanceRolesServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>AeAttendanceRoles</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeAttendanceRolesServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeAttendanceRolesServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.AeAttendanceRoles)">
            <summary>
            public virtual method that Inserts a AeAttendanceRoles object into the datasource using a transaction.
            </summary>
            <param name="entity">AeAttendanceRoles object to Insert.</param>
            <remarks>After Inserting into the datasource, the AeAttendanceRoles object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            AeAttendanceRoles entity = new AeAttendanceRoles();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	AeAttendanceRolesService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeAttendanceRolesServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.AeAttendanceRoles})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>AeAttendanceRoles</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>AeAttendanceRoles</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of AeAttendanceRoles.
             <code><![CDATA[
             TList<AeAttendanceRoles> list = new TList<AeAttendanceRoles>();
             AeAttendanceRoles entity = new AeAttendanceRoles();
             entity.StringProperty = "foo";
             AeAttendanceRoles entity2 = new AeAttendanceRoles();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AeAttendanceRolesService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeAttendanceRolesServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.AeAttendanceRoles)">
            <summary>
            public virtual method that Updates a AeAttendanceRoles object into the datasource using a transaction.
            </summary>
            <param name="entity">AeAttendanceRoles object to Update.</param>
            <remarks>After Updateing into the datasource, the AeAttendanceRoles object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            AeAttendanceRoles entity = AeAttendanceRolesService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	AeAttendanceRolesService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeAttendanceRolesServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.AeAttendanceRoles})">
             <summary>
             public virtual method that Updates rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>AeAttendanceRoles</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>AeAttendanceRoles</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of AeAttendanceRoles.
             <code><![CDATA[
             TList<AeAttendanceRoles> list = new TList<AeAttendanceRoles>();
             AeAttendanceRoles entity = new AeAttendanceRoles();
             entity.StringProperty = "foo";
             AeAttendanceRoles entity2 = new AeAttendanceRoles();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AeAttendanceRolesService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeAttendanceRolesServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.AeAttendanceRoles)">
            <summary>
            public virtual method that Deletes a AeAttendanceRoles object into the datasource using a transaction.
            </summary>
            <param name="entity">AeAttendanceRoles object to Delete.</param>
            <remarks>After Deleteing into the datasource, the AeAttendanceRoles object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            AeAttendanceRoles entity = AeAttendanceRolesService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	AeAttendanceRolesService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeAttendanceRolesServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.AeAttendanceRoles})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>AeAttendanceRoles</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>AeAttendanceRoles</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of AeAttendanceRoles.
             <code><![CDATA[
             TList<AeAttendanceRoles> list = new TList<AeAttendanceRoles>();
             AeAttendanceRoles entity = new AeAttendanceRoles();
             entity.StringProperty = "foo";
             AeAttendanceRoles entity2 = new AeAttendanceRoles();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AeAttendanceRolesService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeAttendanceRolesServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.AeAttendanceRolesKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.AeAttendanceRolesServiceBase.Delete(System.Decimal)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Decimal _atrolRefno
            </summary>
            <param name="_atrolRefno">AeAttendanceRoles pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.ExtractsService">
            <summary>
            An component type implementation of the 'EXTRACTS' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ExtractsService.#ctor">
            <summary>
            Initializes a new instance of the ExtractsService class.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ExtractsService.CheckUserCreateParameter">
            <summary>
            pre iPM APAC 3.0 does not have V_User_Create parameter,  APAC 3 and later, this parameter is required to the call to P_Begin_Sessn_Transaction        
            </summary>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ExtractsService.BeginSessionTransaction(System.String,System.Decimal,System.String,System.String)">
            <summary>
            PostAPAC 3.0 version of BeginSessionTransaction that has the UserCreate parameter.
            </summary>
            <param name="trtypCode"></param>
            <param name="parentKey"></param>
            <param name="operationType"></param>
            <param name="userCreate"></param>
            <returns></returns>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.ExtractsServiceBase">
            <summary>
             An object representation of the 'EXTRACTS' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Extracts.cs file instead.
             All custom implementations should be done in the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Extracts"/> class.
             </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ExtractsServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Extracts"/> instance .
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ExtractsServiceBase.CreateExtracts(System.Decimal,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.DateTime},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Object,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Extracts"/> instance.
            </summary>
            <param name="_masterTabRowid"></param>
            <param name="_stranRefno"></param>
            <param name="_exlogRefno"></param>
            <param name="_patntRefno"></param>
            <param name="_transactionType"></param>
            <param name="_operationType"></param>
            <param name="_drivingTable"></param>
            <param name="_extractStatus"></param>
            <param name="_errorCode"></param>
            <param name="_errorText"></param>
            <param name="_xtractDate"></param>
            <param name="_a1"></param>
            <param name="_a2"></param>
            <param name="_a3"></param>
            <param name="_a4"></param>
            <param name="_a5"></param>
            <param name="_a6"></param>
            <param name="_a7"></param>
            <param name="_a8"></param>
            <param name="_a9"></param>
            <param name="_a10"></param>
            <param name="_a11"></param>
            <param name="_a12"></param>
            <param name="_a13"></param>
            <param name="_a14"></param>
            <param name="_a15"></param>
            <param name="_a16"></param>
            <param name="_a17"></param>
            <param name="_a18"></param>
            <param name="_a19"></param>
            <param name="_a20"></param>
            <param name="_a21"></param>
            <param name="_a22"></param>
            <param name="_a23"></param>
            <param name="_a24"></param>
            <param name="_a25"></param>
            <param name="_a26"></param>
            <param name="_a27"></param>
            <param name="_a28"></param>
            <param name="_a29"></param>
            <param name="_a30"></param>
            <param name="_a31"></param>
            <param name="_a32"></param>
            <param name="_a33"></param>
            <param name="_a34"></param>
            <param name="_a35"></param>
            <param name="_a36"></param>
            <param name="_a37"></param>
            <param name="_a38"></param>
            <param name="_a39"></param>
            <param name="_a40"></param>
            <param name="_a41"></param>
            <param name="_a42"></param>
            <param name="_a43"></param>
            <param name="_a44"></param>
            <param name="_a45"></param>
            <param name="_a46"></param>
            <param name="_a47"></param>
            <param name="_a48"></param>
            <param name="_a49"></param>
            <param name="_a50"></param>
            <param name="_a51"></param>
            <param name="_a52"></param>
            <param name="_a53"></param>
            <param name="_a54"></param>
            <param name="_a55"></param>
            <param name="_a56"></param>
            <param name="_a57"></param>
            <param name="_a58"></param>
            <param name="_a59"></param>
            <param name="_a60"></param>
            <param name="_a61"></param>
            <param name="_a62"></param>
            <param name="_a63"></param>
            <param name="_a64"></param>
            <param name="_a65"></param>
            <param name="_a66"></param>
            <param name="_a67"></param>
            <param name="_a68"></param>
            <param name="_a69"></param>
            <param name="_a70"></param>
            <param name="_a71"></param>
            <param name="_a72"></param>
            <param name="_a73"></param>
            <param name="_a74"></param>
            <param name="_a75"></param>
            <param name="_a76"></param>
            <param name="_a77"></param>
            <param name="_a78"></param>
            <param name="_a79"></param>
            <param name="_a80"></param>
            <param name="_a81"></param>
            <param name="_a82"></param>
            <param name="_a83"></param>
            <param name="_a84"></param>
            <param name="_a85"></param>
            <param name="_a86"></param>
            <param name="_a87"></param>
            <param name="_a88"></param>
            <param name="_a89"></param>
            <param name="_a90"></param>
            <param name="_a91"></param>
            <param name="_a92"></param>
            <param name="_a93"></param>
            <param name="_a94"></param>
            <param name="_a95"></param>
            <param name="_a96"></param>
            <param name="_a97"></param>
            <param name="_a98"></param>
            <param name="_a99"></param>
            <param name="_a100"></param>
            <param name="_a101"></param>
            <param name="_a102"></param>
            <param name="_a103"></param>
            <param name="_a104"></param>
            <param name="_a105"></param>
            <param name="_a106"></param>
            <param name="_a107"></param>
            <param name="_a108"></param>
            <param name="_a109"></param>
            <param name="_a110"></param>
            <param name="_a111"></param>
            <param name="_a112"></param>
            <param name="_a113"></param>
            <param name="_a114"></param>
            <param name="_a115"></param>
            <param name="_a116"></param>
            <param name="_a117"></param>
            <param name="_a118"></param>
            <param name="_a119"></param>
            <param name="_a120"></param>
            <param name="_a121"></param>
            <param name="_a122"></param>
            <param name="_a123"></param>
            <param name="_a124"></param>
            <param name="_a125"></param>
            <param name="_a126"></param>
            <param name="_a127"></param>
            <param name="_a128"></param>
            <param name="_a129"></param>
            <param name="_a130"></param>
            <param name="_a131"></param>
            <param name="_a132"></param>
            <param name="_a133"></param>
            <param name="_a134"></param>
            <param name="_a135"></param>
            <param name="_a136"></param>
            <param name="_a137"></param>
            <param name="_a138"></param>
            <param name="_a139"></param>
            <param name="_a140"></param>
            <param name="_a141"></param>
            <param name="_d1"></param>
            <param name="_d2"></param>
            <param name="_d3"></param>
            <param name="_d4"></param>
            <param name="_d5"></param>
            <param name="_d6"></param>
            <param name="_d7"></param>
            <param name="_d8"></param>
            <param name="_d9"></param>
            <param name="_d10"></param>
            <param name="_d11"></param>
            <param name="_d12"></param>
            <param name="_d13"></param>
            <param name="_d14"></param>
            <param name="_d15"></param>
            <param name="_d16"></param>
            <param name="_d17"></param>
            <param name="_d18"></param>
            <param name="_d19"></param>
            <param name="_d20"></param>
            <param name="_n1"></param>
            <param name="_n2"></param>
            <param name="_n3"></param>
            <param name="_n4"></param>
            <param name="_n5"></param>
            <param name="_n6"></param>
            <param name="_n7"></param>
            <param name="_n8"></param>
            <param name="_n9"></param>
            <param name="_n10"></param>
            <param name="_n11"></param>
            <param name="_n12"></param>
            <param name="_n13"></param>
            <param name="_n14"></param>
            <param name="_n15"></param>
            <param name="_n16"></param>
            <param name="_n17"></param>
            <param name="_n18"></param>
            <param name="_n19"></param>
            <param name="_n20"></param>
            <param name="_n21"></param>
            <param name="_n22"></param>
            <param name="_n23"></param>
            <param name="_n24"></param>
            <param name="_n25"></param>
            <param name="_n26"></param>
            <param name="_n27"></param>
            <param name="_n28"></param>
            <param name="_n29"></param>
            <param name="_n30"></param>
            <param name="_n31"></param>
            <param name="_n32"></param>
            <param name="_n33"></param>
            <param name="_n34"></param>
            <param name="_n35"></param>
            <param name="_n36"></param>
            <param name="_n37"></param>
            <param name="_n38"></param>
            <param name="_n39"></param>
            <param name="_n40"></param>
            <param name="_ownerHeorgRefno"></param>
            <param name="_archvFlag"></param>
            <param name="_fullRecord"></param>
            <param name="_externalKey"></param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.ExtractsServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ExtractsServiceBase.Get(iSOFT.ANZ.PatientManagerService.Entities.ExtractsKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ExtractsServiceBase.GetByExtrcRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_EXTRACTS index.
            </summary>
            <param name="_extrcRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Extracts"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ExtractsServiceBase.GetByExtrcRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_EXTRACTS index.
            </summary>
            <param name="_extrcRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Extracts"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ExtractsServiceBase.GetByExlogRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_EXTRC_EXLOG index.
            </summary>
            <param name="_exlogRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ExtractsServiceBase.GetByExlogRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_EXTRC_EXLOG index.
            </summary>
            <param name="_exlogRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ExtractsServiceBase.GetByPatntRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_EXTRC_PATNT index.
            </summary>
            <param name="_patntRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ExtractsServiceBase.GetByPatntRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_EXTRC_PATNT index.
            </summary>
            <param name="_patntRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ExtractsServiceBase.GetByA5(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key NZ_EXTRC_A5 index.
            </summary>
            <param name="_a5"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ExtractsServiceBase.GetByA5(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key NZ_EXTRC_A5 index.
            </summary>
            <param name="_a5"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ExtractsServiceBase.GetByA8(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key NZ_EXTRC_A8 index.
            </summary>
            <param name="_a8"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ExtractsServiceBase.GetByA8(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key NZ_EXTRC_A8 index.
            </summary>
            <param name="_a8"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ExtractsServiceBase.GetByStranRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key NZ_EXTRC_STRAN index.
            </summary>
            <param name="_stranRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ExtractsServiceBase.GetByStranRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key NZ_EXTRC_STRAN index.
            </summary>
            <param name="_stranRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ExtractsServiceBase.GetByOperationType(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key SAH_EXTRC_OPERATION index.
            </summary>
            <param name="_operationType"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ExtractsServiceBase.GetByOperationType(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key SAH_EXTRC_OPERATION index.
            </summary>
            <param name="_operationType"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ExtractsServiceBase.GetByXtractDate(System.Nullable{System.DateTime})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key SAH_EXTRC_XTRACT_DATE index.
            </summary>
            <param name="_xtractDate"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ExtractsServiceBase.GetByXtractDate(System.Nullable{System.DateTime},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key SAH_EXTRC_XTRACT_DATE index.
            </summary>
            <param name="_xtractDate"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ExtractsServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Extracts" /> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ExtractsServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Extracts" /> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> </returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ExtractsServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Extracts</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ExtractsServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Extracts</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ExtractsServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Extracts</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ExtractsServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ExtractsServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.Extracts)">
            <summary>
            public virtual method that Inserts a Extracts object into the datasource using a transaction.
            </summary>
            <param name="entity">Extracts object to Insert.</param>
            <remarks>After Inserting into the datasource, the Extracts object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Extracts entity = new Extracts();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ExtractsService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ExtractsServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.Extracts})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>Extracts</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Extracts</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Extracts.
             <code><![CDATA[
             TList<Extracts> list = new TList<Extracts>();
             Extracts entity = new Extracts();
             entity.StringProperty = "foo";
             Extracts entity2 = new Extracts();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ExtractsService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ExtractsServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.Extracts)">
            <summary>
            public virtual method that Updates a Extracts object into the datasource using a transaction.
            </summary>
            <param name="entity">Extracts object to Update.</param>
            <remarks>After Updateing into the datasource, the Extracts object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Extracts entity = ExtractsService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ExtractsService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ExtractsServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.Extracts})">
             <summary>
             public virtual method that Updates rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>Extracts</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Extracts</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Extracts.
             <code><![CDATA[
             TList<Extracts> list = new TList<Extracts>();
             Extracts entity = new Extracts();
             entity.StringProperty = "foo";
             Extracts entity2 = new Extracts();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ExtractsService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ExtractsServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.Extracts)">
            <summary>
            public virtual method that Deletes a Extracts object into the datasource using a transaction.
            </summary>
            <param name="entity">Extracts object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Extracts object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Extracts entity = ExtractsService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ExtractsService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ExtractsServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.Extracts})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>Extracts</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Extracts</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Extracts.
             <code><![CDATA[
             TList<Extracts> list = new TList<Extracts>();
             Extracts entity = new Extracts();
             entity.StringProperty = "foo";
             Extracts entity2 = new Extracts();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ExtractsService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ExtractsServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.ExtractsKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ExtractsServiceBase.Delete(System.Decimal)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Decimal _extrcRefno
            </summary>
            <param name="_extrcRefno">Extracts pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.HealthOrgAccessService">
            <summary>
            An component type implementation of the 'HEALTH_ORG_ACCESS' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HealthOrgAccessService.#ctor">
            <summary>
            Initializes a new instance of the HealthOrgAccessService class.
            </summary>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.HealthOrgAccessServiceBase">
            <summary>
             An object representation of the 'HEALTH_ORG_ACCESS' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the HealthOrgAccess.cs file instead.
             All custom implementations should be done in the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.HealthOrgAccess"/> class.
             </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HealthOrgAccessServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.HealthOrgAccess"/> instance .
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HealthOrgAccessServiceBase.CreateHealthOrgAccess(System.Decimal,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal})">
            <summary>
             A simple factory method to create a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.HealthOrgAccess"/> instance.
            </summary>
            <param name="_heorgRefno"></param>
            <param name="_usgrpRefno"></param>
            <param name="_usersRefno"></param>
            <param name="_ownerHeorgRefno"></param>
            <param name="_archvFlag"></param>
            <param name="_stranRefno"></param>
            <param name="_externalKey"></param>
            <param name="_mrdHeorgRefno"></param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.HealthOrgAccessServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HealthOrgAccessServiceBase.Get(iSOFT.ANZ.PatientManagerService.Entities.HealthOrgAccessKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HealthOrgAccessServiceBase.GetByHeorgRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_HEOAC_HEORG index.
            </summary>
            <param name="_heorgRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HealthOrgAccessServiceBase.GetByHeorgRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_HEOAC_HEORG index.
            </summary>
            <param name="_heorgRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HealthOrgAccessServiceBase.GetByUsersRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_HEOAC_USERS index.
            </summary>
            <param name="_usersRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HealthOrgAccessServiceBase.GetByUsersRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_HEOAC_USERS index.
            </summary>
            <param name="_usersRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HealthOrgAccessServiceBase.GetByUsgrpRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_HEOAC_USGRP index.
            </summary>
            <param name="_usgrpRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HealthOrgAccessServiceBase.GetByUsgrpRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_HEOAC_USGRP index.
            </summary>
            <param name="_usgrpRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HealthOrgAccessServiceBase.GetByHeoacRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_HEALTH_ORG_ACCESS index.
            </summary>
            <param name="_heoacRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.HealthOrgAccess"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HealthOrgAccessServiceBase.GetByHeoacRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_HEALTH_ORG_ACCESS index.
            </summary>
            <param name="_heoacRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.HealthOrgAccess"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HealthOrgAccessServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.HealthOrgAccess" /> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HealthOrgAccessServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.HealthOrgAccess" /> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> </returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HealthOrgAccessServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>HealthOrgAccess</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HealthOrgAccessServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>HealthOrgAccess</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HealthOrgAccessServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>HealthOrgAccess</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HealthOrgAccessServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HealthOrgAccessServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.HealthOrgAccess)">
            <summary>
            public virtual method that Inserts a HealthOrgAccess object into the datasource using a transaction.
            </summary>
            <param name="entity">HealthOrgAccess object to Insert.</param>
            <remarks>After Inserting into the datasource, the HealthOrgAccess object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            HealthOrgAccess entity = new HealthOrgAccess();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	HealthOrgAccessService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HealthOrgAccessServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.HealthOrgAccess})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>HealthOrgAccess</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>HealthOrgAccess</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of HealthOrgAccess.
             <code><![CDATA[
             TList<HealthOrgAccess> list = new TList<HealthOrgAccess>();
             HealthOrgAccess entity = new HealthOrgAccess();
             entity.StringProperty = "foo";
             HealthOrgAccess entity2 = new HealthOrgAccess();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	HealthOrgAccessService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HealthOrgAccessServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.HealthOrgAccess)">
            <summary>
            public virtual method that Updates a HealthOrgAccess object into the datasource using a transaction.
            </summary>
            <param name="entity">HealthOrgAccess object to Update.</param>
            <remarks>After Updateing into the datasource, the HealthOrgAccess object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            HealthOrgAccess entity = HealthOrgAccessService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	HealthOrgAccessService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HealthOrgAccessServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.HealthOrgAccess})">
             <summary>
             public virtual method that Updates rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>HealthOrgAccess</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>HealthOrgAccess</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of HealthOrgAccess.
             <code><![CDATA[
             TList<HealthOrgAccess> list = new TList<HealthOrgAccess>();
             HealthOrgAccess entity = new HealthOrgAccess();
             entity.StringProperty = "foo";
             HealthOrgAccess entity2 = new HealthOrgAccess();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	HealthOrgAccessService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HealthOrgAccessServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.HealthOrgAccess)">
            <summary>
            public virtual method that Deletes a HealthOrgAccess object into the datasource using a transaction.
            </summary>
            <param name="entity">HealthOrgAccess object to Delete.</param>
            <remarks>After Deleteing into the datasource, the HealthOrgAccess object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            HealthOrgAccess entity = HealthOrgAccessService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	HealthOrgAccessService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HealthOrgAccessServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.HealthOrgAccess})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>HealthOrgAccess</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>HealthOrgAccess</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of HealthOrgAccess.
             <code><![CDATA[
             TList<HealthOrgAccess> list = new TList<HealthOrgAccess>();
             HealthOrgAccess entity = new HealthOrgAccess();
             entity.StringProperty = "foo";
             HealthOrgAccess entity2 = new HealthOrgAccess();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	HealthOrgAccessService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HealthOrgAccessServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.HealthOrgAccessKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HealthOrgAccessServiceBase.Delete(System.Decimal)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Decimal _heoacRefno
            </summary>
            <param name="_heoacRefno">HealthOrgAccess pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.HealthOrganisationIdsService">
            <summary>
            An component type implementation of the 'HEALTH_ORGANISATION_IDS' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HealthOrganisationIdsService.#ctor">
            <summary>
            Initializes a new instance of the HealthOrganisationIdsService class.
            </summary>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.HealthOrganisationIdsServiceBase">
            <summary>
             An object representation of the 'HEALTH_ORGANISATION_IDS' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the HealthOrganisationIds.cs file instead.
             All custom implementations should be done in the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.HealthOrganisationIds"/> class.
             </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HealthOrganisationIdsServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.HealthOrganisationIds"/> instance .
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HealthOrganisationIdsServiceBase.CreateHealthOrganisationIds(System.Nullable{System.Decimal},System.Decimal,System.String,System.DateTime,System.Nullable{System.DateTime},System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.HealthOrganisationIds"/> instance.
            </summary>
            <param name="_hitypRefno"></param>
            <param name="_heorgRefno"></param>
            <param name="_identifier"></param>
            <param name="_startDttm"></param>
            <param name="_endDttm"></param>
            <param name="_curntFlag"></param>
            <param name="_archvFlag"></param>
            <param name="_stranRefno"></param>
            <param name="_priorPointer"></param>
            <param name="_externalKey"></param>
            <param name="_ownerHeorgRefno"></param>
            <param name="_synCode"></param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.HealthOrganisationIdsServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HealthOrganisationIdsServiceBase.GetByHitypRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_HEOID_HITYP key.
            	CNA_HEOID_HITYP Description: 
            </summary>
            <param name="_hitypRefno"></param>
            <returns>Returns a generic collection of HealthOrganisationIds objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HealthOrganisationIdsServiceBase.GetByHitypRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_HEOID_HITYP key.
            	CNA_HEOID_HITYP Description: 
            </summary>
            <param name="_hitypRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>HealthOrganisationIds</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HealthOrganisationIdsServiceBase.Get(iSOFT.ANZ.PatientManagerService.Entities.HealthOrganisationIdsKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HealthOrganisationIdsServiceBase.GetByIdentifierHeorgRefno(System.String,System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_HEALTH_ORGANISATION_IDS index.
            </summary>
            <param name="_identifier"></param>
            <param name="_heorgRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HealthOrganisationIdsServiceBase.GetByIdentifierHeorgRefno(System.String,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_HEALTH_ORGANISATION_IDS index.
            </summary>
            <param name="_identifier"></param>
            <param name="_heorgRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HealthOrganisationIdsServiceBase.GetByHeorgRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_HEOID_HEORG index.
            </summary>
            <param name="_heorgRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HealthOrganisationIdsServiceBase.GetByHeorgRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_HEOID_HEORG index.
            </summary>
            <param name="_heorgRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HealthOrganisationIdsServiceBase.GetByHeoidRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_HEALTH_ORGANISATION_IDS index.
            </summary>
            <param name="_heoidRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.HealthOrganisationIds"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HealthOrganisationIdsServiceBase.GetByHeoidRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_HEALTH_ORGANISATION_IDS index.
            </summary>
            <param name="_heoidRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.HealthOrganisationIds"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HealthOrganisationIdsServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.HealthOrganisationIds" /> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HealthOrganisationIdsServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.HealthOrganisationIds" /> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> </returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HealthOrganisationIdsServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>HealthOrganisationIds</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HealthOrganisationIdsServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>HealthOrganisationIds</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HealthOrganisationIdsServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>HealthOrganisationIds</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HealthOrganisationIdsServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HealthOrganisationIdsServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.HealthOrganisationIds)">
            <summary>
            public virtual method that Inserts a HealthOrganisationIds object into the datasource using a transaction.
            </summary>
            <param name="entity">HealthOrganisationIds object to Insert.</param>
            <remarks>After Inserting into the datasource, the HealthOrganisationIds object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            HealthOrganisationIds entity = new HealthOrganisationIds();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	HealthOrganisationIdsService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HealthOrganisationIdsServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.HealthOrganisationIds})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>HealthOrganisationIds</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>HealthOrganisationIds</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of HealthOrganisationIds.
             <code><![CDATA[
             TList<HealthOrganisationIds> list = new TList<HealthOrganisationIds>();
             HealthOrganisationIds entity = new HealthOrganisationIds();
             entity.StringProperty = "foo";
             HealthOrganisationIds entity2 = new HealthOrganisationIds();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	HealthOrganisationIdsService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HealthOrganisationIdsServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.HealthOrganisationIds)">
            <summary>
            public virtual method that Updates a HealthOrganisationIds object into the datasource using a transaction.
            </summary>
            <param name="entity">HealthOrganisationIds object to Update.</param>
            <remarks>After Updateing into the datasource, the HealthOrganisationIds object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            HealthOrganisationIds entity = HealthOrganisationIdsService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	HealthOrganisationIdsService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HealthOrganisationIdsServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.HealthOrganisationIds})">
             <summary>
             public virtual method that Updates rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>HealthOrganisationIds</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>HealthOrganisationIds</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of HealthOrganisationIds.
             <code><![CDATA[
             TList<HealthOrganisationIds> list = new TList<HealthOrganisationIds>();
             HealthOrganisationIds entity = new HealthOrganisationIds();
             entity.StringProperty = "foo";
             HealthOrganisationIds entity2 = new HealthOrganisationIds();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	HealthOrganisationIdsService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HealthOrganisationIdsServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.HealthOrganisationIds)">
            <summary>
            public virtual method that Deletes a HealthOrganisationIds object into the datasource using a transaction.
            </summary>
            <param name="entity">HealthOrganisationIds object to Delete.</param>
            <remarks>After Deleteing into the datasource, the HealthOrganisationIds object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            HealthOrganisationIds entity = HealthOrganisationIdsService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	HealthOrganisationIdsService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HealthOrganisationIdsServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.HealthOrganisationIds})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>HealthOrganisationIds</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>HealthOrganisationIds</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of HealthOrganisationIds.
             <code><![CDATA[
             TList<HealthOrganisationIds> list = new TList<HealthOrganisationIds>();
             HealthOrganisationIds entity = new HealthOrganisationIds();
             entity.StringProperty = "foo";
             HealthOrganisationIds entity2 = new HealthOrganisationIds();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	HealthOrganisationIdsService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HealthOrganisationIdsServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.HealthOrganisationIdsKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HealthOrganisationIdsServiceBase.Delete(System.Decimal)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Decimal _heoidRefno
            </summary>
            <param name="_heoidRefno">HealthOrganisationIds pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.PatientTransportationsService">
            <summary>
            An component type implementation of the 'PATIENT_TRANSPORTATIONS' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientTransportationsService.#ctor">
            <summary>
            Initializes a new instance of the PatientTransportationsService class.
            </summary>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.PatientTransportationsServiceBase">
            <summary>
             An object representation of the 'PATIENT_TRANSPORTATIONS' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the PatientTransportations.cs file instead.
             All custom implementations should be done in the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.PatientTransportations"/> class.
             </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientTransportationsServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.PatientTransportations"/> instance .
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientTransportationsServiceBase.CreatePatientTransportations(System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
            <summary>
             A simple factory method to create a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.PatientTransportations"/> instance.
            </summary>
            <param name="_sorceCode"></param>
            <param name="_sorceRefno"></param>
            <param name="_arrivDuration"></param>
            <param name="_arrivTransRefno"></param>
            <param name="_deprtTransRefno"></param>
            <param name="_arrivTrstaRefno"></param>
            <param name="_deprtTrstaRefno"></param>
            <param name="_arrivHeorgRefno"></param>
            <param name="_deprtHeorgRefno"></param>
            <param name="_stranRefno"></param>
            <param name="_archvFlag"></param>
            <param name="_externalKey"></param>
            <param name="_fromHeorgRefno"></param>
            <param name="_toHeorgRefno"></param>
            <param name="_ownerHeorgRefno"></param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.PatientTransportationsServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientTransportationsServiceBase.Get(iSOFT.ANZ.PatientManagerService.Entities.PatientTransportationsKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientTransportationsServiceBase.GetByToHeorgRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PATRN_TO_HEORG index.
            </summary>
            <param name="_toHeorgRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientTransportationsServiceBase.GetByToHeorgRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PATRN_TO_HEORG index.
            </summary>
            <param name="_toHeorgRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientTransportationsServiceBase.GetByArrivHeorgRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PATRN_ARRIV_HEORG index.
            </summary>
            <param name="_arrivHeorgRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientTransportationsServiceBase.GetByArrivHeorgRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PATRN_ARRIV_HEORG index.
            </summary>
            <param name="_arrivHeorgRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientTransportationsServiceBase.GetByDeprtHeorgRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PATRN_DEPRT_HEORG index.
            </summary>
            <param name="_deprtHeorgRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientTransportationsServiceBase.GetByDeprtHeorgRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PATRN_DEPRT_HEORG index.
            </summary>
            <param name="_deprtHeorgRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientTransportationsServiceBase.GetByFromHeorgRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PATRN_FROM_HEORG index.
            </summary>
            <param name="_fromHeorgRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientTransportationsServiceBase.GetByFromHeorgRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PATRN_FROM_HEORG index.
            </summary>
            <param name="_fromHeorgRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientTransportationsServiceBase.GetByPatrnRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_PATIENT_TRANSPORTATIONS index.
            </summary>
            <param name="_patrnRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.PatientTransportations"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientTransportationsServiceBase.GetByPatrnRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_PATIENT_TRANSPORTATIONS index.
            </summary>
            <param name="_patrnRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.PatientTransportations"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientTransportationsServiceBase.GetBySorceRefnoSorceCode(System.Nullable{System.Decimal},System.String)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key SAH_SORCE_PAT index.
            </summary>
            <param name="_sorceRefno"></param>
            <param name="_sorceCode"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientTransportationsServiceBase.GetBySorceRefnoSorceCode(System.Nullable{System.Decimal},System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key SAH_SORCE_PAT index.
            </summary>
            <param name="_sorceRefno"></param>
            <param name="_sorceCode"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientTransportationsServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.PatientTransportations" /> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientTransportationsServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.PatientTransportations" /> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> </returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientTransportationsServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>PatientTransportations</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientTransportationsServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>PatientTransportations</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientTransportationsServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>PatientTransportations</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientTransportationsServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientTransportationsServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.PatientTransportations)">
            <summary>
            public virtual method that Inserts a PatientTransportations object into the datasource using a transaction.
            </summary>
            <param name="entity">PatientTransportations object to Insert.</param>
            <remarks>After Inserting into the datasource, the PatientTransportations object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            PatientTransportations entity = new PatientTransportations();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	PatientTransportationsService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientTransportationsServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.PatientTransportations})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>PatientTransportations</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>PatientTransportations</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of PatientTransportations.
             <code><![CDATA[
             TList<PatientTransportations> list = new TList<PatientTransportations>();
             PatientTransportations entity = new PatientTransportations();
             entity.StringProperty = "foo";
             PatientTransportations entity2 = new PatientTransportations();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	PatientTransportationsService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientTransportationsServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.PatientTransportations)">
            <summary>
            public virtual method that Updates a PatientTransportations object into the datasource using a transaction.
            </summary>
            <param name="entity">PatientTransportations object to Update.</param>
            <remarks>After Updateing into the datasource, the PatientTransportations object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            PatientTransportations entity = PatientTransportationsService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	PatientTransportationsService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientTransportationsServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.PatientTransportations})">
             <summary>
             public virtual method that Updates rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>PatientTransportations</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>PatientTransportations</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of PatientTransportations.
             <code><![CDATA[
             TList<PatientTransportations> list = new TList<PatientTransportations>();
             PatientTransportations entity = new PatientTransportations();
             entity.StringProperty = "foo";
             PatientTransportations entity2 = new PatientTransportations();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	PatientTransportationsService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientTransportationsServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.PatientTransportations)">
            <summary>
            public virtual method that Deletes a PatientTransportations object into the datasource using a transaction.
            </summary>
            <param name="entity">PatientTransportations object to Delete.</param>
            <remarks>After Deleteing into the datasource, the PatientTransportations object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            PatientTransportations entity = PatientTransportationsService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	PatientTransportationsService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientTransportationsServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.PatientTransportations})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>PatientTransportations</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>PatientTransportations</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of PatientTransportations.
             <code><![CDATA[
             TList<PatientTransportations> list = new TList<PatientTransportations>();
             PatientTransportations entity = new PatientTransportations();
             entity.StringProperty = "foo";
             PatientTransportations entity2 = new PatientTransportations();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	PatientTransportationsService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientTransportationsServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.PatientTransportationsKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientTransportationsServiceBase.Delete(System.Decimal)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Decimal _patrnRefno
            </summary>
            <param name="_patrnRefno">PatientTransportations pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.PreadmissionsService">
            <summary>
            An component type implementation of the 'PREADMISSIONS' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PreadmissionsService.#ctor">
            <summary>
            Initializes a new instance of the PreadmissionsService class.
            </summary>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.PreadmissionsServiceBase">
            <summary>
             An object representation of the 'PREADMISSIONS' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Preadmissions.cs file instead.
             All custom implementations should be done in the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Preadmissions"/> class.
             </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PreadmissionsServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Preadmissions"/> instance .
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PreadmissionsServiceBase.CreatePreadmissions(System.Decimal,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Decimal,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Decimal,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Decimal,System.Nullable{System.Decimal},System.Nullable{System.DateTime},System.String,System.Nullable{System.DateTime},System.String,System.String,System.Nullable{System.Decimal},System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.DateTime},System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
            <summary>
             A simple factory method to create a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Preadmissions"/> instance.
            </summary>
            <param name="_preadRefno"></param>
            <param name="_wlistRefno"></param>
            <param name="_xferSpontRefno"></param>
            <param name="_spectRefno"></param>
            <param name="_spbedRefno"></param>
            <param name="_admetRefno"></param>
            <param name="_adsorRefno"></param>
            <param name="_adcatRefno"></param>
            <param name="_notadRefno"></param>
            <param name="_spontRefno"></param>
            <param name="_inmgtRefno"></param>
            <param name="_procaRefno"></param>
            <param name="_readmRefno"></param>
            <param name="_patclRefno"></param>
            <param name="_patntRefno"></param>
            <param name="_admofRefno"></param>
            <param name="_admitDttm"></param>
            <param name="_firstRegular"></param>
            <param name="_expdsDttm"></param>
            <param name="_chronSick"></param>
            <param name="_silntRefrl"></param>
            <param name="_priorSpell"></param>
            <param name="_delivFacilities"></param>
            <param name="_archvFlag"></param>
            <param name="_stranRefno"></param>
            <param name="_priorPointer"></param>
            <param name="_admdcRefno"></param>
            <param name="_externalKey"></param>
            <param name="_wlistDttm"></param>
            <param name="_dtaDttm"></param>
            <param name="_closeDttm"></param>
            <param name="_borbdRefno"></param>
            <param name="_bedplRefno"></param>
            <param name="_xferDttm"></param>
            <param name="_cccccRefno"></param>
            <param name="_ownerHeorgRefno"></param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.PreadmissionsServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PreadmissionsServiceBase.GetByAdcatRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PREAD_ADCAT key.
            	CNA_PREAD_ADCAT Description: 
            </summary>
            <param name="_adcatRefno"></param>
            <returns>Returns a generic collection of Preadmissions objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PreadmissionsServiceBase.GetByAdcatRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PREAD_ADCAT key.
            	CNA_PREAD_ADCAT Description: 
            </summary>
            <param name="_adcatRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>Preadmissions</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PreadmissionsServiceBase.GetByAdmetRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PREAD_ADMET key.
            	CNA_PREAD_ADMET Description: 
            </summary>
            <param name="_admetRefno"></param>
            <returns>Returns a generic collection of Preadmissions objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PreadmissionsServiceBase.GetByAdmetRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PREAD_ADMET key.
            	CNA_PREAD_ADMET Description: 
            </summary>
            <param name="_admetRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>Preadmissions</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PreadmissionsServiceBase.GetByAdsorRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PREAD_ADSOR key.
            	CNA_PREAD_ADSOR Description: 
            </summary>
            <param name="_adsorRefno"></param>
            <returns>Returns a generic collection of Preadmissions objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PreadmissionsServiceBase.GetByAdsorRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PREAD_ADSOR key.
            	CNA_PREAD_ADSOR Description: 
            </summary>
            <param name="_adsorRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>Preadmissions</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PreadmissionsServiceBase.GetByInmgtRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PREAD_INMGT key.
            	CNA_PREAD_INMGT Description: 
            </summary>
            <param name="_inmgtRefno"></param>
            <returns>Returns a generic collection of Preadmissions objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PreadmissionsServiceBase.GetByInmgtRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PREAD_INMGT key.
            	CNA_PREAD_INMGT Description: 
            </summary>
            <param name="_inmgtRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>Preadmissions</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PreadmissionsServiceBase.GetByNotadRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PREAD_NOTAD key.
            	CNA_PREAD_NOTAD Description: 
            </summary>
            <param name="_notadRefno"></param>
            <returns>Returns a generic collection of Preadmissions objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PreadmissionsServiceBase.GetByNotadRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PREAD_NOTAD key.
            	CNA_PREAD_NOTAD Description: 
            </summary>
            <param name="_notadRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>Preadmissions</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PreadmissionsServiceBase.GetByPatclRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PREAD_PATCL key.
            	CNA_PREAD_PATCL Description: 
            </summary>
            <param name="_patclRefno"></param>
            <returns>Returns a generic collection of Preadmissions objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PreadmissionsServiceBase.GetByPatclRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PREAD_PATCL key.
            	CNA_PREAD_PATCL Description: 
            </summary>
            <param name="_patclRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>Preadmissions</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PreadmissionsServiceBase.GetByReadmRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PREAD_READM key.
            	CNA_PREAD_READM Description: 
            </summary>
            <param name="_readmRefno"></param>
            <returns>Returns a generic collection of Preadmissions objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PreadmissionsServiceBase.GetByReadmRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PREAD_READM key.
            	CNA_PREAD_READM Description: 
            </summary>
            <param name="_readmRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>Preadmissions</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PreadmissionsServiceBase.Get(iSOFT.ANZ.PatientManagerService.Entities.PreadmissionsKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PreadmissionsServiceBase.GetByAdmofRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PREAD_ADMOF index.
            </summary>
            <param name="_admofRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PreadmissionsServiceBase.GetByAdmofRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PREAD_ADMOF index.
            </summary>
            <param name="_admofRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PreadmissionsServiceBase.GetByAdmdcRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PREAD_ADMDC index.
            </summary>
            <param name="_admdcRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PreadmissionsServiceBase.GetByAdmdcRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PREAD_ADMDC index.
            </summary>
            <param name="_admdcRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PreadmissionsServiceBase.GetByCccccRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PREAD_CCCCC index.
            </summary>
            <param name="_cccccRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PreadmissionsServiceBase.GetByCccccRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PREAD_CCCCC index.
            </summary>
            <param name="_cccccRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PreadmissionsServiceBase.GetBySpbedRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PREAD_SPBED index.
            </summary>
            <param name="_spbedRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PreadmissionsServiceBase.GetBySpbedRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PREAD_SPBED index.
            </summary>
            <param name="_spbedRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PreadmissionsServiceBase.GetByBorbdRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PREAD_BORBD index.
            </summary>
            <param name="_borbdRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PreadmissionsServiceBase.GetByBorbdRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PREAD_BORBD index.
            </summary>
            <param name="_borbdRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PreadmissionsServiceBase.GetByBedplRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PREAD_BEDPL index.
            </summary>
            <param name="_bedplRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PreadmissionsServiceBase.GetByBedplRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PREAD_BEDPL index.
            </summary>
            <param name="_bedplRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PreadmissionsServiceBase.GetByPatntRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PREAD_PATNT index.
            </summary>
            <param name="_patntRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PreadmissionsServiceBase.GetByPatntRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PREAD_PATNT index.
            </summary>
            <param name="_patntRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PreadmissionsServiceBase.GetByProcaRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PREAD_PROCA index.
            </summary>
            <param name="_procaRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PreadmissionsServiceBase.GetByProcaRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PREAD_PROCA index.
            </summary>
            <param name="_procaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PreadmissionsServiceBase.GetByWlistRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PREAD_WLIST index.
            </summary>
            <param name="_wlistRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PreadmissionsServiceBase.GetByWlistRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PREAD_WLIST index.
            </summary>
            <param name="_wlistRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PreadmissionsServiceBase.GetByXferSpontRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PREAD_XFER_SPONT index.
            </summary>
            <param name="_xferSpontRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PreadmissionsServiceBase.GetByXferSpontRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PREAD_XFER_SPONT index.
            </summary>
            <param name="_xferSpontRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PreadmissionsServiceBase.GetBySpectRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PREAD_SPECT index.
            </summary>
            <param name="_spectRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PreadmissionsServiceBase.GetBySpectRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PREAD_SPECT index.
            </summary>
            <param name="_spectRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PreadmissionsServiceBase.GetBySpontRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PREAD_SPONT index.
            </summary>
            <param name="_spontRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PreadmissionsServiceBase.GetBySpontRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PREAD_SPONT index.
            </summary>
            <param name="_spontRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PreadmissionsServiceBase.GetByPreadRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_PREADMISSIONS index.
            </summary>
            <param name="_preadRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Preadmissions"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PreadmissionsServiceBase.GetByPreadRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_PREADMISSIONS index.
            </summary>
            <param name="_preadRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Preadmissions"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PreadmissionsServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Preadmissions" /> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PreadmissionsServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Preadmissions" /> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> </returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PreadmissionsServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Preadmissions</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PreadmissionsServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Preadmissions</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PreadmissionsServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Preadmissions</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PreadmissionsServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PreadmissionsServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.Preadmissions)">
            <summary>
            public virtual method that Inserts a Preadmissions object into the datasource using a transaction.
            </summary>
            <param name="entity">Preadmissions object to Insert.</param>
            <remarks>After Inserting into the datasource, the Preadmissions object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Preadmissions entity = new Preadmissions();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	PreadmissionsService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PreadmissionsServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.Preadmissions})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>Preadmissions</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Preadmissions</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Preadmissions.
             <code><![CDATA[
             TList<Preadmissions> list = new TList<Preadmissions>();
             Preadmissions entity = new Preadmissions();
             entity.StringProperty = "foo";
             Preadmissions entity2 = new Preadmissions();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	PreadmissionsService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PreadmissionsServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.Preadmissions)">
            <summary>
            public virtual method that Updates a Preadmissions object into the datasource using a transaction.
            </summary>
            <param name="entity">Preadmissions object to Update.</param>
            <remarks>After Updateing into the datasource, the Preadmissions object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Preadmissions entity = PreadmissionsService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	PreadmissionsService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PreadmissionsServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.Preadmissions})">
             <summary>
             public virtual method that Updates rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>Preadmissions</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Preadmissions</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Preadmissions.
             <code><![CDATA[
             TList<Preadmissions> list = new TList<Preadmissions>();
             Preadmissions entity = new Preadmissions();
             entity.StringProperty = "foo";
             Preadmissions entity2 = new Preadmissions();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	PreadmissionsService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PreadmissionsServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.Preadmissions)">
            <summary>
            public virtual method that Deletes a Preadmissions object into the datasource using a transaction.
            </summary>
            <param name="entity">Preadmissions object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Preadmissions object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Preadmissions entity = PreadmissionsService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	PreadmissionsService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PreadmissionsServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.Preadmissions})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>Preadmissions</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Preadmissions</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Preadmissions.
             <code><![CDATA[
             TList<Preadmissions> list = new TList<Preadmissions>();
             Preadmissions entity = new Preadmissions();
             entity.StringProperty = "foo";
             Preadmissions entity2 = new Preadmissions();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	PreadmissionsService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PreadmissionsServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.PreadmissionsKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PreadmissionsServiceBase.Delete(System.Decimal)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Decimal _preadRefno
            </summary>
            <param name="_preadRefno">Preadmissions pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.ProfCarerIdsService">
            <summary>
            An component type implementation of the 'PROF_CARER_IDS' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerIdsService.#ctor">
            <summary>
            Initializes a new instance of the ProfCarerIdsService class.
            </summary>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.ProfCarerIdsServiceBase">
            <summary>
             An object representation of the 'PROF_CARER_IDS' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ProfCarerIds.cs file instead.
             All custom implementations should be done in the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ProfCarerIds"/> class.
             </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerIdsServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ProfCarerIds"/> instance .
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerIdsServiceBase.CreateProfCarerIds(System.Nullable{System.Decimal},System.Decimal,System.String,System.DateTime,System.Nullable{System.DateTime},System.Nullable{System.Decimal},System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ProfCarerIds"/> instance.
            </summary>
            <param name="_citypRefno"></param>
            <param name="_procaRefno"></param>
            <param name="_identifier"></param>
            <param name="_startDttm"></param>
            <param name="_endDttm"></param>
            <param name="_ownerHeorgRefno"></param>
            <param name="_curntFlag"></param>
            <param name="_archvFlag"></param>
            <param name="_stranRefno"></param>
            <param name="_priorPointer"></param>
            <param name="_externalKey"></param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.ProfCarerIdsServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerIdsServiceBase.Get(iSOFT.ANZ.PatientManagerService.Entities.ProfCarerIdsKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerIdsServiceBase.GetByProcaRefnoCitypRefno(System.Decimal,System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_PRCAI_PROCA_CITYP index.
            </summary>
            <param name="_procaRefno"></param>
            <param name="_citypRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerIdsServiceBase.GetByProcaRefnoCitypRefno(System.Decimal,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_PRCAI_PROCA_CITYP index.
            </summary>
            <param name="_procaRefno"></param>
            <param name="_citypRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerIdsServiceBase.GetByProcaRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PRCAI_PROCA index.
            </summary>
            <param name="_procaRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerIdsServiceBase.GetByProcaRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PRCAI_PROCA index.
            </summary>
            <param name="_procaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerIdsServiceBase.GetByIdentifierProcaRefno(System.String,System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_PROF_CARER_IDS index.
            </summary>
            <param name="_identifier"></param>
            <param name="_procaRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerIdsServiceBase.GetByIdentifierProcaRefno(System.String,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_PROF_CARER_IDS index.
            </summary>
            <param name="_identifier"></param>
            <param name="_procaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerIdsServiceBase.GetByIdentifier(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_PRCAI_IDENT index.
            </summary>
            <param name="_identifier"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerIdsServiceBase.GetByIdentifier(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_PRCAI_IDENT index.
            </summary>
            <param name="_identifier"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerIdsServiceBase.GetByPrcaiRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_PROF_CARER_IDS index.
            </summary>
            <param name="_prcaiRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ProfCarerIds"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerIdsServiceBase.GetByPrcaiRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_PROF_CARER_IDS index.
            </summary>
            <param name="_prcaiRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ProfCarerIds"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerIdsServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ProfCarerIds" /> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerIdsServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ProfCarerIds" /> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> </returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerIdsServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ProfCarerIds</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerIdsServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ProfCarerIds</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerIdsServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ProfCarerIds</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerIdsServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerIdsServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.ProfCarerIds)">
            <summary>
            public virtual method that Inserts a ProfCarerIds object into the datasource using a transaction.
            </summary>
            <param name="entity">ProfCarerIds object to Insert.</param>
            <remarks>After Inserting into the datasource, the ProfCarerIds object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            ProfCarerIds entity = new ProfCarerIds();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ProfCarerIdsService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerIdsServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.ProfCarerIds})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProfCarerIds</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>ProfCarerIds</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of ProfCarerIds.
             <code><![CDATA[
             TList<ProfCarerIds> list = new TList<ProfCarerIds>();
             ProfCarerIds entity = new ProfCarerIds();
             entity.StringProperty = "foo";
             ProfCarerIds entity2 = new ProfCarerIds();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProfCarerIdsService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerIdsServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.ProfCarerIds)">
            <summary>
            public virtual method that Updates a ProfCarerIds object into the datasource using a transaction.
            </summary>
            <param name="entity">ProfCarerIds object to Update.</param>
            <remarks>After Updateing into the datasource, the ProfCarerIds object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            ProfCarerIds entity = ProfCarerIdsService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ProfCarerIdsService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerIdsServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.ProfCarerIds})">
             <summary>
             public virtual method that Updates rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProfCarerIds</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>ProfCarerIds</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of ProfCarerIds.
             <code><![CDATA[
             TList<ProfCarerIds> list = new TList<ProfCarerIds>();
             ProfCarerIds entity = new ProfCarerIds();
             entity.StringProperty = "foo";
             ProfCarerIds entity2 = new ProfCarerIds();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProfCarerIdsService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerIdsServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.ProfCarerIds)">
            <summary>
            public virtual method that Deletes a ProfCarerIds object into the datasource using a transaction.
            </summary>
            <param name="entity">ProfCarerIds object to Delete.</param>
            <remarks>After Deleteing into the datasource, the ProfCarerIds object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            ProfCarerIds entity = ProfCarerIdsService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ProfCarerIdsService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerIdsServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.ProfCarerIds})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProfCarerIds</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>ProfCarerIds</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of ProfCarerIds.
             <code><![CDATA[
             TList<ProfCarerIds> list = new TList<ProfCarerIds>();
             ProfCarerIds entity = new ProfCarerIds();
             entity.StringProperty = "foo";
             ProfCarerIds entity2 = new ProfCarerIds();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProfCarerIdsService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerIdsServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.ProfCarerIdsKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerIdsServiceBase.Delete(System.Decimal)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Decimal _prcaiRefno
            </summary>
            <param name="_prcaiRefno">ProfCarerIds pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.PeriodOfCareService">
            <summary>
            An component type implementation of the 'PERIOD_OF_CARE' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PeriodOfCareService.#ctor">
            <summary>
            Initializes a new instance of the PeriodOfCareService class.
            </summary>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.PeriodOfCareServiceBase">
            <summary>
             An object representation of the 'PERIOD_OF_CARE' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the PeriodOfCare.cs file instead.
             All custom implementations should be done in the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.PeriodOfCare"/> class.
             </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PeriodOfCareServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.PeriodOfCare"/> instance .
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PeriodOfCareServiceBase.CreatePeriodOfCare(System.Nullable{System.Decimal},System.Decimal,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
            <summary>
             A simple factory method to create a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.PeriodOfCare"/> instance.
            </summary>
            <param name="_reasnRefno"></param>
            <param name="_patntRefno"></param>
            <param name="_startDttm"></param>
            <param name="_endDttm"></param>
            <param name="_waitEndDttm"></param>
            <param name="_stranRefno"></param>
            <param name="_archvFlag"></param>
            <param name="_priorPointer"></param>
            <param name="_externalKey"></param>
            <param name="_procaRefno"></param>
            <param name="_ownerHeorgRefno"></param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.PeriodOfCareServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PeriodOfCareServiceBase.GetByReasnRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_POCAR_REASN key.
            	CNA_POCAR_REASN Description: 
            </summary>
            <param name="_reasnRefno"></param>
            <returns>Returns a generic collection of PeriodOfCare objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PeriodOfCareServiceBase.GetByReasnRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_POCAR_REASN key.
            	CNA_POCAR_REASN Description: 
            </summary>
            <param name="_reasnRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>PeriodOfCare</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PeriodOfCareServiceBase.Get(iSOFT.ANZ.PatientManagerService.Entities.PeriodOfCareKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PeriodOfCareServiceBase.GetByProcaRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_POCAR_PROCA index.
            </summary>
            <param name="_procaRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PeriodOfCareServiceBase.GetByProcaRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_POCAR_PROCA index.
            </summary>
            <param name="_procaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PeriodOfCareServiceBase.GetByPatntRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_POCAR_PATNT index.
            </summary>
            <param name="_patntRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PeriodOfCareServiceBase.GetByPatntRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_POCAR_PATNT index.
            </summary>
            <param name="_patntRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PeriodOfCareServiceBase.GetByPocarRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_PERIOD_OF_CARE index.
            </summary>
            <param name="_pocarRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.PeriodOfCare"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PeriodOfCareServiceBase.GetByPocarRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_PERIOD_OF_CARE index.
            </summary>
            <param name="_pocarRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.PeriodOfCare"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PeriodOfCareServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.PeriodOfCare" /> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PeriodOfCareServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.PeriodOfCare" /> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> </returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PeriodOfCareServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>PeriodOfCare</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PeriodOfCareServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>PeriodOfCare</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PeriodOfCareServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>PeriodOfCare</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PeriodOfCareServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PeriodOfCareServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.PeriodOfCare)">
            <summary>
            public virtual method that Inserts a PeriodOfCare object into the datasource using a transaction.
            </summary>
            <param name="entity">PeriodOfCare object to Insert.</param>
            <remarks>After Inserting into the datasource, the PeriodOfCare object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            PeriodOfCare entity = new PeriodOfCare();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	PeriodOfCareService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PeriodOfCareServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.PeriodOfCare})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>PeriodOfCare</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>PeriodOfCare</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of PeriodOfCare.
             <code><![CDATA[
             TList<PeriodOfCare> list = new TList<PeriodOfCare>();
             PeriodOfCare entity = new PeriodOfCare();
             entity.StringProperty = "foo";
             PeriodOfCare entity2 = new PeriodOfCare();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	PeriodOfCareService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PeriodOfCareServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.PeriodOfCare)">
            <summary>
            public virtual method that Updates a PeriodOfCare object into the datasource using a transaction.
            </summary>
            <param name="entity">PeriodOfCare object to Update.</param>
            <remarks>After Updateing into the datasource, the PeriodOfCare object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            PeriodOfCare entity = PeriodOfCareService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	PeriodOfCareService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PeriodOfCareServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.PeriodOfCare})">
             <summary>
             public virtual method that Updates rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>PeriodOfCare</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>PeriodOfCare</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of PeriodOfCare.
             <code><![CDATA[
             TList<PeriodOfCare> list = new TList<PeriodOfCare>();
             PeriodOfCare entity = new PeriodOfCare();
             entity.StringProperty = "foo";
             PeriodOfCare entity2 = new PeriodOfCare();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	PeriodOfCareService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PeriodOfCareServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.PeriodOfCare)">
            <summary>
            public virtual method that Deletes a PeriodOfCare object into the datasource using a transaction.
            </summary>
            <param name="entity">PeriodOfCare object to Delete.</param>
            <remarks>After Deleteing into the datasource, the PeriodOfCare object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            PeriodOfCare entity = PeriodOfCareService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	PeriodOfCareService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PeriodOfCareServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.PeriodOfCare})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>PeriodOfCare</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>PeriodOfCare</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of PeriodOfCare.
             <code><![CDATA[
             TList<PeriodOfCare> list = new TList<PeriodOfCare>();
             PeriodOfCare entity = new PeriodOfCare();
             entity.StringProperty = "foo";
             PeriodOfCare entity2 = new PeriodOfCare();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	PeriodOfCareService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PeriodOfCareServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.PeriodOfCareKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PeriodOfCareServiceBase.Delete(System.Decimal)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Decimal _pocarRefno
            </summary>
            <param name="_pocarRefno">PeriodOfCare pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.PatientProfCarersService">
            <summary>
            An component type implementation of the 'PATIENT_PROF_CARERS' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientProfCarersService.#ctor">
            <summary>
            Initializes a new instance of the PatientProfCarersService class.
            </summary>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.PatientProfCarersServiceBase">
            <summary>
             An object representation of the 'PATIENT_PROF_CARERS' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the PatientProfCarers.cs file instead.
             All custom implementations should be done in the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.PatientProfCarers"/> class.
             </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientProfCarersServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.PatientProfCarers"/> instance .
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientProfCarersServiceBase.CreatePatientProfCarers(System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Decimal,System.Nullable{System.Decimal},System.DateTime,System.Nullable{System.DateTime},System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
            <summary>
             A simple factory method to create a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.PatientProfCarers"/> instance.
            </summary>
            <param name="_prtypRefno"></param>
            <param name="_procaRefno"></param>
            <param name="_patntRefno"></param>
            <param name="_heorgRefno"></param>
            <param name="_startDttm"></param>
            <param name="_endDttm"></param>
            <param name="_curntFlag"></param>
            <param name="_archvFlag"></param>
            <param name="_stranRefno"></param>
            <param name="_priorPointer"></param>
            <param name="_externalKey"></param>
            <param name="_rotypMcode"></param>
            <param name="_ownerHeorgRefno"></param>
            <param name="_gpprfRefno"></param>
            <param name="_gprolRefno"></param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.PatientProfCarersServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientProfCarersServiceBase.Get(iSOFT.ANZ.PatientManagerService.Entities.PatientProfCarersKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientProfCarersServiceBase.GetByPatntRefnoProcaRefnoHeorgRefno(System.Decimal,System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_PATIENT_PROF_CARERS index.
            </summary>
            <param name="_patntRefno"></param>
            <param name="_procaRefno"></param>
            <param name="_heorgRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientProfCarersServiceBase.GetByPatntRefnoProcaRefnoHeorgRefno(System.Decimal,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_PATIENT_PROF_CARERS index.
            </summary>
            <param name="_patntRefno"></param>
            <param name="_procaRefno"></param>
            <param name="_heorgRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientProfCarersServiceBase.GetByProcaRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PATPC_PROCA index.
            </summary>
            <param name="_procaRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientProfCarersServiceBase.GetByProcaRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PATPC_PROCA index.
            </summary>
            <param name="_procaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientProfCarersServiceBase.GetByPatntRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PATPC_PATNT index.
            </summary>
            <param name="_patntRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientProfCarersServiceBase.GetByPatntRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PATPC_PATNT index.
            </summary>
            <param name="_patntRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientProfCarersServiceBase.GetByHeorgRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PATPC_HEORG index.
            </summary>
            <param name="_heorgRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientProfCarersServiceBase.GetByHeorgRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PATPC_HEORG index.
            </summary>
            <param name="_heorgRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientProfCarersServiceBase.GetByPatpcRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_PATIENT_PROF_CARERS index.
            </summary>
            <param name="_patpcRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.PatientProfCarers"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientProfCarersServiceBase.GetByPatpcRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_PATIENT_PROF_CARERS index.
            </summary>
            <param name="_patpcRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.PatientProfCarers"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientProfCarersServiceBase.GetByPrtypRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key SAH_PRTYP_PATPC index.
            </summary>
            <param name="_prtypRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientProfCarersServiceBase.GetByPrtypRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key SAH_PRTYP_PATPC index.
            </summary>
            <param name="_prtypRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientProfCarersServiceBase.GetByProcaRefnoPrtypRefno(System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_PATPC_PROCA_PRTYP index.
            </summary>
            <param name="_procaRefno"></param>
            <param name="_prtypRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientProfCarersServiceBase.GetByProcaRefnoPrtypRefno(System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_PATPC_PROCA_PRTYP index.
            </summary>
            <param name="_procaRefno"></param>
            <param name="_prtypRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientProfCarersServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.PatientProfCarers" /> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientProfCarersServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.PatientProfCarers" /> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> </returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientProfCarersServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>PatientProfCarers</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientProfCarersServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>PatientProfCarers</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientProfCarersServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>PatientProfCarers</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientProfCarersServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientProfCarersServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.PatientProfCarers)">
            <summary>
            public virtual method that Inserts a PatientProfCarers object into the datasource using a transaction.
            </summary>
            <param name="entity">PatientProfCarers object to Insert.</param>
            <remarks>After Inserting into the datasource, the PatientProfCarers object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            PatientProfCarers entity = new PatientProfCarers();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	PatientProfCarersService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientProfCarersServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.PatientProfCarers})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>PatientProfCarers</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>PatientProfCarers</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of PatientProfCarers.
             <code><![CDATA[
             TList<PatientProfCarers> list = new TList<PatientProfCarers>();
             PatientProfCarers entity = new PatientProfCarers();
             entity.StringProperty = "foo";
             PatientProfCarers entity2 = new PatientProfCarers();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	PatientProfCarersService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientProfCarersServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.PatientProfCarers)">
            <summary>
            public virtual method that Updates a PatientProfCarers object into the datasource using a transaction.
            </summary>
            <param name="entity">PatientProfCarers object to Update.</param>
            <remarks>After Updateing into the datasource, the PatientProfCarers object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            PatientProfCarers entity = PatientProfCarersService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	PatientProfCarersService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientProfCarersServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.PatientProfCarers})">
             <summary>
             public virtual method that Updates rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>PatientProfCarers</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>PatientProfCarers</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of PatientProfCarers.
             <code><![CDATA[
             TList<PatientProfCarers> list = new TList<PatientProfCarers>();
             PatientProfCarers entity = new PatientProfCarers();
             entity.StringProperty = "foo";
             PatientProfCarers entity2 = new PatientProfCarers();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	PatientProfCarersService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientProfCarersServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.PatientProfCarers)">
            <summary>
            public virtual method that Deletes a PatientProfCarers object into the datasource using a transaction.
            </summary>
            <param name="entity">PatientProfCarers object to Delete.</param>
            <remarks>After Deleteing into the datasource, the PatientProfCarers object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            PatientProfCarers entity = PatientProfCarersService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	PatientProfCarersService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientProfCarersServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.PatientProfCarers})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>PatientProfCarers</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>PatientProfCarers</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of PatientProfCarers.
             <code><![CDATA[
             TList<PatientProfCarers> list = new TList<PatientProfCarers>();
             PatientProfCarers entity = new PatientProfCarers();
             entity.StringProperty = "foo";
             PatientProfCarers entity2 = new PatientProfCarers();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	PatientProfCarersService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientProfCarersServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.PatientProfCarersKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientProfCarersServiceBase.Delete(System.Decimal)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Decimal _patpcRefno
            </summary>
            <param name="_patpcRefno">PatientProfCarers pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.ProfCarerSpecialtiesService">
            <summary>
            An component type implementation of the 'PROF_CARER_SPECIALTIES' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerSpecialtiesService.#ctor">
            <summary>
            Initializes a new instance of the ProfCarerSpecialtiesService class.
            </summary>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.ProfCarerSpecialtiesServiceBase">
            <summary>
             An object representation of the 'PROF_CARER_SPECIALTIES' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ProfCarerSpecialties.cs file instead.
             All custom implementations should be done in the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ProfCarerSpecialties"/> class.
             </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerSpecialtiesServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ProfCarerSpecialties"/> instance .
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerSpecialtiesServiceBase.CreateProfCarerSpecialties(System.Decimal,System.Decimal,System.Nullable{System.Decimal},System.Decimal,System.DateTime,System.Nullable{System.DateTime},System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ProfCarerSpecialties"/> instance.
            </summary>
            <param name="_prcasRefno"></param>
            <param name="_spectRefno"></param>
            <param name="_cstypRefno"></param>
            <param name="_procaRefno"></param>
            <param name="_startDttm"></param>
            <param name="_endDttm"></param>
            <param name="_archvFlag"></param>
            <param name="_stranRefno"></param>
            <param name="_priorPointer"></param>
            <param name="_externalKey"></param>
            <param name="_ownerHeorgRefno"></param>
            <param name="_pbkLeadTime"></param>
            <param name="_pbkLeadTimeUnits"></param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.ProfCarerSpecialtiesServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerSpecialtiesServiceBase.GetByCstypRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PRCAS_CSTYP key.
            	CNA_PRCAS_CSTYP Description: 
            </summary>
            <param name="_cstypRefno"></param>
            <returns>Returns a generic collection of ProfCarerSpecialties objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerSpecialtiesServiceBase.GetByCstypRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PRCAS_CSTYP key.
            	CNA_PRCAS_CSTYP Description: 
            </summary>
            <param name="_cstypRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>ProfCarerSpecialties</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerSpecialtiesServiceBase.Get(iSOFT.ANZ.PatientManagerService.Entities.ProfCarerSpecialtiesKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerSpecialtiesServiceBase.GetByPrcasRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_PROF_CARER_SPECIALTIES index.
            </summary>
            <param name="_prcasRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ProfCarerSpecialties"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerSpecialtiesServiceBase.GetByPrcasRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_PROF_CARER_SPECIALTIES index.
            </summary>
            <param name="_prcasRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ProfCarerSpecialties"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerSpecialtiesServiceBase.GetByProcaRefnoSpectRefno(System.Decimal,System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_PROF_CARER_SPECIALTIES index.
            </summary>
            <param name="_procaRefno"></param>
            <param name="_spectRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerSpecialtiesServiceBase.GetByProcaRefnoSpectRefno(System.Decimal,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_PROF_CARER_SPECIALTIES index.
            </summary>
            <param name="_procaRefno"></param>
            <param name="_spectRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerSpecialtiesServiceBase.GetBySpectRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PRCAS_SPECT index.
            </summary>
            <param name="_spectRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerSpecialtiesServiceBase.GetBySpectRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PRCAS_SPECT index.
            </summary>
            <param name="_spectRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerSpecialtiesServiceBase.GetByProcaRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PRCAS_PROCA index.
            </summary>
            <param name="_procaRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerSpecialtiesServiceBase.GetByProcaRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PRCAS_PROCA index.
            </summary>
            <param name="_procaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerSpecialtiesServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ProfCarerSpecialties" /> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerSpecialtiesServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.ProfCarerSpecialties" /> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> </returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerSpecialtiesServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ProfCarerSpecialties</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerSpecialtiesServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ProfCarerSpecialties</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerSpecialtiesServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ProfCarerSpecialties</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerSpecialtiesServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerSpecialtiesServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.ProfCarerSpecialties)">
            <summary>
            public virtual method that Inserts a ProfCarerSpecialties object into the datasource using a transaction.
            </summary>
            <param name="entity">ProfCarerSpecialties object to Insert.</param>
            <remarks>After Inserting into the datasource, the ProfCarerSpecialties object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            ProfCarerSpecialties entity = new ProfCarerSpecialties();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ProfCarerSpecialtiesService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerSpecialtiesServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.ProfCarerSpecialties})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProfCarerSpecialties</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>ProfCarerSpecialties</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of ProfCarerSpecialties.
             <code><![CDATA[
             TList<ProfCarerSpecialties> list = new TList<ProfCarerSpecialties>();
             ProfCarerSpecialties entity = new ProfCarerSpecialties();
             entity.StringProperty = "foo";
             ProfCarerSpecialties entity2 = new ProfCarerSpecialties();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProfCarerSpecialtiesService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerSpecialtiesServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.ProfCarerSpecialties)">
            <summary>
            public virtual method that Updates a ProfCarerSpecialties object into the datasource using a transaction.
            </summary>
            <param name="entity">ProfCarerSpecialties object to Update.</param>
            <remarks>After Updateing into the datasource, the ProfCarerSpecialties object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            ProfCarerSpecialties entity = ProfCarerSpecialtiesService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ProfCarerSpecialtiesService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerSpecialtiesServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.ProfCarerSpecialties})">
             <summary>
             public virtual method that Updates rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProfCarerSpecialties</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>ProfCarerSpecialties</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of ProfCarerSpecialties.
             <code><![CDATA[
             TList<ProfCarerSpecialties> list = new TList<ProfCarerSpecialties>();
             ProfCarerSpecialties entity = new ProfCarerSpecialties();
             entity.StringProperty = "foo";
             ProfCarerSpecialties entity2 = new ProfCarerSpecialties();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProfCarerSpecialtiesService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerSpecialtiesServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.ProfCarerSpecialties)">
            <summary>
            public virtual method that Deletes a ProfCarerSpecialties object into the datasource using a transaction.
            </summary>
            <param name="entity">ProfCarerSpecialties object to Delete.</param>
            <remarks>After Deleteing into the datasource, the ProfCarerSpecialties object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            ProfCarerSpecialties entity = ProfCarerSpecialtiesService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ProfCarerSpecialtiesService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerSpecialtiesServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.ProfCarerSpecialties})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>ProfCarerSpecialties</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>ProfCarerSpecialties</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of ProfCarerSpecialties.
             <code><![CDATA[
             TList<ProfCarerSpecialties> list = new TList<ProfCarerSpecialties>();
             ProfCarerSpecialties entity = new ProfCarerSpecialties();
             entity.StringProperty = "foo";
             ProfCarerSpecialties entity2 = new ProfCarerSpecialties();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProfCarerSpecialtiesService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerSpecialtiesServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.ProfCarerSpecialtiesKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProfCarerSpecialtiesServiceBase.Delete(System.Decimal)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Decimal _prcasRefno
            </summary>
            <param name="_prcasRefno">ProfCarerSpecialties pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.PatientPersonalCarersService">
            <summary>
            An component type implementation of the 'PATIENT_PERSONAL_CARERS' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientPersonalCarersService.#ctor">
            <summary>
            Initializes a new instance of the PatientPersonalCarersService class.
            </summary>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.PatientPersonalCarersServiceBase">
            <summary>
             An object representation of the 'PATIENT_PERSONAL_CARERS' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the PatientPersonalCarers.cs file instead.
             All custom implementations should be done in the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.PatientPersonalCarers"/> class.
             </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientPersonalCarersServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.PatientPersonalCarers"/> instance .
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientPersonalCarersServiceBase.CreatePatientPersonalCarers(System.Decimal,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Decimal,System.Decimal,System.DateTime,System.Nullable{System.DateTime},System.String,System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.String,System.String,System.String,System.Nullable{System.Decimal},System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.PatientPersonalCarers"/> instance.
            </summary>
            <param name="_papcaRefno"></param>
            <param name="_petypRefno"></param>
            <param name="_reltnRefno"></param>
            <param name="_inforRefno"></param>
            <param name="_percaRefno"></param>
            <param name="_patntRefno"></param>
            <param name="_startDttm"></param>
            <param name="_endDttm"></param>
            <param name="_curntFlag"></param>
            <param name="_cntctAllowed"></param>
            <param name="_archvFlag"></param>
            <param name="_stranRefno"></param>
            <param name="_priorPointer"></param>
            <param name="_externalKey"></param>
            <param name="_lgrspRefno"></param>
            <param name="_legalResponsibility"></param>
            <param name="_usePatientAddress"></param>
            <param name="_sendPatntCorresTo"></param>
            <param name="_ownerHeorgRefno"></param>
            <param name="_babyLink"></param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.PatientPersonalCarersServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientPersonalCarersServiceBase.GetByInforRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PAPCA_INFOR key.
            	CNA_PAPCA_INFOR Description: 
            </summary>
            <param name="_inforRefno"></param>
            <returns>Returns a generic collection of PatientPersonalCarers objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientPersonalCarersServiceBase.GetByInforRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PAPCA_INFOR key.
            	CNA_PAPCA_INFOR Description: 
            </summary>
            <param name="_inforRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>PatientPersonalCarers</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientPersonalCarersServiceBase.GetByLgrspRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PAPCA_LGRSP key.
            	CNA_PAPCA_LGRSP Description: 
            </summary>
            <param name="_lgrspRefno"></param>
            <returns>Returns a generic collection of PatientPersonalCarers objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientPersonalCarersServiceBase.GetByLgrspRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PAPCA_LGRSP key.
            	CNA_PAPCA_LGRSP Description: 
            </summary>
            <param name="_lgrspRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>PatientPersonalCarers</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientPersonalCarersServiceBase.GetByPetypRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PAPCA_PETYP key.
            	CNA_PAPCA_PETYP Description: 
            </summary>
            <param name="_petypRefno"></param>
            <returns>Returns a generic collection of PatientPersonalCarers objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientPersonalCarersServiceBase.GetByPetypRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PAPCA_PETYP key.
            	CNA_PAPCA_PETYP Description: 
            </summary>
            <param name="_petypRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>PatientPersonalCarers</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientPersonalCarersServiceBase.GetByReltnRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PAPCA_RELTN key.
            	CNA_PAPCA_RELTN Description: 
            </summary>
            <param name="_reltnRefno"></param>
            <returns>Returns a generic collection of PatientPersonalCarers objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientPersonalCarersServiceBase.GetByReltnRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_PAPCA_RELTN key.
            	CNA_PAPCA_RELTN Description: 
            </summary>
            <param name="_reltnRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>PatientPersonalCarers</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientPersonalCarersServiceBase.Get(iSOFT.ANZ.PatientManagerService.Entities.PatientPersonalCarersKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientPersonalCarersServiceBase.GetByPatntRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PAPCA_PATNT index.
            </summary>
            <param name="_patntRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientPersonalCarersServiceBase.GetByPatntRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PAPCA_PATNT index.
            </summary>
            <param name="_patntRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientPersonalCarersServiceBase.GetByPapcaRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_PATIENT_PERSONAL_CARERS index.
            </summary>
            <param name="_papcaRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.PatientPersonalCarers"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientPersonalCarersServiceBase.GetByPapcaRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_PATIENT_PERSONAL_CARERS index.
            </summary>
            <param name="_papcaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.PatientPersonalCarers"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientPersonalCarersServiceBase.GetByPatntRefnoCntctAllowed(System.Decimal,System.String)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PAPCA_PATNT_CNTCT index.
            </summary>
            <param name="_patntRefno"></param>
            <param name="_cntctAllowed"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientPersonalCarersServiceBase.GetByPatntRefnoCntctAllowed(System.Decimal,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PAPCA_PATNT_CNTCT index.
            </summary>
            <param name="_patntRefno"></param>
            <param name="_cntctAllowed"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientPersonalCarersServiceBase.GetByPercaRefnoReltnRefno(System.Decimal,System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_PAPCA_PERCA_RELTN index.
            </summary>
            <param name="_percaRefno"></param>
            <param name="_reltnRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientPersonalCarersServiceBase.GetByPercaRefnoReltnRefno(System.Decimal,System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_PAPCA_PERCA_RELTN index.
            </summary>
            <param name="_percaRefno"></param>
            <param name="_reltnRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientPersonalCarersServiceBase.GetByPatntRefnoPercaRefno(System.Decimal,System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_PATIENT_PERSONAL_CARERS index.
            </summary>
            <param name="_patntRefno"></param>
            <param name="_percaRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientPersonalCarersServiceBase.GetByPatntRefnoPercaRefno(System.Decimal,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_PATIENT_PERSONAL_CARERS index.
            </summary>
            <param name="_patntRefno"></param>
            <param name="_percaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientPersonalCarersServiceBase.GetByPercaRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PAPCA_PERCA index.
            </summary>
            <param name="_percaRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientPersonalCarersServiceBase.GetByPercaRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_PAPCA_PERCA index.
            </summary>
            <param name="_percaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientPersonalCarersServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.PatientPersonalCarers" /> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientPersonalCarersServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.PatientPersonalCarers" /> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> </returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientPersonalCarersServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>PatientPersonalCarers</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientPersonalCarersServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>PatientPersonalCarers</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientPersonalCarersServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>PatientPersonalCarers</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientPersonalCarersServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientPersonalCarersServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.PatientPersonalCarers)">
            <summary>
            public virtual method that Inserts a PatientPersonalCarers object into the datasource using a transaction.
            </summary>
            <param name="entity">PatientPersonalCarers object to Insert.</param>
            <remarks>After Inserting into the datasource, the PatientPersonalCarers object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            PatientPersonalCarers entity = new PatientPersonalCarers();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	PatientPersonalCarersService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientPersonalCarersServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.PatientPersonalCarers})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>PatientPersonalCarers</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>PatientPersonalCarers</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of PatientPersonalCarers.
             <code><![CDATA[
             TList<PatientPersonalCarers> list = new TList<PatientPersonalCarers>();
             PatientPersonalCarers entity = new PatientPersonalCarers();
             entity.StringProperty = "foo";
             PatientPersonalCarers entity2 = new PatientPersonalCarers();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	PatientPersonalCarersService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientPersonalCarersServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.PatientPersonalCarers)">
            <summary>
            public virtual method that Updates a PatientPersonalCarers object into the datasource using a transaction.
            </summary>
            <param name="entity">PatientPersonalCarers object to Update.</param>
            <remarks>After Updateing into the datasource, the PatientPersonalCarers object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            PatientPersonalCarers entity = PatientPersonalCarersService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	PatientPersonalCarersService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientPersonalCarersServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.PatientPersonalCarers})">
             <summary>
             public virtual method that Updates rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>PatientPersonalCarers</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>PatientPersonalCarers</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of PatientPersonalCarers.
             <code><![CDATA[
             TList<PatientPersonalCarers> list = new TList<PatientPersonalCarers>();
             PatientPersonalCarers entity = new PatientPersonalCarers();
             entity.StringProperty = "foo";
             PatientPersonalCarers entity2 = new PatientPersonalCarers();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	PatientPersonalCarersService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientPersonalCarersServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.PatientPersonalCarers)">
            <summary>
            public virtual method that Deletes a PatientPersonalCarers object into the datasource using a transaction.
            </summary>
            <param name="entity">PatientPersonalCarers object to Delete.</param>
            <remarks>After Deleteing into the datasource, the PatientPersonalCarers object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            PatientPersonalCarers entity = PatientPersonalCarersService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	PatientPersonalCarersService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientPersonalCarersServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.PatientPersonalCarers})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>PatientPersonalCarers</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>PatientPersonalCarers</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of PatientPersonalCarers.
             <code><![CDATA[
             TList<PatientPersonalCarers> list = new TList<PatientPersonalCarers>();
             PatientPersonalCarers entity = new PatientPersonalCarers();
             entity.StringProperty = "foo";
             PatientPersonalCarers entity2 = new PatientPersonalCarers();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	PatientPersonalCarersService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientPersonalCarersServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.PatientPersonalCarersKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.PatientPersonalCarersServiceBase.Delete(System.Decimal)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Decimal _papcaRefno
            </summary>
            <param name="_papcaRefno">PatientPersonalCarers pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.HomeLeavesService">
            <summary>
            An component type implementation of the 'HOME_LEAVES' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HomeLeavesService.#ctor">
            <summary>
            Initializes a new instance of the HomeLeavesService class.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HomeLeavesService.GetEventsInTimePeriod(System.Decimal,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.DateTime,System.DateTime,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key HSS_BEDST_START index.
            </summary>
            <param name="_startDttm"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.HomeLeavesServiceBase">
            <summary>
             An object representation of the 'HOME_LEAVES' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the HomeLeaves.cs file instead.
             All custom implementations should be done in the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.HomeLeaves"/> class.
             </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HomeLeavesServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.HomeLeaves"/> instance .
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HomeLeavesServiceBase.CreateHomeLeaves(System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Decimal,System.DateTime,System.Nullable{System.DateTime},System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.DateTime},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.DateTime},System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.DateTime,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.HomeLeaves"/> instance.
            </summary>
            <param name="_sstayRefno"></param>
            <param name="_prvspRefno"></param>
            <param name="_patntRefno"></param>
            <param name="_startDttm"></param>
            <param name="_endDttm"></param>
            <param name="_archvFlag"></param>
            <param name="_stranRefno"></param>
            <param name="_priorPointer"></param>
            <param name="_externalKey"></param>
            <param name="_exptdReturnDttm"></param>
            <param name="_plgstRefno"></param>
            <param name="_lvtypRefno"></param>
            <param name="_lveocRefno"></param>
            <param name="_recallDttm"></param>
            <param name="_comments"></param>
            <param name="_prvsnFlag"></param>
            <param name="_percaRefno"></param>
            <param name="_rehmlRefno"></param>
            <param name="_latestReturnDttm"></param>
            <param name="_freeBed"></param>
            <param name="_ownerHeorgRefno"></param>
            <param name="_extHeorgRefno"></param>
            <param name="_extHeorgPasid"></param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.HomeLeavesServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HomeLeavesServiceBase.GetByLveocRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_HOMEL_LVEOC key.
            	CNA_HOMEL_LVEOC Description: 
            </summary>
            <param name="_lveocRefno"></param>
            <returns>Returns a generic collection of HomeLeaves objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HomeLeavesServiceBase.GetByLveocRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_HOMEL_LVEOC key.
            	CNA_HOMEL_LVEOC Description: 
            </summary>
            <param name="_lveocRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>HomeLeaves</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HomeLeavesServiceBase.GetByLvtypRefno(System.Nullable{System.Decimal})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_HOMEL_LVTYP key.
            	CNA_HOMEL_LVTYP Description: 
            </summary>
            <param name="_lvtypRefno"></param>
            <returns>Returns a generic collection of HomeLeaves objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HomeLeavesServiceBase.GetByLvtypRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the CNA_HOMEL_LVTYP key.
            	CNA_HOMEL_LVTYP Description: 
            </summary>
            <param name="_lvtypRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> of <c>HomeLeaves</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HomeLeavesServiceBase.Get(iSOFT.ANZ.PatientManagerService.Entities.HomeLeavesKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HomeLeavesServiceBase.GetByPercaRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_HOMEL_PERCA index.
            </summary>
            <param name="_percaRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HomeLeavesServiceBase.GetByPercaRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_HOMEL_PERCA index.
            </summary>
            <param name="_percaRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HomeLeavesServiceBase.GetByPrvspRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_HOMEL_PRVSP index.
            </summary>
            <param name="_prvspRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HomeLeavesServiceBase.GetByPrvspRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_HOMEL_PRVSP index.
            </summary>
            <param name="_prvspRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HomeLeavesServiceBase.GetBySstayRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_HOMEL_SSTAY index.
            </summary>
            <param name="_sstayRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HomeLeavesServiceBase.GetBySstayRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_HOMEL_SSTAY index.
            </summary>
            <param name="_sstayRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HomeLeavesServiceBase.GetByPatntRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_HOMEL_PATNT index.
            </summary>
            <param name="_patntRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HomeLeavesServiceBase.GetByPatntRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_HOMEL_PATNT index.
            </summary>
            <param name="_patntRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HomeLeavesServiceBase.GetByPlgstRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_HOMEL_PLGST index.
            </summary>
            <param name="_plgstRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HomeLeavesServiceBase.GetByPlgstRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_HOMEL_PLGST index.
            </summary>
            <param name="_plgstRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HomeLeavesServiceBase.GetByHomelRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_HOME_LEAVES index.
            </summary>
            <param name="_homelRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.HomeLeaves"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HomeLeavesServiceBase.GetByHomelRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_HOME_LEAVES index.
            </summary>
            <param name="_homelRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.HomeLeaves"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HomeLeavesServiceBase.GetByPrvsnFlag(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key SAH_HOMEL_PRVSN_FLAG index.
            </summary>
            <param name="_prvsnFlag"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HomeLeavesServiceBase.GetByPrvsnFlag(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key SAH_HOMEL_PRVSN_FLAG index.
            </summary>
            <param name="_prvsnFlag"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HomeLeavesServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.HomeLeaves" /> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HomeLeavesServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.HomeLeaves" /> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> </returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HomeLeavesServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>HomeLeaves</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HomeLeavesServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>HomeLeaves</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HomeLeavesServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>HomeLeaves</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HomeLeavesServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HomeLeavesServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.HomeLeaves)">
            <summary>
            public virtual method that Inserts a HomeLeaves object into the datasource using a transaction.
            </summary>
            <param name="entity">HomeLeaves object to Insert.</param>
            <remarks>After Inserting into the datasource, the HomeLeaves object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            HomeLeaves entity = new HomeLeaves();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	HomeLeavesService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HomeLeavesServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.HomeLeaves})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>HomeLeaves</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>HomeLeaves</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of HomeLeaves.
             <code><![CDATA[
             TList<HomeLeaves> list = new TList<HomeLeaves>();
             HomeLeaves entity = new HomeLeaves();
             entity.StringProperty = "foo";
             HomeLeaves entity2 = new HomeLeaves();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	HomeLeavesService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HomeLeavesServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.HomeLeaves)">
            <summary>
            public virtual method that Updates a HomeLeaves object into the datasource using a transaction.
            </summary>
            <param name="entity">HomeLeaves object to Update.</param>
            <remarks>After Updateing into the datasource, the HomeLeaves object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            HomeLeaves entity = HomeLeavesService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	HomeLeavesService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HomeLeavesServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.HomeLeaves})">
             <summary>
             public virtual method that Updates rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>HomeLeaves</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>HomeLeaves</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of HomeLeaves.
             <code><![CDATA[
             TList<HomeLeaves> list = new TList<HomeLeaves>();
             HomeLeaves entity = new HomeLeaves();
             entity.StringProperty = "foo";
             HomeLeaves entity2 = new HomeLeaves();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	HomeLeavesService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HomeLeavesServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.HomeLeaves)">
            <summary>
            public virtual method that Deletes a HomeLeaves object into the datasource using a transaction.
            </summary>
            <param name="entity">HomeLeaves object to Delete.</param>
            <remarks>After Deleteing into the datasource, the HomeLeaves object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            HomeLeaves entity = HomeLeavesService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	HomeLeavesService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HomeLeavesServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.HomeLeaves})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>HomeLeaves</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>HomeLeaves</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of HomeLeaves.
             <code><![CDATA[
             TList<HomeLeaves> list = new TList<HomeLeaves>();
             HomeLeaves entity = new HomeLeaves();
             entity.StringProperty = "foo";
             HomeLeaves entity2 = new HomeLeaves();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	HomeLeavesService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HomeLeavesServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.HomeLeavesKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.HomeLeavesServiceBase.Delete(System.Decimal)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Decimal _homelRefno
            </summary>
            <param name="_homelRefno">HomeLeaves pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.OdpcdScrutiniesService">
            <summary>
            An component type implementation of the 'ODPCD_SCRUTINIES' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.OdpcdScrutiniesService.#ctor">
            <summary>
            Initializes a new instance of the OdpcdScrutiniesService class.
            </summary>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.OdpcdScrutiniesServiceBase">
            <summary>
             An object representation of the 'ODPCD_SCRUTINIES' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the OdpcdScrutinies.cs file instead.
             All custom implementations should be done in the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.OdpcdScrutinies"/> class.
             </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.OdpcdScrutiniesServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.OdpcdScrutinies"/> instance .
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.OdpcdScrutiniesServiceBase.CreateOdpcdScrutinies(System.Decimal,System.String,System.String,System.Nullable{System.Decimal},System.String,System.String,System.String,System.String,System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
            <summary>
             A simple factory method to create a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.OdpcdScrutinies"/> instance.
            </summary>
            <param name="_odpscRefno"></param>
            <param name="_code"></param>
            <param name="_ccsxtCode"></param>
            <param name="_rulesRefno"></param>
            <param name="_safeNameOperator"></param>
            <param name="_value"></param>
            <param name="_absoluteFlag"></param>
            <param name="_archvFlag"></param>
            <param name="_stranRefno"></param>
            <param name="_externalKey"></param>
            <param name="_ownerHeorgRefno"></param>
            <param name="_dftopRefno"></param>
            <param name="_dftvlRefno"></param>
            <param name="_sqrulRefno"></param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.OdpcdScrutiniesServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.OdpcdScrutiniesServiceBase.Get(iSOFT.ANZ.PatientManagerService.Entities.OdpcdScrutiniesKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.OdpcdScrutiniesServiceBase.GetByCcsxtCodeCode(System.String,System.String)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_ODPSC_CCSXT_CODE index.
            </summary>
            <param name="_ccsxtCode"></param>
            <param name="_code"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.OdpcdScrutiniesServiceBase.GetByCcsxtCodeCode(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_ODPSC_CCSXT_CODE index.
            </summary>
            <param name="_ccsxtCode"></param>
            <param name="_code"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.OdpcdScrutiniesServiceBase.GetByRulesRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_ODPSC_RULES index.
            </summary>
            <param name="_rulesRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.OdpcdScrutiniesServiceBase.GetByRulesRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_ODPSC_RULES index.
            </summary>
            <param name="_rulesRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.OdpcdScrutiniesServiceBase.GetByOdpscRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_ODPCD_SCRUTINIES index.
            </summary>
            <param name="_odpscRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.OdpcdScrutinies"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.OdpcdScrutiniesServiceBase.GetByOdpscRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_ODPCD_SCRUTINIES index.
            </summary>
            <param name="_odpscRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.OdpcdScrutinies"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.OdpcdScrutiniesServiceBase.GetByCode(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_ODPCS_CODE index.
            </summary>
            <param name="_code"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.OdpcdScrutiniesServiceBase.GetByCode(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_ODPCS_CODE index.
            </summary>
            <param name="_code"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.OdpcdScrutiniesServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.OdpcdScrutinies" /> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.OdpcdScrutiniesServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.OdpcdScrutinies" /> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> </returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.OdpcdScrutiniesServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>OdpcdScrutinies</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.OdpcdScrutiniesServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>OdpcdScrutinies</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.OdpcdScrutiniesServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>OdpcdScrutinies</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.OdpcdScrutiniesServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.OdpcdScrutiniesServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.OdpcdScrutinies)">
            <summary>
            public virtual method that Inserts a OdpcdScrutinies object into the datasource using a transaction.
            </summary>
            <param name="entity">OdpcdScrutinies object to Insert.</param>
            <remarks>After Inserting into the datasource, the OdpcdScrutinies object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            OdpcdScrutinies entity = new OdpcdScrutinies();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	OdpcdScrutiniesService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.OdpcdScrutiniesServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.OdpcdScrutinies})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>OdpcdScrutinies</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>OdpcdScrutinies</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of OdpcdScrutinies.
             <code><![CDATA[
             TList<OdpcdScrutinies> list = new TList<OdpcdScrutinies>();
             OdpcdScrutinies entity = new OdpcdScrutinies();
             entity.StringProperty = "foo";
             OdpcdScrutinies entity2 = new OdpcdScrutinies();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	OdpcdScrutiniesService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.OdpcdScrutiniesServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.OdpcdScrutinies)">
            <summary>
            public virtual method that Updates a OdpcdScrutinies object into the datasource using a transaction.
            </summary>
            <param name="entity">OdpcdScrutinies object to Update.</param>
            <remarks>After Updateing into the datasource, the OdpcdScrutinies object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            OdpcdScrutinies entity = OdpcdScrutiniesService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	OdpcdScrutiniesService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.OdpcdScrutiniesServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.OdpcdScrutinies})">
             <summary>
             public virtual method that Updates rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>OdpcdScrutinies</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>OdpcdScrutinies</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of OdpcdScrutinies.
             <code><![CDATA[
             TList<OdpcdScrutinies> list = new TList<OdpcdScrutinies>();
             OdpcdScrutinies entity = new OdpcdScrutinies();
             entity.StringProperty = "foo";
             OdpcdScrutinies entity2 = new OdpcdScrutinies();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	OdpcdScrutiniesService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.OdpcdScrutiniesServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.OdpcdScrutinies)">
            <summary>
            public virtual method that Deletes a OdpcdScrutinies object into the datasource using a transaction.
            </summary>
            <param name="entity">OdpcdScrutinies object to Delete.</param>
            <remarks>After Deleteing into the datasource, the OdpcdScrutinies object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            OdpcdScrutinies entity = OdpcdScrutiniesService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	OdpcdScrutiniesService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.OdpcdScrutiniesServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.OdpcdScrutinies})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>OdpcdScrutinies</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>OdpcdScrutinies</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of OdpcdScrutinies.
             <code><![CDATA[
             TList<OdpcdScrutinies> list = new TList<OdpcdScrutinies>();
             OdpcdScrutinies entity = new OdpcdScrutinies();
             entity.StringProperty = "foo";
             OdpcdScrutinies entity2 = new OdpcdScrutinies();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	OdpcdScrutiniesService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.OdpcdScrutiniesServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.OdpcdScrutiniesKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.OdpcdScrutiniesServiceBase.Delete(System.Decimal)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Decimal _odpscRefno
            </summary>
            <param name="_odpscRefno">OdpcdScrutinies pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.NotesService">
            <summary>
            An component type implementation of the 'NOTES' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.NotesService.#ctor">
            <summary>
            Initializes a new instance of the NotesService class.
            </summary>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.NotesServiceBase">
            <summary>
             An object representation of the 'NOTES' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Notes.cs file instead.
             All custom implementations should be done in the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Notes"/> class.
             </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.NotesServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Notes"/> instance .
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.NotesServiceBase.CreateNotes(System.Object,System.String,System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Notes"/> instance.
            </summary>
            <param name="_note"></param>
            <param name="_keyWords"></param>
            <param name="_notexCode"></param>
            <param name="_archvFlag"></param>
            <param name="_stranRefno"></param>
            <param name="_priorPointer"></param>
            <param name="_externalKey"></param>
            <param name="_ownerHeorgRefno"></param>
            <param name="_synCode"></param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.NotesServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.NotesServiceBase.Get(iSOFT.ANZ.PatientManagerService.Entities.NotesKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.NotesServiceBase.GetByNotexCode(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_NOTES index.
            </summary>
            <param name="_notexCode"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.NotesServiceBase.GetByNotexCode(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_NOTES index.
            </summary>
            <param name="_notexCode"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.NotesServiceBase.GetByNotesRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_NOTES index.
            </summary>
            <param name="_notesRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Notes"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.NotesServiceBase.GetByNotesRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_NOTES index.
            </summary>
            <param name="_notesRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Notes"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.NotesServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Notes" /> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.NotesServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.Notes" /> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> </returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.NotesServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Notes</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.NotesServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Notes</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.NotesServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Notes</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.NotesServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.NotesServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.Notes)">
            <summary>
            public virtual method that Inserts a Notes object into the datasource using a transaction.
            </summary>
            <param name="entity">Notes object to Insert.</param>
            <remarks>After Inserting into the datasource, the Notes object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Notes entity = new Notes();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	NotesService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.NotesServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.Notes})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>Notes</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Notes</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Notes.
             <code><![CDATA[
             TList<Notes> list = new TList<Notes>();
             Notes entity = new Notes();
             entity.StringProperty = "foo";
             Notes entity2 = new Notes();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	NotesService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.NotesServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.Notes)">
            <summary>
            public virtual method that Updates a Notes object into the datasource using a transaction.
            </summary>
            <param name="entity">Notes object to Update.</param>
            <remarks>After Updateing into the datasource, the Notes object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Notes entity = NotesService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	NotesService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.NotesServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.Notes})">
             <summary>
             public virtual method that Updates rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>Notes</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Notes</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Notes.
             <code><![CDATA[
             TList<Notes> list = new TList<Notes>();
             Notes entity = new Notes();
             entity.StringProperty = "foo";
             Notes entity2 = new Notes();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	NotesService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.NotesServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.Notes)">
            <summary>
            public virtual method that Deletes a Notes object into the datasource using a transaction.
            </summary>
            <param name="entity">Notes object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Notes object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Notes entity = NotesService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	NotesService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.NotesServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.Notes})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>Notes</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Notes</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Notes.
             <code><![CDATA[
             TList<Notes> list = new TList<Notes>();
             Notes entity = new Notes();
             entity.StringProperty = "foo";
             Notes entity2 = new Notes();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	NotesService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.NotesServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.NotesKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.NotesServiceBase.Delete(System.Decimal)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Decimal _notesRefno
            </summary>
            <param name="_notesRefno">Notes pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.NoteRolesService">
            <summary>
            An component type implementation of the 'NOTE_ROLES' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.NoteRolesService.#ctor">
            <summary>
            Initializes a new instance of the NoteRolesService class.
            </summary>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.NoteRolesServiceBase">
            <summary>
             An object representation of the 'NOTE_ROLES' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the NoteRoles.cs file instead.
             All custom implementations should be done in the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.NoteRoles"/> class.
             </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.NoteRolesServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.NoteRoles"/> instance .
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.NoteRolesServiceBase.CreateNoteRoles(System.Decimal,System.Nullable{System.Decimal},System.String,System.DateTime,System.Nullable{System.DateTime},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.NoteRoles"/> instance.
            </summary>
            <param name="_notesRefno"></param>
            <param name="_sorceRefno"></param>
            <param name="_sorceCode"></param>
            <param name="_startDttm"></param>
            <param name="_endDttm"></param>
            <param name="_serial"></param>
            <param name="_archvFlag"></param>
            <param name="_stranRefno"></param>
            <param name="_priorPointer"></param>
            <param name="_externalKey"></param>
            <param name="_nrtypRefno"></param>
            <param name="_ownerHeorgRefno"></param>
            <param name="_synCode"></param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.NoteRolesServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.NoteRolesServiceBase.Get(iSOFT.ANZ.PatientManagerService.Entities.NoteRolesKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.NoteRolesServiceBase.GetBySorceRefnoSorceCode(System.Nullable{System.Decimal},System.String)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_ROLES_SORCE index.
            </summary>
            <param name="_sorceRefno"></param>
            <param name="_sorceCode"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.NoteRolesServiceBase.GetBySorceRefnoSorceCode(System.Nullable{System.Decimal},System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_ROLES_SORCE index.
            </summary>
            <param name="_sorceRefno"></param>
            <param name="_sorceCode"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.NoteRolesServiceBase.GetByNotesRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_NOTRL_NOTES index.
            </summary>
            <param name="_notesRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.NoteRolesServiceBase.GetByNotesRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_NOTRL_NOTES index.
            </summary>
            <param name="_notesRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.NoteRolesServiceBase.GetByNotrlRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_NOTE_ROLES index.
            </summary>
            <param name="_notrlRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.NoteRoles"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.NoteRolesServiceBase.GetByNotrlRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_NOTE_ROLES index.
            </summary>
            <param name="_notrlRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.NoteRoles"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.NoteRolesServiceBase.GetByNrtypRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key SAH_NOTRL_NRTYP index.
            </summary>
            <param name="_nrtypRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.NoteRolesServiceBase.GetByNrtypRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key SAH_NOTRL_NRTYP index.
            </summary>
            <param name="_nrtypRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.NoteRolesServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.NoteRoles" /> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.NoteRolesServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.NoteRoles" /> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> </returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.NoteRolesServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>NoteRoles</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.NoteRolesServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>NoteRoles</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.NoteRolesServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>NoteRoles</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.NoteRolesServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.NoteRolesServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.NoteRoles)">
            <summary>
            public virtual method that Inserts a NoteRoles object into the datasource using a transaction.
            </summary>
            <param name="entity">NoteRoles object to Insert.</param>
            <remarks>After Inserting into the datasource, the NoteRoles object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            NoteRoles entity = new NoteRoles();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	NoteRolesService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.NoteRolesServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.NoteRoles})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>NoteRoles</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>NoteRoles</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of NoteRoles.
             <code><![CDATA[
             TList<NoteRoles> list = new TList<NoteRoles>();
             NoteRoles entity = new NoteRoles();
             entity.StringProperty = "foo";
             NoteRoles entity2 = new NoteRoles();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	NoteRolesService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.NoteRolesServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.NoteRoles)">
            <summary>
            public virtual method that Updates a NoteRoles object into the datasource using a transaction.
            </summary>
            <param name="entity">NoteRoles object to Update.</param>
            <remarks>After Updateing into the datasource, the NoteRoles object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            NoteRoles entity = NoteRolesService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	NoteRolesService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.NoteRolesServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.NoteRoles})">
             <summary>
             public virtual method that Updates rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>NoteRoles</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>NoteRoles</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of NoteRoles.
             <code><![CDATA[
             TList<NoteRoles> list = new TList<NoteRoles>();
             NoteRoles entity = new NoteRoles();
             entity.StringProperty = "foo";
             NoteRoles entity2 = new NoteRoles();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	NoteRolesService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.NoteRolesServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.NoteRoles)">
            <summary>
            public virtual method that Deletes a NoteRoles object into the datasource using a transaction.
            </summary>
            <param name="entity">NoteRoles object to Delete.</param>
            <remarks>After Deleteing into the datasource, the NoteRoles object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            NoteRoles entity = NoteRolesService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	NoteRolesService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.NoteRolesServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.NoteRoles})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>NoteRoles</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>NoteRoles</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of NoteRoles.
             <code><![CDATA[
             TList<NoteRoles> list = new TList<NoteRoles>();
             NoteRoles entity = new NoteRoles();
             entity.StringProperty = "foo";
             NoteRoles entity2 = new NoteRoles();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	NoteRolesService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.NoteRolesServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.NoteRolesKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.NoteRolesServiceBase.Delete(System.Decimal)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Decimal _notrlRefno
            </summary>
            <param name="_notrlRefno">NoteRoles pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.OdpcdCodesService">
            <summary>
            An component type implementation of the 'ODPCD_CODES' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.OdpcdCodesService.#ctor">
            <summary>
            Initializes a new instance of the OdpcdCodesService class.
            </summary>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.OdpcdCodesServiceBase">
            <summary>
             An object representation of the 'ODPCD_CODES' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the OdpcdCodes.cs file instead.
             All custom implementations should be done in the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.OdpcdCodes"/> class.
             </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.OdpcdCodesServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.OdpcdCodes"/> instance .
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.OdpcdCodesServiceBase.CreateOdpcdCodes(System.Decimal,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Decimal},System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.DateTime,System.Nullable{System.DateTime},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal})">
            <summary>
             A simple factory method to create a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.OdpcdCodes"/> instance.
            </summary>
            <param name="_odpcdRefno"></param>
            <param name="_code"></param>
            <param name="_ccsxtCode"></param>
            <param name="_description"></param>
            <param name="_suplCode"></param>
            <param name="_suplCcsxtCode"></param>
            <param name="_parntRefno"></param>
            <param name="_suplDescription"></param>
            <param name="_archvFlag"></param>
            <param name="_stranRefno"></param>
            <param name="_priorPointer"></param>
            <param name="_externalKey"></param>
            <param name="_traverseOnlyFlag"></param>
            <param name="_duration"></param>
            <param name="_price"></param>
            <param name="_citemRefno"></param>
            <param name="_blockNumber"></param>
            <param name="_cdtypRefno"></param>
            <param name="_startDttm"></param>
            <param name="_endDttm"></param>
            <param name="_ownerHeorgRefno"></param>
            <param name="_sclvlRefno"></param>
            <param name="_synCode"></param>
            <param name="_admDays"></param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.OdpcdCodesServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.OdpcdCodesServiceBase.Get(iSOFT.ANZ.PatientManagerService.Entities.OdpcdCodesKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.OdpcdCodesServiceBase.GetByDescriptionCcsxtCode(System.String,System.String)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_ODPCD_DESCRIPTION_CCSXT index.
            </summary>
            <param name="_description"></param>
            <param name="_ccsxtCode"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.OdpcdCodesServiceBase.GetByDescriptionCcsxtCode(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_ODPCD_DESCRIPTION_CCSXT index.
            </summary>
            <param name="_description"></param>
            <param name="_ccsxtCode"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.OdpcdCodesServiceBase.GetByParntRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_ODPCD_PARNT index.
            </summary>
            <param name="_parntRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.OdpcdCodesServiceBase.GetByParntRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_ODPCD_PARNT index.
            </summary>
            <param name="_parntRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.OdpcdCodesServiceBase.GetByCitemRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_ODPCD_CITEM index.
            </summary>
            <param name="_citemRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.OdpcdCodesServiceBase.GetByCitemRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_ODPCD_CITEM index.
            </summary>
            <param name="_citemRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.OdpcdCodesServiceBase.GetByOdpcdRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_ODPCD_CODES index.
            </summary>
            <param name="_odpcdRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.OdpcdCodes"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.OdpcdCodesServiceBase.GetByOdpcdRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_ODPCD_CODES index.
            </summary>
            <param name="_odpcdRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.OdpcdCodes"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.OdpcdCodesServiceBase.GetByCodeCcsxtCode(System.String,System.String)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_ODPCD_CODES index.
            </summary>
            <param name="_code"></param>
            <param name="_ccsxtCode"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.OdpcdCodesServiceBase.GetByCodeCcsxtCode(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CK_ODPCD_CODES index.
            </summary>
            <param name="_code"></param>
            <param name="_ccsxtCode"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.OdpcdCodesServiceBase.GetByCcsxtCode(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key SAH_ODPCD_CCSXT index.
            </summary>
            <param name="_ccsxtCode"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.OdpcdCodesServiceBase.GetByCcsxtCode(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key SAH_ODPCD_CCSXT index.
            </summary>
            <param name="_ccsxtCode"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.OdpcdCodesServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.OdpcdCodes" /> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.OdpcdCodesServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.OdpcdCodes" /> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> </returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.OdpcdCodesServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>OdpcdCodes</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.OdpcdCodesServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>OdpcdCodes</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.OdpcdCodesServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>OdpcdCodes</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.OdpcdCodesServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.OdpcdCodesServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.OdpcdCodes)">
            <summary>
            public virtual method that Inserts a OdpcdCodes object into the datasource using a transaction.
            </summary>
            <param name="entity">OdpcdCodes object to Insert.</param>
            <remarks>After Inserting into the datasource, the OdpcdCodes object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            OdpcdCodes entity = new OdpcdCodes();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	OdpcdCodesService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.OdpcdCodesServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.OdpcdCodes})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>OdpcdCodes</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>OdpcdCodes</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of OdpcdCodes.
             <code><![CDATA[
             TList<OdpcdCodes> list = new TList<OdpcdCodes>();
             OdpcdCodes entity = new OdpcdCodes();
             entity.StringProperty = "foo";
             OdpcdCodes entity2 = new OdpcdCodes();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	OdpcdCodesService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.OdpcdCodesServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.OdpcdCodes)">
            <summary>
            public virtual method that Updates a OdpcdCodes object into the datasource using a transaction.
            </summary>
            <param name="entity">OdpcdCodes object to Update.</param>
            <remarks>After Updateing into the datasource, the OdpcdCodes object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            OdpcdCodes entity = OdpcdCodesService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	OdpcdCodesService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.OdpcdCodesServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.OdpcdCodes})">
             <summary>
             public virtual method that Updates rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>OdpcdCodes</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>OdpcdCodes</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of OdpcdCodes.
             <code><![CDATA[
             TList<OdpcdCodes> list = new TList<OdpcdCodes>();
             OdpcdCodes entity = new OdpcdCodes();
             entity.StringProperty = "foo";
             OdpcdCodes entity2 = new OdpcdCodes();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	OdpcdCodesService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.OdpcdCodesServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.OdpcdCodes)">
            <summary>
            public virtual method that Deletes a OdpcdCodes object into the datasource using a transaction.
            </summary>
            <param name="entity">OdpcdCodes object to Delete.</param>
            <remarks>After Deleteing into the datasource, the OdpcdCodes object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            OdpcdCodes entity = OdpcdCodesService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	OdpcdCodesService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.OdpcdCodesServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.OdpcdCodes})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>OdpcdCodes</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>OdpcdCodes</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of OdpcdCodes.
             <code><![CDATA[
             TList<OdpcdCodes> list = new TList<OdpcdCodes>();
             OdpcdCodes entity = new OdpcdCodes();
             entity.StringProperty = "foo";
             OdpcdCodes entity2 = new OdpcdCodes();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	OdpcdCodesService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.OdpcdCodesServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.OdpcdCodesKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.OdpcdCodesServiceBase.Delete(System.Decimal)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Decimal _odpcdRefno
            </summary>
            <param name="_odpcdRefno">OdpcdCodes pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.WorkStationsService">
            <summary>
            An component type implementation of the 'WORK_STATIONS' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.WorkStationsService.#ctor">
            <summary>
            Initializes a new instance of the WorkStationsService class.
            </summary>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.WorkStationsServiceBase">
            <summary>
             An object representation of the 'WORK_STATIONS' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the WorkStations.cs file instead.
             All custom implementations should be done in the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.WorkStations"/> class.
             </remarks>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.WorkStationsServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.WorkStations"/> instance .
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.WorkStationsServiceBase.CreateWorkStations(System.String,System.String,System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.String,System.String,System.Nullable{System.Decimal},System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
            <summary>
             A simple factory method to create a new <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.WorkStations"/> instance.
            </summary>
            <param name="_id"></param>
            <param name="_description"></param>
            <param name="_heorgRefno"></param>
            <param name="_netwkAddress"></param>
            <param name="_wstypRefno"></param>
            <param name="_externalKey"></param>
            <param name="_archvFlag"></param>
            <param name="_stranRefno"></param>
            <param name="_lockedFlag"></param>
            <param name="_lockedComments"></param>
            <param name="_cashrRefno"></param>
            <param name="_ownerHeorgRefno"></param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.WorkStationsServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.WorkStationsServiceBase.Get(iSOFT.ANZ.PatientManagerService.Entities.WorkStationsKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.WorkStationsServiceBase.GetById(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key UK_WKSTN_ID index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.WorkStations"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.WorkStationsServiceBase.GetById(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key UK_WKSTN_ID index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.WorkStations"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.WorkStationsServiceBase.GetByHeorgRefno(System.Nullable{System.Decimal})">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_WKSTN_HEORG index.
            </summary>
            <param name="_heorgRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.WorkStationsServiceBase.GetByHeorgRefno(System.Nullable{System.Decimal},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key FK_WKSTN_HEORG index.
            </summary>
            <param name="_heorgRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.WorkStationsServiceBase.GetByWkstnRefno(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_WORK_STATIONS index.
            </summary>
            <param name="_wkstnRefno"></param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.WorkStations"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.WorkStationsServiceBase.GetByWkstnRefno(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the datasource based on the primary key CPK_WORK_STATIONS index.
            </summary>
            <param name="_wkstnRefno"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.WorkStations"/> class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.WorkStationsServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.WorkStations" /> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.WorkStationsServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.WorkStations" /> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1"/> </returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.WorkStationsServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>WorkStations</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.WorkStationsServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>WorkStations</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.WorkStationsServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>WorkStations</c> objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.WorkStationsServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.WorkStationsServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.WorkStations)">
            <summary>
            public virtual method that Inserts a WorkStations object into the datasource using a transaction.
            </summary>
            <param name="entity">WorkStations object to Insert.</param>
            <remarks>After Inserting into the datasource, the WorkStations object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            WorkStations entity = new WorkStations();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	WorkStationsService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.WorkStationsServiceBase.Insert(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.WorkStations})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>WorkStations</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>WorkStations</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of WorkStations.
             <code><![CDATA[
             TList<WorkStations> list = new TList<WorkStations>();
             WorkStations entity = new WorkStations();
             entity.StringProperty = "foo";
             WorkStations entity2 = new WorkStations();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	WorkStationsService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.WorkStationsServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.WorkStations)">
            <summary>
            public virtual method that Updates a WorkStations object into the datasource using a transaction.
            </summary>
            <param name="entity">WorkStations object to Update.</param>
            <remarks>After Updateing into the datasource, the WorkStations object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            WorkStations entity = WorkStationsService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	WorkStationsService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.WorkStationsServiceBase.Update(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.WorkStations})">
             <summary>
             public virtual method that Updates rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>WorkStations</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>WorkStations</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of WorkStations.
             <code><![CDATA[
             TList<WorkStations> list = new TList<WorkStations>();
             WorkStations entity = new WorkStations();
             entity.StringProperty = "foo";
             WorkStations entity2 = new WorkStations();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	WorkStationsService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.WorkStationsServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.WorkStations)">
            <summary>
            public virtual method that Deletes a WorkStations object into the datasource using a transaction.
            </summary>
            <param name="entity">WorkStations object to Delete.</param>
            <remarks>After Deleteing into the datasource, the WorkStations object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            WorkStations entity = WorkStationsService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	WorkStationsService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.WorkStationsServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.TList{iSOFT.ANZ.PatientManagerService.Entities.WorkStations})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> to the datasource.
             </summary>
             <param name="entityCollection"><c>WorkStations</c> objects in a <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>WorkStations</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of WorkStations.
             <code><![CDATA[
             TList<WorkStations> list = new TList<WorkStations>();
             WorkStations entity = new WorkStations();
             entity.StringProperty = "foo";
             WorkStations entity2 = new WorkStations();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	WorkStationsService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.WorkStationsServiceBase.Delete(iSOFT.ANZ.PatientManagerService.Entities.WorkStationsKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.WorkStationsServiceBase.Delete(System.Decimal)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Decimal _wkstnRefno
            </summary>
            <param name="_wkstnRefno">WorkStations pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.GenericProcessorResult">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary> 
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.GenericProcessorResult.#ctor">
            <summary>
            Initializes a new instance of the GenericProcessorResult class.
            </summary>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.GenericProcessorResult.Result">
             <summary>
            	Provides a result of the current process.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.GenericProcessorResult.BrokenRulesLists">
             <summary>
            	Provides a list of broken rules for the entire process.
             </summary>
            <value>A list of rules that were broken in the process</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.GenericProcessorResult.AddBrokenRulesList(System.Type,iSOFT.ANZ.PatientManagerService.Entities.Validation.BrokenRulesList)">
            <summary>
            Provides a method to aggregate BrokenRuleList Collections Based on their Type 
            if they are invalid.
            </summary>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.GenericProcessorResult.FinalProcessorState">
            <summary>
            Provides the final processor state the operation. 
            This is set by the processor.
            </summary>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.ProcessorState">
            <summary>
            ProcessorState enumeration.
            </summary>
        </member>
        <member name="F:iSOFT.ANZ.PatientManagerService.Services.ProcessorState.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:iSOFT.ANZ.PatientManagerService.Services.ProcessorState.Running">
            <summary>
            Running
            </summary>
        </member>
        <member name="F:iSOFT.ANZ.PatientManagerService.Services.ProcessorState.Stopped">
            <summary>
            Stopped
            </summary>
        </member>
        <member name="F:iSOFT.ANZ.PatientManagerService.Services.ProcessorState.Completed">
            <summary>
            Completed
            </summary>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.IProcessor">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.IProcessor.ProcessName">
             <summary>
            	Provides a name of the current processor to execute business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.IProcessor.Process">
             <summary>
            	Provides a name of the current processor to execute business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.IProcessor.ChangeProcessorState(iSOFT.ANZ.PatientManagerService.Services.ProcessorState)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.IProcessor.CurrentProcessorState">
            <summary>
            Provides the current process state of operation.
            </summary>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.IProcessorResult">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.IProcessorResult.Result">
             <summary>
            	Provides a result of the current process.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.IProcessorResult.BrokenRulesLists">
             <summary>
            	Provides a list of broken rules for the entire process.
             </summary>
            <value>A list of rules that were broken in the process</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.IProcessorResult.AddBrokenRulesList(System.Type,iSOFT.ANZ.PatientManagerService.Entities.Validation.BrokenRulesList)">
            <summary>
            Provides a method to aggregate BrokenRuleList Collections Based on their Type 
            if they are invalid.
            </summary>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.IProcessorResult.FinalProcessorState">
            <summary>
            Provides the final processor state the operation.
            </summary>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.ProcessorBase">
            <summary>
            The interface that each complex business unit of work processor will use.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProcessorBase.Process">
             <summary>
            	Provides a List of Processors to execute business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.ProcessorBase.ProcessResult">
            <summary>
            Provides the current process result of it's operation.
            </summary>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.ProcessorBase.ProcessName">
             <summary>
            	Provides a name of the current processor to execute business process logic in.
             </summary>
            <value>The name of the type of the processors to execute</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.ProcessorBase.CurrentProcessorState">
            <summary>
            Provides the current process state of operation.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProcessorBase.ChangeProcessorState(iSOFT.ANZ.PatientManagerService.Services.ProcessorState)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="E:iSOFT.ANZ.PatientManagerService.Services.ProcessorBase.ProcessorStateChanging">
            <summary>
            The ProcessorStateChanging event.
            </summary>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.ProcessorBase.ProcessorStateChangingEventHandler">
            <summary>
            The ProcessorStateChangingEventHandler event handler.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProcessorBase.OnNotifyProcessorStateChanging(iSOFT.ANZ.PatientManagerService.Services.ProcessorState)">
            <summary>
            Raises the ProcessorStateChanging event.
            </summary>
            <param name="newProcessorState"></param>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.SecurityContext`1">
            <summary>
            The class that is available in case role based security is required at runtime.  
            It will be made availabe through the entities themselves.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SecurityContext`1.#ctor">
            <summary>
             Creates a new <see cref="T:System.Security.SecurityContext"/> instance.
            </summary>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.SecurityContextBase`1">
            <summary>
            The class that is available in case role based security is required at runtime.  
            It will be made availabe through the entities themselves.
            </summary>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.SecurityContextBase`1.Identity">
            <summary>
            The Current IIdentity.
            </summary>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.SecurityContextBase`1.Profile">
            <summary>
            The Current Profile .
            </summary>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.SecurityContextBase`1.Principal">
            <summary>
             The Current IPrincipal .
            </summary>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.SecurityContextBase`1.RuleProvider">
            <summary>
             The Current Authorization Rule Provider
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SecurityContextBase`1.#ctor">
            <summary>
            Initializes a new instance of the SecurityContext class.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.SecurityContextBase`1.IsAuthorized(System.String)">
            <summary>
            Determine whether user is authorized for the rule based on the rule provider
            </summary>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.ContextView`2">
            <summary>
            Used to create a general view of the current context.  
            Useful for firing events and giving the UI a picture of 
            current State of Operation.
            </summary>
            <typeparam name="Entity">The Entity object</typeparam>
            <typeparam name="Domain">Type that holds </typeparam>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.ContextView`2.PersistingObject">
            <summary>
            Gets or sets the persisting object.
            </summary>
            <value>The persisting object.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.ContextView`2.SecurityContext">
            <summary>
            Gets or sets the security context.
            </summary>
            <value>The security context.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.ContextView`2.TransactionManager">
            <summary>
            Gets or sets the transaction manager.
            </summary>
            <value>The transaction manager.</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ContextView`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Services.ContextView`2"/> class.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ContextView`2.#ctor(`0,iSOFT.ANZ.PatientManagerService.Services.SecurityContext{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Services.ContextView`2"/> class.
            </summary>
            <param name="persistingObject">The persisting object.</param>
            <param name="securityContext">The security context.</param>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ContextView`2.#ctor(`0,iSOFT.ANZ.PatientManagerService.Services.SecurityContext{`0},iSOFT.ANZ.PatientManagerService.Data.TransactionManager)">
            <summary>
            Initializes a new instance of the <see cref="T:iSOFT.ANZ.PatientManagerService.Services.ContextView`2"/> class.
            </summary>
            <param name="persistingObject">The persisting object.</param>
            <param name="securityContext">The security context.</param>
            <param name="transactionManager">The transaction manager.</param>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.DomainUtil">
            <summary>
            DomainUtil class.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.DomainUtil.GetErrorsFromList``1(iSOFT.ANZ.PatientManagerService.Entities.TList{``0})">
            <summary>
            Aggregates all the errors in a collection
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.DomainUtil.HandleException(System.Exception,System.String)">
            <summary>
            Wraps call to tohe <see cref="T:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicy"/> class which handles all exceptions based on the security policy.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.DomainUtil.GetDefaultByType(System.Data.DbType)">
            <summary>
            Get a default value for a given data type
            </summary>
            <param name="dataType">Data type for which to get the default value</param>
            <returns>An object of the default value.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.DomainUtil.GetDataValue(System.Data.IDataParameter)">
            <summary>
            Get Value or Default Value from an IDataParamater
            Based on DbType
            </summary>
            <param name="p">The IDataParameter instance type is used to determine the default value.</param>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.DomainUtil.DefaultToDBNull(System.Object,System.Data.DbType)">
            <summary>
            Checks to see if the Default Value has been set to the parameter.
            If it's the default value, then create.
            </summary>
            <param name="val">The value we want to check.</param>
            <param name="dbtype">The DbType from wich we take the default value.</param>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.DomainUtil.GetParameterValue``1(System.Data.IDataParameter)">
            <summary>
            Generic method to return the value of a nullable parameter
            </summary>
            <typeparam name="T">Type of value to return</typeparam>
            <param name="parameter">Parameter from which to extract the value</param>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.DomainUtil.ConvertDataReaderToDataSet(System.Data.IDataReader)">
            <summary>
            Converts a IDataReader to a DataSet.  For use when a custom stored procedure returns an <see cref="T:System.Data.IDataReader" />, it will
            convert all result sets returned as a DataSet.
            </summary>
            <param name="reader">The reader to convert</param>
            <returns>A dataset with one table per result in the reader</returns>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.IConnectionScope">
            <summary>
            Connection Scope Interface
            </summary>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.IConnectionScope.ConnectionStringKey">
            <summary>
            Gets or sets the connection string key.
            </summary>
            <value>The connection string key.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.IConnectionScope.DataProvider">
            <summary>
            Gets or sets the data provider.
            </summary>
            <value>The data provider.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.IConnectionScope.DynamicConnectionString">
            <summary>
            Gets or sets the dynamic connection string.
            </summary>
            <value>The dynamic connection string.</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.IConnectionScope.HasTransaction">
            <summary>
            Gets a value indicating whether this instance has transaction.
            </summary>
            <value>
            	<c>true</c> if this instance has transaction; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.IConnectionScope.TransactionManager">
            <summary>
            Gets or sets the transaction manager.
            </summary>
            <value>The transaction manager.</value>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.ConnectionScope">
            <summary>
            Provides storage of global database connection information.
            </summary>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.ConnectionScope.Current">
            <summary>
            Gets a reference to the ConnectionScope object for the current thread.
            </summary>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.ConnectionScope.HasTransaction">
            <summary>
            Determines if Current Connections is in a Transaction.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ConnectionScope.#ctor">
            <summary>
            Private constructor.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ConnectionScope.NewThread(System.Threading.ThreadStart)">
            <summary>
            Creates a new <see cref="T:System.Threading.Thread"/> object and copies
            the current <see cref="T:iSOFT.ANZ.PatientManagerService.Services.ConnectionScope"/> parameters.
            </summary>
            <param name="start">A delegate specifying which method to run
            when the <see cref="T:System.Threading.Thread"/> is started.</param>
            <returns>Returns a new <see cref="T:System.Threading.Thread"/> object.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ConnectionScope.NewThread(System.Threading.ParameterizedThreadStart)">
            <summary>
            Creates a new <see cref="T:System.Threading.Thread"/> object and copies
            the current <see cref="T:iSOFT.ANZ.PatientManagerService.Services.ConnectionScope"/> parameters.
            </summary>
            <param name="start">A delegate specifying which method to run
            when the <see cref="T:System.Threading.Thread"/> is started.</param>
            <returns>Returns a new <see cref="T:System.Threading.Thread"/> object.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ConnectionScope.EnqueueOnThreadPool(System.Threading.ThreadStart)">
            <summary>
            Queues a method for execution. The method executes
            when a thread pool thread becomes available.
            </summary>
            <param name="start">A delegate specifying which method to run
            when the <see cref="T:System.Threading.Thread"/> is started.</param>
            <returns>Returns true if the method is successfully queued.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ConnectionScope.EnqueueOnThreadPool(System.Threading.ParameterizedThreadStart,System.Object)">
            <summary>
            Queues a method for execution. The method executes
            when a thread pool thread becomes available.
            </summary>
            <param name="start">A delegate specifying which method to run
            when the <see cref="T:System.Threading.Thread"/> is started.</param>
            <param name="state">An object containing data to be used by the method.</param>
            <returns>Returns true if the method is successfully queued.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ConnectionScope.Copy(iSOFT.ANZ.PatientManagerService.Services.ConnectionScope)">
            <summary>
            Copies the values from the specified <paramref name="scope"/> object
            to the <see cref="T:iSOFT.ANZ.PatientManagerService.Services.ConnectionScope"/> used by the current thread.
            </summary>
            <param name="scope">A <see cref="T:iSOFT.ANZ.PatientManagerService.Services.ConnectionScope"/> object.</param>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ConnectionScope.ValidateOrCreateTransaction">
            <summary>
            Validates an existing <c cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager" /> if one exists,
            otherwise creates a new <c cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager" /> to use.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ConnectionScope.ValidateOrCreateTransaction(System.Boolean)">
            <summary>
            Validates an existing <c cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager" /> if one exists,
            otherwise creates a new <c cref="T:iSOFT.ANZ.PatientManagerService.Data.TransactionManager" /> to use.
            </summary>
            <param name="createTransaction">determines whether to create a new transaction</param>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ConnectionScope.CreateTransaction">
            <summary>
            Creates a new transaction on the current <c>ConnectionScope</c>.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ConnectionScope.CreateTransaction(System.Data.IsolationLevel)">
            <summary>
            Creates a new transaction on the current <c>ConnectionScope</c>
            with the specified <c cref="T:System.Data.IsolationLevel" />.
            </summary>
            <param name="level">Determines which <c cref="T:System.Data.IsolationLevel" /> to use for the transaction.</param>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ConnectionScope.Complete">
            <summary>
            Completes this transaction.
            </summary>
            <returns></returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ConnectionScope.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.ConnectionScopeBase">
            <summary>
            Provides storage of global database connection information.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ConnectionScopeBase.#ctor">
            <summary>
            Initializes a new instance of the ConnectionScope class.
            </summary>
        </member>
        <member name="F:iSOFT.ANZ.PatientManagerService.Services.ConnectionScopeBase.connectionStringKey">
            <summary>
            The ConnectionStringKey member variable.
            </summary>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.ConnectionScopeBase.ConnectionStringKey">
            <summary>
            Gets or sets the ConnectionStringKey property.
            </summary>
        </member>
        <member name="F:iSOFT.ANZ.PatientManagerService.Services.ConnectionScopeBase.dynamicConnectionString">
            <summary>
            The DynamicConnectionString member variable.
            </summary>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.ConnectionScopeBase.DynamicConnectionString">
            <summary>
            Gets or sets the DynamicConnectionString property.
            </summary>
        </member>
        <member name="F:iSOFT.ANZ.PatientManagerService.Services.ConnectionScopeBase.transactionManager">
            <summary>
            The TransactionManager member variable.
            </summary>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.ConnectionScopeBase.TransactionManager">
            <summary>
            Gets or sets the TransactionManager property.
            </summary>
        </member>
        <member name="F:iSOFT.ANZ.PatientManagerService.Services.ConnectionScopeBase.dataProvider">
            <summary>
            The NetTiersProvider member variable.
            </summary>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.ConnectionScopeBase.DataProvider">
             <summary>
             Gets or Sets the Current DataProvider property of the <c>ConnectionScope</c> Object.
             </summary>
             <remarks>
             To use a dynamic connection, you must set both the 
             DynamicConnectionString and a unique ConnectionStringKey properties;
            </remarks>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.ConnectionScopeBase.HasTransaction">
            <summary>
            Determines if Current Connections is in a Transaction.
            </summary>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.ServiceResult">
            <summary>
            The class provides a notification pattern for the processor execution.
            </summary>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.ServiceResult.HasErrors">
            <summary>
               Determines whethere the containing service, has errors.
            </summary>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.ServiceResult.Error">
            <summary>
               Provides a string of errors accumulated with a new line of delimeted errors.
            </summary>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.ServiceResult.ProcessBrokenRuleLists">
            <summary>
               Provides an aggregated group of BrokenRuleList for each of the executed processes.
            </summary>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.ServiceResult.ProcessorResultList">
            <summary>
               Determines whethere the containing processs results that were enlisted in the service.
            </summary>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.ServiceResult.ExceptionList">
             <summary>
            	Provides the List of UnHandled Exceptions that occured during processing.
             </summary>
            <value>A list of rules that were broken in the process</value>		
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.ServiceBase`2">
            <summary>
            The base class that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.ServiceBaseCore`2">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.ServiceBaseCore`2.ProcessorList">
             <summary>
            	Provides a List of Processors to execute external business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.ServiceBaseCore`2.ServiceProcessResult">
             <summary>
            	Provides a Notification Pattern of Process Results.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.ServiceBaseCore`2.AbortOnFailure">
             <summary>
            	Provides a way to terminate the Processor calls upon an exception. 
             </summary>
            <value>bool value determining to stop once an exceptions been thrown. </value>		
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.ServiceBaseCore`2.CurrentProcessor">
            <summary>
            Current Processor being executed
            </summary>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.ServiceBaseCore`2.ProcessCounter">
            <summary>
            Current Number of Processes completed thus far.
            </summary>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.ServiceBaseCore`2.CurrentProcessorIndex">
            <summary>
            Current index of the processor currently or last executed 
            </summary>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.ServiceBaseCore`2.TotalProcesses">
            <summary>
            Total Number of Processes currently enlisted in this service 
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServiceBaseCore`2.OnProcessStarting(iSOFT.ANZ.PatientManagerService.Services.ProcessorBase)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServiceBaseCore`2.OnProcessEnded(iSOFT.ANZ.PatientManagerService.Services.ProcessorBase)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="E:iSOFT.ANZ.PatientManagerService.Services.ServiceBaseCore`2.ProcessStarting">
            <summary>
            Event to indicate that a processor has began.
            </summary>
        </member>
        <member name="E:iSOFT.ANZ.PatientManagerService.Services.ServiceBaseCore`2.ProcessEnded">
            <summary>
            Event to indicate that a processor has ended.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServiceBaseCore`2.Execute">
             <summary>
            	Provides the beginning
             <remarks>
             If no AbortIfFailure parameter is passed then the process will not abort if there is a failure
             </remarks>
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServiceBaseCore`2.Execute(System.Boolean)">
             <summary>
            	Executes the processors in the processor list
             <remarks>
             If abortIfFailure is set to true then the execution will halt on the first failure
            </remarks>
             </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServiceBaseCore`2.Get(`1)">
            <summary>
            Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServiceBaseCore`2.GetAll">
            <summary>
            Gets all rows from the DataSource.
            </summary>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServiceBaseCore`2.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServiceBaseCore`2.Insert(`0)">
            <summary>
            Inserts a row into the DataSource.
            </summary>
            <param name="entity">The Entity object to insert.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServiceBaseCore`2.BulkInsert(iSOFT.ANZ.PatientManagerService.Entities.TList{`0})">
            <summary>
            Efficiently inserts multiple rows into the DataSource.
            </summary>
            <param name="entities">TList of Entity objects to insert.</param>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServiceBaseCore`2.Update(`0)">
            <summary>
            Updates an existing row in the DataSource.
            </summary>
            <param name="entity">The Entity object to update.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServiceBaseCore`2.Delete(`0)">
            <summary>
            Deletes a row from the DataSource.
            </summary>
            <param name="entity">The Entity object to delete.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServiceBaseCore`2.DeepLoad(`0,System.Boolean,iSOFT.ANZ.PatientManagerService.Data.DeepLoadType,System.Type[],iSOFT.ANZ.PatientManagerService.Data.Bases.DeepSession)">
            <summary>
            Deep Load the entire Entity object with criteria based on the child types array and the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entity">The Entity object to load.</param>
            <param name="deep">A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. If True, loads the complete object graph below this object. If False, loads this object only.</param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Load.</param>
            <param name="innerList">A collection of child types for easy access.</param>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServiceBaseCore`2.DeepLoad(iSOFT.ANZ.PatientManagerService.Entities.TList{`0},System.Boolean,iSOFT.ANZ.PatientManagerService.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:iSOFT.ANZ.PatientManagerService.Entities.TList`1" /> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entities">TList of Entity objects to load.</param>
            <param name="deep">A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. If True, loads the complete object graph below this object. If False, loads this object only.</param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Load.</param>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.ProcessStartingHandler">
            <summary>
            ProcessStartingHandler
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.ProcessEndedHandler">
            <summary>
            ProcessEndedHandler
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.ProcessorEventArgs">
            <summary>
            Processor Event Args
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ProcessorEventArgs.#ctor(iSOFT.ANZ.PatientManagerService.Services.ProcessorBase)">
            <summary>
            Initializes a new instance of the ProcessorEventArgs class.
            </summary>
            <param name="processor"></param>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.ProcessorEventArgs.Processor">
            <summary>
            Gets or sets the processor.
            </summary>
            <value>The processor.</value>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.IComponentService">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.IComponentService.ProcessorList">
             <summary>
            	Provides a List of Processors to execute business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.IComponentService.ServiceProcessResult">
             <summary>
            	Provides a Notification Pattern of Process Results.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.IComponentService.AbortOnFailure">
             <summary>
            	Provides a way to terminate the Processor calls upon an exception. 
             </summary>
            <value>bool value determining to stop once an exceptions been thrown. </value>		
        </member>
        <member name="E:iSOFT.ANZ.PatientManagerService.Services.IComponentService.ProcessStarting">
            <summary>
            Event to indicate that a processor is about to begin.
            </summary>
        </member>
        <member name="E:iSOFT.ANZ.PatientManagerService.Services.IComponentService.ProcessEnded">
            <summary>
            Event to indicate that a processor has just ended.
            </summary>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.ServiceViewBase`1">
            <summary>
            The base class that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="T:iSOFT.ANZ.PatientManagerService.Services.ServiceViewBaseCore`1">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServiceViewBaseCore`1.Execute">
             <summary>
            	Provides the beginning
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServiceViewBaseCore`1.Execute(System.Boolean)">
             <summary>
            	Provides the beginning
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.ServiceViewBaseCore`1.ProcessorList">
             <summary>
            	Provides a List of Processors to execute external business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.ServiceViewBaseCore`1.ServiceProcessResult">
             <summary>
            	Provides a Notification Pattern of Process Results.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.ServiceViewBaseCore`1.AbortOnFailure">
             <summary>
            	Provides a way to terminate the Processor calls upon an exception. 
             </summary>
            <value>bool value determining to stop once an exceptions been thrown. </value>		
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.ServiceViewBaseCore`1.CurrentProcessor">
            <summary>
            Current Processor being executed
            </summary>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.ServiceViewBaseCore`1.ProcessCounter">
            <summary>
            Current Number of Processes completed thus far.
            </summary>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.ServiceViewBaseCore`1.CurrentProcessorIndex">
            <summary>
            Current index of the processor currently or last executed 
            </summary>
        </member>
        <member name="P:iSOFT.ANZ.PatientManagerService.Services.ServiceViewBaseCore`1.TotalProcesses">
            <summary>
            Total Number of Processes currently enlisted in this service 
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServiceViewBaseCore`1.OnProcessStarting(iSOFT.ANZ.PatientManagerService.Services.ProcessorBase)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServiceViewBaseCore`1.OnProcessEnded(iSOFT.ANZ.PatientManagerService.Services.ProcessorBase)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="E:iSOFT.ANZ.PatientManagerService.Services.ServiceViewBaseCore`1.ProcessStarting">
            <summary>
            Event to indicate that a processor has began.
            </summary>
        </member>
        <member name="E:iSOFT.ANZ.PatientManagerService.Services.ServiceViewBaseCore`1.ProcessEnded">
            <summary>
            Event to indicate that a processor has ended.
            </summary>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServiceViewBaseCore`1.Get">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServiceViewBaseCore`1.Get(System.Int32,System.Int32)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServiceViewBaseCore`1.Get(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServiceViewBaseCore`1.Get(System.String,System.String)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServiceViewBaseCore`1.Get(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServiceViewBaseCore`1.Get(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServiceViewBaseCore`1.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServiceViewBaseCore`1.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a VList of Entity objects.</returns>
        </member>
        <member name="M:iSOFT.ANZ.PatientManagerService.Services.ServiceViewBaseCore`1.Find(iSOFT.ANZ.PatientManagerService.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:iSOFT.ANZ.PatientManagerService.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
    </members>
</doc>
